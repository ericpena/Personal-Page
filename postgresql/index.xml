<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>postgresql - Eric Pe√±a</title>
    <link>https://ericpena.github.io/postgresql/index.xml</link>
    <description></description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 18 Jun 2018 11:53:49 -0700</lastBuildDate>
    
        <atom:link href="https://ericpena.github.io/postgresql/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Create PostgreSQL Database With Python</title>
      <link>https://ericpena.github.io/postgresql/basics/create_postgresql_database_with_python.html</link>
      <pubDate>Mon, 18 Jun 2018 11:53:49 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/basics/create_postgresql_database_with_python.html</guid>
      <description>Preliminaries # Load libraries from sqlalchemy import create_engine from sqlalchemy_utils import create_database, database_exists, drop_database # Create PostgreSQL connection engine = create_engine(&amp;#34;postgres://localhost/notes_db&amp;#34;) # Load sql_magic so we can write SQL in Jupyter Notebooks %load_ext sql_magic # Setup SQL connection to the postgreSQL engine we created %config SQL.conn_name = &amp;#39;engine&amp;#39; Create Database # If a PostgreSQL database with this name exists if database_exists(engine.url): # Delete PostgreSQL database  drop_database(engine.url) # Create empty PostgreSQL database create_database(engine.</description>
    </item>
    
    <item>
      <title>Add Column</title>
      <link>https://ericpena.github.io/postgresql/add_delete_change/add_column.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/add_delete_change/add_column.html</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Add Column -- Alter the table called adventurers ALTER TABLE adventurers -- Add a column called armor that is a 255 -- character string field with the default value of null ADD COLUMN armor varchar(255) NULL View Table -- Retrieve all rows SELECT * FROM adventurers </description>
    </item>
    
    <item>
      <title>Adding Or Substracting Time</title>
      <link>https://ericpena.github.io/postgresql/dates/adding_or_substracting_time.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/dates/adding_or_substracting_time.html</guid>
      <description>Create Table -- Create table called dead_adventurers CREATE TABLE dead_adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255), -- date variable  died date ) Insert Rows -- Insert into the table dead_adventurers INSERT INTO dead_adventurers (name, age, race, weapon, died) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;, &amp;#39;09-Nov-2017&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;, &amp;#39;10-JAN-2017&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;, &amp;#39;12-APR-2016&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;, &amp;#39;06-MAY-2017&amp;#39;) Create New Column Three Days Later -- Create a column called three_days_laters that takes the value -- of died and adds three days to it SELECT died + INTERVAL &amp;#39;3 day&amp;#39; AS three_days_later -- From adventurers table FROM dead_adventurers </description>
    </item>
    
    <item>
      <title>All Unique Values In Two Tables</title>
      <link>https://ericpena.github.io/postgresql/merging_and_joining/all_unique_values_in_two_tables.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/merging_and_joining/all_unique_values_in_two_tables.html</guid>
      <description>Create Table Of Elves -- Create table called elves CREATE TABLE elves ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Create Table Of Dwarves -- Create table called dwarves CREATE TABLE dwarves ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows Into Elf Table INSERT INTO elves (name, age, race, weapon) VALUES (&amp;#39;Dallar Woodfoot&amp;#39;, 25, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Cordin Garner&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Keat Knigh&amp;#39;, 24, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Colbat Nalor&amp;#39;, 124, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Insert Rows Into Dwarf Table INSERT INTO dwarves (name, age, race, weapon) VALUES (&amp;#39;Kalog&amp;#39;, 23, &amp;#39;Dwarf&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Dranar&amp;#39;, 145, &amp;#39;Dwarf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Bratar&amp;#39;, 12, &amp;#39;Dwarf&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Dragga&amp;#39;, 23, &amp;#39;Dwarf&amp;#39;, &amp;#39;Axe&amp;#39;) Find The Combined Unique Values In Two Tables -- Retrieve all weapons from elves SELECT weapon FROM elves -- Combine unique values with.</description>
    </item>
    
    <item>
      <title>Apply Operation To Column</title>
      <link>https://ericpena.github.io/postgresql/basics/apply_operation_to_column.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/basics/apply_operation_to_column.html</guid>
      <description>Create Table Of Adventurers -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;) Apply Operation To Column -- Update the age column, multiplying all age values by 10 UPDATE adventurers SET age = age * 10 Apply Operation To Column With Conditions -- Update the name column where the race column is &amp;#39;Elf&amp;#39; UPDATE adventurers SET name = &amp;#39;Some Elf&amp;#39; WHERE race = &amp;#39;Elf&amp;#39; View Table -- Retrieve data SELECT * FROM adventurers </description>
    </item>
    
    <item>
      <title>Calculate Max, Min, Or Average Of Column</title>
      <link>https://ericpena.github.io/postgresql/numeric/max_min_and_average_of_column.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/numeric/max_min_and_average_of_column.html</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Calculate Max -- Return maximum value of of age in adventurers SELECT MAX(age) FROM adventurers Calculate Min -- Return minimum value of of age in adventurers SELECT MIN(age) FROM adventurers Calculate Average -- Return average value of of age in adventurers SELECT AVG(age) FROM adventurers </description>
    </item>
    
    <item>
      <title>Calculate Running Total</title>
      <link>https://ericpena.github.io/postgresql/numeric/calculate_running_total.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/numeric/calculate_running_total.html</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- integer variable  id int, -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (id, name, age, race, weapon) VALUES (1, &amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (2, &amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (3, &amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (4, &amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Create Running Total -- Get name, age, and.</description>
    </item>
    
    <item>
      <title>Calculate Sum Of Column</title>
      <link>https://ericpena.github.io/postgresql/numeric/calculate_sum_of_column.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/numeric/calculate_sum_of_column.html</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Calculate Sum -- Return total value of of age in adventurers SELECT SUM(age) FROM adventurers </description>
    </item>
    
    <item>
      <title>Calculate Time Duration</title>
      <link>https://ericpena.github.io/postgresql/dates/calculate_time_duration.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/dates/calculate_time_duration.html</guid>
      <description>Create Table -- Create table called dead_adventurers CREATE TABLE dead_adventurers ( -- string variable  name varchar(255), -- string variable  race varchar(255), -- string variable  weapon varchar(255), -- date variable  started_adventure date, -- date variable  died date ) Insert Rows -- Insert into the table dead_adventurers INSERT INTO dead_adventurers (name, race, weapon, started_adventure, died) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;, &amp;#39;09-JAN-2017&amp;#39;, &amp;#39;10-Nov-2017&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;, &amp;#39;10-JAN-2017&amp;#39;, &amp;#39;11-JAN-2017&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;, &amp;#39;11-JAN-2017&amp;#39;, &amp;#39;12-APR-2017&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;, &amp;#39;23-JAN-2017&amp;#39;, &amp;#39;06-MAY-2017&amp;#39;) Calculate Duration Between Two Date Values -- Get all the columns, and add a new column called days_on_adventure -- that is the number of days between the start of the adventurer and when they died SELECT *, died - started_adventure AS days_on_adventure FROM dead_adventurers </description>
    </item>
    
    <item>
      <title>Cartesian Product Of Tables</title>
      <link>https://ericpena.github.io/postgresql/merging_and_joining/cartesian_product.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/merging_and_joining/cartesian_product.html</guid>
      <description>Create Table Of Adventurers -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255) ) Create Table Of Adventurer&#39;s Equipment -- Create table called equipment CREATE TABLE equipment ( -- string variable  name varchar(255), -- string variable  clothes varchar(255), -- string variable  weapon varchar(255) ) Insert Rows Into Adventurers Table INSERT INTO adventurers (name, age, race) VALUES (&amp;#39;Dallar Woodfoot&amp;#39;, 25, &amp;#39;Elf&amp;#39;), (&amp;#39;Cordin Garner&amp;#39;, 29, &amp;#39;Elf&amp;#39;), (&amp;#39;Keat Knigh&amp;#39;, 24, &amp;#39;Dwarf&amp;#39;), (&amp;#39;Colbat Nalor&amp;#39;, 124, &amp;#39;Dwarf&amp;#39;) Insert Rows Into Equipment Table INSERT INTO equipment (name, clothes, weapon) VALUES (&amp;#39;Dallar Woodfoot&amp;#39;, &amp;#39;Leather Armor&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Keat Knigh&amp;#39;, &amp;#39;Robe&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Tasar Keynelis&amp;#39;, &amp;#39;Tunic&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Sataleeti Iarroris&amp;#39;,&amp;#39;Chainmail&amp;#39;, &amp;#39;Axe&amp;#39;) Cartestian Product Of Tables -- Return the name of people from the adventurers table, age, race, clothes, and weapon SELECT adventurers.</description>
    </item>
    
    <item>
      <title>Change Values</title>
      <link>https://ericpena.github.io/postgresql/add_delete_change/change_values.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/add_delete_change/change_values.html</guid>
      <description>Create Table Of Elves -- Create table called elves CREATE TABLE elves ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  alive varchar(255) ) Insert Rows Into Elf Table INSERT INTO elves (name, age, race, alive) VALUES (&amp;#39;Dallar Woodfoot&amp;#39;, 25, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;), (&amp;#39;Cordin Garner&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;), (&amp;#39;Keat Knigh&amp;#39;, 24, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;), (&amp;#39;Colbat Nalor&amp;#39;, 124, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;) Update Row Values -- Update the elves table UPDATE elves -- To set age to the current age plus 1 SET age = age + 1 View Elves Table -- Retrieve all rows from the view Elf SELECT * FROM elves </description>
    </item>
    
    <item>
      <title>Compare Values To Subquery</title>
      <link>https://ericpena.github.io/postgresql/basics/compare_values_to_subquery.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/basics/compare_values_to_subquery.html</guid>
      <description>Create Table Of Elves -- Create table called elves CREATE TABLE elves ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Create Table Of Dwarves -- Create table called dwarves CREATE TABLE dwarves ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows Into Elf Table INSERT INTO elves (name, age, race, weapon) VALUES (&amp;#39;Dallar Woodfoot&amp;#39;, 25, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Cordin Garner&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Keat Knigh&amp;#39;, 24, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Colbat Nalor&amp;#39;, 124, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Insert Rows Into Dwarf Table INSERT INTO dwarves (name, age, race, weapon) VALUES (&amp;#39;Kalog&amp;#39;, 23, &amp;#39;Dwarf&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Dranar&amp;#39;, 145, &amp;#39;Dwarf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Bratar&amp;#39;, 12, &amp;#39;Dwarf&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Dragga&amp;#39;, 23, &amp;#39;Dwarf&amp;#39;, &amp;#39;Axe&amp;#39;) Check If Each Elf Is Older Than Any Of The Dwarves -- Retrieve All The Elves SELECT * FROM elves -- Where their age is greater than at least one WHERE age &amp;gt; ANY ( -- Of all the Dwarves  SELECT age FROM dwarves ) Check If Each Elf Is Older Than All Of The Dwarves -- Retrieve All The Elves SELECT * FROM elves -- Where their age is greater than all WHERE age &amp;gt; ALL ( -- Of all the Dwarves  SELECT age FROM dwarves ) </description>
    </item>
    
    <item>
      <title>Concatenate Multiple Table</title>
      <link>https://ericpena.github.io/postgresql/merging_and_joining/concatenate_multiple_tables.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/merging_and_joining/concatenate_multiple_tables.html</guid>
      <description>Create Table Of Elves -- Create table called elves CREATE TABLE elves ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Create Table Of Dwarves -- Create table called dwarves CREATE TABLE dwarves ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Create Table Of Orcs -- Create table called orcs CREATE TABLE orcs ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows Into Elf Table INSERT INTO elves (name, age, race, weapon) VALUES (&amp;#39;Dallar Woodfoot&amp;#39;, 25, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Cordin Garner&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Keat Knigh&amp;#39;, 24, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Colbat Nalor&amp;#39;, 124, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Insert Rows Into Dwarf Table INSERT INTO dwarves (name, age, race, weapon) VALUES (&amp;#39;Kalog&amp;#39;, 23, &amp;#39;Dwarf&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Dranar&amp;#39;, 145, &amp;#39;Dwarf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Bratar&amp;#39;, 12, &amp;#39;Dwarf&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Dragga&amp;#39;, 23, &amp;#39;Dwarf&amp;#39;, &amp;#39;Axe&amp;#39;) Insert Rows Into Orc Table INSERT INTO orcs (name, age, race, weapon) VALUES (&amp;#39;Wokganit&amp;#39;, 23, &amp;#39;Orc&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Wudugog&amp;#39;, 145, &amp;#39;Orc&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Wegigoth&amp;#39;, 12, &amp;#39;Orc&amp;#39;, &amp;#39;Magic&amp;#39;), (&amp;#39;Wulgha&amp;#39;, 23, &amp;#39;Orc&amp;#39;, &amp;#39;Axe&amp;#39;) Concatenate All Tables -- All rows from elf table SELECT * FROM elves -- Concatenate with.</description>
    </item>
    
    <item>
      <title>Concatenate Values</title>
      <link>https://ericpena.github.io/postgresql/text/concatenate_values.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/text/concatenate_values.html</guid>
      <description>Note: This code works in PostgreSQL databases, but might not work in other SQL database systems (e.g. MySQL).
Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Retrieve Two Columns -- Retrieve name and age values and concatenate together as a sentence SELECT name||&amp;#39;is &amp;#39;||age||&amp;#39;years old.</description>
    </item>
    
    <item>
      <title>Convert Floats To Integers</title>
      <link>https://ericpena.github.io/postgresql/numeric/convert_floats_to_integers.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/numeric/convert_floats_to_integers.html</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Calculate Average -- Return average value of of age in adventurers SELECT AVG(age) FROM adventurers Calculate Average As Integer -- Return average integer value of age in adventurers SELECT CAST(AVG(age) AS INTEGER) FROM adventurers </description>
    </item>
    
    <item>
      <title>Copy Rows From One Table To Another</title>
      <link>https://ericpena.github.io/postgresql/basics/copy_rows_from_one_table_to_another.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/basics/copy_rows_from_one_table_to_another.html</guid>
      <description>Create Table Of Adventurers -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255) ) Create Table Of Villains -- Create table called equipment CREATE TABLE villains ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255) ) Insert Row Into Adventurers -- Insert into the table adventurers INSERT INTO adventurers (name, age, race) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;) View Adventurers Table -- Retrieve all rows SELECT * FROM adventurers Copy Rows From Adventurers Table To Villains Table -- Insert into the villains table INSERT INTO villains ( -- All rows from adventurers  SELECT * FROM adventurers ) View Villains Table -- Retrieve all rows SELECT * FROM villains </description>
    </item>
    
    <item>
      <title>Copy Table Structure</title>
      <link>https://ericpena.github.io/postgresql/tables/copy_table_structure.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/tables/copy_table_structure.html</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Create New Table Using Existing Table&#39;s Structure -- Create table called adventurers_copy using the same columns as... CREATE TABLE adventurers_copy AS ( -- The adventurers table  SELECT * FROM adventurers ) </description>
    </item>
    
    <item>
      <title>Count Rows</title>
      <link>https://ericpena.github.io/postgresql/basics/count_rows.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/basics/count_rows.html</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Count Rows -- Count rows in adventurers SELECT COUNT(*) FROM adventurers </description>
    </item>
    
    <item>
      <title>Count Unique Values</title>
      <link>https://ericpena.github.io/postgresql/basics/count_unique_values.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/basics/count_unique_values.html</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Count Unique Values In Race -- Count the number of unique values in the race column SELECT COUNT (DISTINCT race) FROM adventurers </description>
    </item>
    
    <item>
      <title>Create Column Aliases</title>
      <link>https://ericpena.github.io/postgresql/add_delete_change/create_column_aliases.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/add_delete_change/create_column_aliases.html</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Retrieve Two Columns -- Retrieve name and weapon column, renamed full_name and primary_weapon SELECT name as full_name, weapon as primary_weapon FROM adventurers </description>
    </item>
    
    <item>
      <title>Create Column Conditional On Another Column</title>
      <link>https://ericpena.github.io/postgresql/add_delete_change/create_column_condition_on_another_column.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/add_delete_change/create_column_condition_on_another_column.html</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Create An If Else Statement There are a number of ways to do if-else in SQL, my prefered way is the CASE statement.</description>
    </item>
    
    <item>
      <title>Create Column Index</title>
      <link>https://ericpena.github.io/postgresql/basics/create_column_index.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/basics/create_column_index.html</guid>
      <description>Create Table Of Elves -- Create table called elves CREATE TABLE elves ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  alive varchar(255) ) Insert Rows Into Elf Table INSERT INTO elves (name, age, race, alive) VALUES (&amp;#39;Dallar Woodfoot&amp;#39;, 25, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;), (&amp;#39;Cordin Garner&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;), (&amp;#39;Keat Knigh&amp;#39;, 24, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;), (&amp;#39;Colbat Nalor&amp;#39;, 124, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;) Create Index -- Index the names column in the elves table CREATE INDEX ON elves (name) </description>
    </item>
    
    <item>
      <title>Create Column Of Values</title>
      <link>https://ericpena.github.io/postgresql/add_delete_change/create_column_of_values.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/add_delete_change/create_column_of_values.html</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Create Column Of Values -- Get all rows and add a column called training where all values are &amp;#39;elite&amp;#39; SELECT *, &amp;#39;elite&amp;#39; as training FROM adventurers </description>
    </item>
    
    <item>
      <title>Create Primary Key</title>
      <link>https://ericpena.github.io/postgresql/add_delete_change/create_primary_key.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/add_delete_change/create_primary_key.html</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- integer variable  adventurer_id INT, -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255), PRIMARY KEY (adventurer_id) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (adventurer_id, name, age, race, weapon) VALUES (1, &amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (2, &amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Human&amp;#39;, &amp;#39;Bow&amp;#39;), (3, &amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (4, &amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;) View Table -- Retrieve all rows SELECT * FROM adventurers </description>
    </item>
    
    <item>
      <title>Create Subquery</title>
      <link>https://ericpena.github.io/postgresql/basics/create_subquery.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/basics/create_subquery.html</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Create Subquery -- Retrieve all the rows in adventurers SELECT * FROM adventurers -- Where the name of the adventurer is in WHERE name IN -- A subquery that will ( -- Select all the names in adventurers  SELECT name FROM adventurers -- Where race is elf  WHERE race = &amp;#39;Elf&amp;#39; ) </description>
    </item>
    
    <item>
      <title>Create Table</title>
      <link>https://ericpena.github.io/postgresql/tables/create_table.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/tables/create_table.html</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) </description>
    </item>
    
    <item>
      <title>Create Table With Default Values</title>
      <link>https://ericpena.github.io/postgresql/tables/create_table_with_default_values.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/tables/create_table_with_default_values.html</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable with default value of &amp;#39;no weapon&amp;#39;  weapon varchar(255) DEFAULT &amp;#39;no weapon&amp;#39; ) Insert Row -- Insert rows into the table adventurers -- Notice we don&amp;#39;t provide value for weapon column INSERT INTO adventurers (name, age, race) VALUES (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;) Retrieve Rows -- Retrieve all rows from table SELECT * FROM adventurers </description>
    </item>
    
    <item>
      <title>Create Table With UUIDs</title>
      <link>https://ericpena.github.io/postgresql/tables/create_table_with_uuids.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/tables/create_table_with_uuids.html</guid>
      <description>Install UUID Extension -- Install uuid extension CREATE EXTENSION IF NOT EXISTS &amp;#34;uuid-ossp&amp;#34; Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- uuid variable  adventurer_id uuid DEFAULT uuid_generate_v4(), -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255), -- Assign adventurer_id as primary key  PRIMARY KEY (adventurer_id) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Human&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;) View Table -- Retrieve all rows in table SELECT * FROM adventurers </description>
    </item>
    
    <item>
      <title>Create Temporary Table</title>
      <link>https://ericpena.github.io/postgresql/tables/create_temporary_table.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/tables/create_temporary_table.html</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Human&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;) Create Temporary Table From Original Table -- Create a temporary table called adventurers_temp that.</description>
    </item>
    
    <item>
      <title>Create View</title>
      <link>https://ericpena.github.io/postgresql/basics/create_view.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/basics/create_view.html</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Human&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;) Create View -- Create view called elves containing CREATE VIEW elves AS ( -- Select all rows from adventurers table  SELECT * FROM adventurers -- Where the race is elf  WHERE race = &amp;#39;Elf&amp;#39; ) Retrieve View -- Retrieve all rows from the view Elf SELECT * FROM elves </description>
    </item>
    
    <item>
      <title>Delete All Rows</title>
      <link>https://ericpena.github.io/postgresql/add_delete_change/delete_all_rows.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/add_delete_change/delete_all_rows.html</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Human&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;) View Table -- Retrieve all rows SELECT * FROM adventurers Delete All Rows -- Delete all rows DELETE FROM adventurers View Table -- Retrieve all rows SELECT * FROM adventurers </description>
    </item>
    
    <item>
      <title>Delete Duplicates</title>
      <link>https://ericpena.github.io/postgresql/add_delete_change/delete_duplicates.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/add_delete_change/delete_duplicates.html</guid>
      <description>Create Table Of Elves -- Create table called elves CREATE TABLE elves ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  alive varchar(255) ) Insert Rows Into Elf Table INSERT INTO elves (name, age, race, alive) VALUES (&amp;#39;Dallar Woodfoot&amp;#39;, 25, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;), (&amp;#39;Cordin Garner&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;), (&amp;#39;Keat Knigh&amp;#39;, 24, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;), (&amp;#39;Keat Knigh&amp;#39;, 24, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;), (&amp;#39;Keat Knigh&amp;#39;, 24, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;), (&amp;#39;Keat Knigh&amp;#39;, 24, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;), (&amp;#39;Colbat Nalor&amp;#39;, 124, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;) View Elves Table -- Retrieve all rows from the view Elf SELECT * FROM elves Drop Duplicates Note: Normally we would use a unique identify column (e.</description>
    </item>
    
    <item>
      <title>Delete Primary Key</title>
      <link>https://ericpena.github.io/postgresql/add_delete_change/delete_primary_key.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/add_delete_change/delete_primary_key.html</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- integer variable  adventurer_id INT, -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255), PRIMARY KEY (adventurer_id) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (adventurer_id, name, age, race, weapon) VALUES (1, &amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (2, &amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Human&amp;#39;, &amp;#39;Bow&amp;#39;), (3, &amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (4, &amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;) View Table -- Retrieve all rows SELECT * FROM adventurers Delete Primary Key -- Delete primary key of the adventurers&amp;#39; table ALTER TABLE adventurers DROP CONSTRAINT adventurers_pkey View Table -- Retrieve all rows SELECT * FROM adventurers </description>
    </item>
    
    <item>
      <title>Delete Rows</title>
      <link>https://ericpena.github.io/postgresql/add_delete_change/delete_rows.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/add_delete_change/delete_rows.html</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Human&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;) View Table -- Retrieve all rows SELECT * FROM adventurers Delete All Rows -- Delete rows DELETE FROM adventurers -- Where the race column is human WHERE race = &amp;#39;Human&amp;#39; View Table -- Retrieve all rows SELECT * FROM adventurers </description>
    </item>
    
    <item>
      <title>Delete Rows That Don&#39;t Exist In Another Table</title>
      <link>https://ericpena.github.io/postgresql/add_delete_change/delete_rows_that_dont_exist_in_another_table.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/add_delete_change/delete_rows_that_dont_exist_in_another_table.html</guid>
      <description>Create Table Of Elves -- Create table called elves CREATE TABLE elves ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  alive varchar(255) ) Create Table Of Alive -- Create table called alive CREATE TABLE alive ( -- string variable  name varchar(255) ) Insert Rows Into Elf Table INSERT INTO elves (name, age, race, alive) VALUES (&amp;#39;Dallar Woodfoot&amp;#39;, 25, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;), (&amp;#39;Cordin Garner&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;), (&amp;#39;Keat Knigh&amp;#39;, 24, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;), (&amp;#39;Colbat Nalor&amp;#39;, 124, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;) Insert Rows Into Alive Table INSERT INTO alive (name) VALUES (&amp;#39;Keat Knigh&amp;#39;), (&amp;#39;Colbat Nalor&amp;#39;) Delete Rows In Elf Table That Don&#39;t Exist In Alive Table -- Delete in elf table DELETE FROM elves -- Where the name in elves is not in the list of names in alive.</description>
    </item>
    
    <item>
      <title>Delete Table</title>
      <link>https://ericpena.github.io/postgresql/tables/delete_table.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/tables/delete_table.html</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Delete Table -- Delete table DROP TABLE adventurers </description>
    </item>
    
    <item>
      <title>Delete Table With Views</title>
      <link>https://ericpena.github.io/postgresql/tables/delete_table_with_views.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/tables/delete_table_with_views.html</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Human&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;) Create View -- Create view called elves containing CREATE VIEW elves AS ( -- Select all rows from adventurers table  SELECT * FROM adventurers -- Where the race is elf  WHERE race = &amp;#39;Elf&amp;#39; ) Delete Table -- Delete table and dependent views DROP TABLE adventurers CASCADE </description>
    </item>
    
    <item>
      <title>Delete View</title>
      <link>https://ericpena.github.io/postgresql/basics/delete_view.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/basics/delete_view.html</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Human&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;) Create View -- Create view called elves containing CREATE VIEW elves AS ( -- Select all rows from adventurers table  SELECT * FROM adventurers -- Where the race is elf  WHERE race = &amp;#39;Elf&amp;#39; ) Delete View -- Delete View DROP VIEW elves </description>
    </item>
    
    <item>
      <title>Duplicate Table</title>
      <link>https://ericpena.github.io/postgresql/tables/duplicate_table.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/tables/duplicate_table.html</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Row -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) View Table -- Retrieve rows from table SELECT * FROM warriors Create New Table From Query -- Create a new table called warriors that CREATE TABLE warriors AS -- includes all rows from adventurers SELECT * FROM adventurers View New Table -- Retrieve rows from table SELECT * FROM warriors </description>
    </item>
    
    <item>
      <title>Examine A Query</title>
      <link>https://ericpena.github.io/postgresql/basics/examine_a_query.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/basics/examine_a_query.html</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Row -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) View Table -- Retrieve rows from table SELECT * FROM adventurers Examine Query Note: the lower the cost the better.</description>
    </item>
    
    <item>
      <title>Export To CSV</title>
      <link>https://ericpena.github.io/postgresql/add_delete_change/export_to_csv.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/add_delete_change/export_to_csv.html</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Export To CSV Note: Relative file paths are not allowed.</description>
    </item>
    
    <item>
      <title>Extract Characters From Strings</title>
      <link>https://ericpena.github.io/postgresql/text/extract_characters_from_strings.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/text/extract_characters_from_strings.html</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Human&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;) Extract Characters From Strings -- Extract the first two characters from the race column values SELECT name, age, SUBSTR(race, 1, 2) FROM adventurers </description>
    </item>
    
    <item>
      <title>Find Values In Both Tables</title>
      <link>https://ericpena.github.io/postgresql/merging_and_joining/find_values_in_both_tables.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/merging_and_joining/find_values_in_both_tables.html</guid>
      <description>Create Table Of Elves -- Create table called elves CREATE TABLE elves ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Create Table Of Dwarves -- Create table called dwarves CREATE TABLE dwarves ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows Into Elf Table INSERT INTO elves (name, age, race, weapon) VALUES (&amp;#39;Dallar Woodfoot&amp;#39;, 25, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Cordin Garner&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Keat Knigh&amp;#39;, 24, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Colbat Nalor&amp;#39;, 124, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Insert Rows Into Dwarf Table INSERT INTO dwarves (name, age, race, weapon) VALUES (&amp;#39;Kalog&amp;#39;, 23, &amp;#39;Dwarf&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Dranar&amp;#39;, 145, &amp;#39;Dwarf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Bratar&amp;#39;, 12, &amp;#39;Dwarf&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Dragga&amp;#39;, 23, &amp;#39;Dwarf&amp;#39;, &amp;#39;Axe&amp;#39;) Find All Unique Values In Both Tables -- Retrieve all weapons from elves SELECT weapon FROM elves -- Find the unique values that overlap with.</description>
    </item>
    
    <item>
      <title>Find Values In One Table And Not Another</title>
      <link>https://ericpena.github.io/postgresql/merging_and_joining/find_values_in_one_table_and_not_another.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/merging_and_joining/find_values_in_one_table_and_not_another.html</guid>
      <description>Create Table Of Elves -- Create table called elves CREATE TABLE elves ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Create Table Of Dwarves -- Create table called dwarves CREATE TABLE dwarves ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows Into Elf Table INSERT INTO elves (name, age, race, weapon) VALUES (&amp;#39;Dallar Woodfoot&amp;#39;, 25, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Cordin Garner&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Keat Knigh&amp;#39;, 24, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Colbat Nalor&amp;#39;, 124, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Insert Rows Into Dwarf Table INSERT INTO dwarves (name, age, race, weapon) VALUES (&amp;#39;Kalog&amp;#39;, 23, &amp;#39;Dwarf&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Dranar&amp;#39;, 145, &amp;#39;Dwarf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Bratar&amp;#39;, 12, &amp;#39;Dwarf&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Dragga&amp;#39;, 23, &amp;#39;Dwarf&amp;#39;, &amp;#39;Axe&amp;#39;) Find Unique Values In Elves That Aren&#39;t In Dwarves -- Retrieve all weapons from elves SELECT weapon FROM elves -- Find the unique values that are not in.</description>
    </item>
    
    <item>
      <title>Group Rows</title>
      <link>https://ericpena.github.io/postgresql/basics/group_rows.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/basics/group_rows.html</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Human&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Group Rows -- Retrieve the race and average age from the table SELECT race, AVG(age) FROM adventurers -- Grouped by race GROUP BY race, weapon -- Where the weapon of the adventurer is a bow HAVING weapon = &amp;#39;Bow&amp;#39; </description>
    </item>
    
    <item>
      <title>Group Rows With Conditions</title>
      <link>https://ericpena.github.io/postgresql/basics/group_rows_with_conditions.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/basics/group_rows_with_conditions.html</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Human&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;) Group Rows -- Retrieve the race and average age from the table SELECT race, age, AVG(age) FROM adventurers -- Grouped by race GROUP BY race age -- That are older than 20 HAVING age &amp;gt; 20 </description>
    </item>
    
    <item>
      <title>If Else</title>
      <link>https://ericpena.github.io/postgresql/basics/if_else.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/basics/if_else.html</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Create An If Else Statement There are a number of ways to do if-else in SQL, my prefered way is the CASE statement.</description>
    </item>
    
    <item>
      <title>Import CSV</title>
      <link>https://ericpena.github.io/postgresql/add_delete_change/import_csv.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/add_delete_change/import_csv.html</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Export To CSV -- Export the adventurers table to that file path and -- name using the comma delimiter and with column headings COPY adventurers TO &amp;#39;/Users/chrisalbon/example_file.</description>
    </item>
    
    <item>
      <title>Inner Join Tables</title>
      <link>https://ericpena.github.io/postgresql/merging_and_joining/inner_join.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/merging_and_joining/inner_join.html</guid>
      <description>Create Table Of Adventurers -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255) ) Create Table Of Adventurer&#39;s Equipment -- Create table called equipment CREATE TABLE equipment ( -- string variable  name varchar(255), -- string variable  clothes varchar(255), -- string variable  weapon varchar(255) ) Insert Rows Into Adventurers Table INSERT INTO adventurers (name, age, race) VALUES (&amp;#39;Dallar Woodfoot&amp;#39;, 25, &amp;#39;Elf&amp;#39;), (&amp;#39;Cordin Garner&amp;#39;, 29, &amp;#39;Elf&amp;#39;), (&amp;#39;Keat Knigh&amp;#39;, 24, &amp;#39;Dwarf&amp;#39;), (&amp;#39;Colbat Nalor&amp;#39;, 124, &amp;#39;Dwarf&amp;#39;) Insert Rows Into Equipment Table INSERT INTO equipment (name, clothes, weapon) VALUES (&amp;#39;Dallar Woodfoot&amp;#39;, &amp;#39;Leather Armor&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Keat Knigh&amp;#39;, &amp;#39;Robe&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Cordin Garner&amp;#39;, &amp;#39;Tunic&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Colbat Nalor&amp;#39;,&amp;#39;Chainmail&amp;#39;, &amp;#39;Axe&amp;#39;) Inner Join Tables -- Return the name of people from the adventurers table, age, race, clothes, and weapon SELECT adventurers.</description>
    </item>
    
    <item>
      <title>Insert Rows</title>
      <link>https://ericpena.github.io/postgresql/add_delete_change/insert_rows.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/add_delete_change/insert_rows.html</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Row -- Insert row into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;) Retrieve Rows -- Retrieve all rows from table SELECT * FROM adventurers Insert Rows -- Insert rows into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Retrieve Rows -- Retrieve all rows from table SELECT * FROM adventurers </description>
    </item>
    
    <item>
      <title>Join Multiple Table</title>
      <link>https://ericpena.github.io/postgresql/merging_and_joining/join_multiple_tables.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/merging_and_joining/join_multiple_tables.html</guid>
      <description>Create Table Of Elves -- Create table called elves CREATE TABLE elves ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255) ) Create Table Of Weapons -- Create table called weapons CREATE TABLE weapons ( -- string variable  name varchar(255), -- string variable  weapon varchar(255), -- integer variable  weight int ) Create Table Of Armor -- Create table called armor CREATE TABLE armor ( -- string variable  name varchar(255), -- string variable  body varchar(255), -- string variable  helm varchar(255) ) Insert Rows Into Elf Table INSERT INTO elves (name, age, race) VALUES (&amp;#39;Dallar Woodfoot&amp;#39;, 25, &amp;#39;Elf&amp;#39;), (&amp;#39;Cordin Garner&amp;#39;, 29, &amp;#39;Elf&amp;#39;), (&amp;#39;Keat Knigh&amp;#39;, 24, &amp;#39;Elf&amp;#39;), (&amp;#39;Colbat Nalor&amp;#39;, 124, &amp;#39;Elf&amp;#39;) Insert Rows Into Weapon Table INSERT INTO weapons (name, weapon, weight) VALUES (&amp;#39;Dallar Woodfoot&amp;#39;,&amp;#39;Axe&amp;#39;, 2), (&amp;#39;Cordin Garner&amp;#39;, &amp;#39;Halberd&amp;#39;, 3), (&amp;#39;Keat Knigh&amp;#39;, &amp;#39;Dagger&amp;#39;, 4), (&amp;#39;Colbat Nalor&amp;#39;, &amp;#39;Dagger&amp;#39;, 5) Insert Rows Into Armor Table INSERT INTO armor (name, body, helm) VALUES (&amp;#39;Dallar Woodfoot&amp;#39;, &amp;#39;Leather&amp;#39;, &amp;#39;Leather&amp;#39;), (&amp;#39;Cordin Garner&amp;#39;, &amp;#39;Leather&amp;#39;, NULL), (&amp;#39;Keat Knigh&amp;#39;, &amp;#39;Plate&amp;#39;, &amp;#39;Plate&amp;#39;), (&amp;#39;Colbat Nalor&amp;#39;, &amp;#39;Plate&amp;#39;, &amp;#39;Plate&amp;#39;) Join All Tables -- All rows from table SELECT elves.</description>
    </item>
    
    <item>
      <title>Left Join Tables</title>
      <link>https://ericpena.github.io/postgresql/merging_and_joining/left_join.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/merging_and_joining/left_join.html</guid>
      <description>Create Table Of Adventurers -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255) ) Create Table Of Adventurer&#39;s Equipment -- Create table called equipment CREATE TABLE equipment ( -- string variable  name varchar(255), -- string variable  clothes varchar(255), -- string variable  weapon varchar(255) ) Insert Rows Into Adventurers Table INSERT INTO adventurers (name, age, race) VALUES (&amp;#39;Dallar Woodfoot&amp;#39;, 25, &amp;#39;Elf&amp;#39;), (&amp;#39;Cordin Garner&amp;#39;, 29, &amp;#39;Elf&amp;#39;), (&amp;#39;Keat Knigh&amp;#39;, 24, &amp;#39;Dwarf&amp;#39;), (&amp;#39;Colbat Nalor&amp;#39;, 124, &amp;#39;Dwarf&amp;#39;) Insert Rows Into Equipment Table INSERT INTO equipment (name, clothes, weapon) VALUES (&amp;#39;Dallar Woodfoot&amp;#39;, &amp;#39;Leather Armor&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Keat Knigh&amp;#39;, &amp;#39;Robe&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Tasar Keynelis&amp;#39;, &amp;#39;Tunic&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Sataleeti Iarroris&amp;#39;,&amp;#39;Chainmail&amp;#39;, &amp;#39;Axe&amp;#39;) Left Join Tables -- Return the name of people from the adventurers table, age, race, clothes, and weapon SELECT adventurers.</description>
    </item>
    
    <item>
      <title>List Columns In Table</title>
      <link>https://ericpena.github.io/postgresql/tables/list_columns_in_table.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/tables/list_columns_in_table.html</guid>
      <description>Create Table Of Elves -- Create table called elves CREATE TABLE elves ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  alive varchar(255) ) Insert Rows Into Elf Table INSERT INTO elves (name, age, race, alive) VALUES (&amp;#39;Dallar Woodfoot&amp;#39;, 25, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;), (&amp;#39;Cordin Garner&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;), (&amp;#39;Keat Knigh&amp;#39;, 24, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;), (&amp;#39;Colbat Nalor&amp;#39;, 124, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;) View Columns Rows In Elf Table -- Get name, data ype and column position SELECT column_name, data_type, ordinal_position -- From the column&amp;#39;s metadata FROM information_schema.</description>
    </item>
    
    <item>
      <title>List Index Columns</title>
      <link>https://ericpena.github.io/postgresql/basics/list_indexed_columns.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/basics/list_indexed_columns.html</guid>
      <description>Create Table Of Elves -- Create table called elves CREATE TABLE elves ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  alive varchar(255) ) Insert Rows Into Elf Table INSERT INTO elves (name, age, race, alive) VALUES (&amp;#39;Dallar Woodfoot&amp;#39;, 25, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;), (&amp;#39;Cordin Garner&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;), (&amp;#39;Keat Knigh&amp;#39;, 24, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;), (&amp;#39;Colbat Nalor&amp;#39;, 124, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;) Create Index -- Index the names column in the elves table CREATE INDEX ON elves (name) View All Indexes In Database SELECT indexes.</description>
    </item>
    
    <item>
      <title>List Tables In Database</title>
      <link>https://ericpena.github.io/postgresql/basics/list_tables_in_database.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/basics/list_tables_in_database.html</guid>
      <description>Create Table -- Create table called villains CREATE TABLE villains ( -- string variable  name varchar(255) ) Create Table -- Create table called heroes CREATE TABLE heroes ( -- string variable  name varchar(255) ) Create Table -- Create table called battles CREATE TABLE battles ( -- string variable  name varchar(255) ) List Tables In Database SELECT table_name FROM information_schema.tables WHERE table_schema = &amp;#39;public&amp;#39; AND table_type = &amp;#39;BASE TABLE&amp;#39; </description>
    </item>
    
    <item>
      <title>Lower And Upper Case</title>
      <link>https://ericpena.github.io/postgresql/text/lower_case_and_upper_case.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/text/lower_case_and_upper_case.html</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Human&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;) Upper Case String Values -- Upper case the values in the race column SELECT UPPER(race) FROM adventurers Lower Case String Values -- Lower case the values in the race column SELECT lower(race) FROM adventurers </description>
    </item>
    
    <item>
      <title>Mathematical Operations On Columns</title>
      <link>https://ericpena.github.io/postgresql/numeric/mathematical_operations_on_column.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/numeric/mathematical_operations_on_column.html</guid>
      <description>Create Table Of Adventurers -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;) Apply Addition To Column -- Apply operation UPDATE adventurers SET age = age + 10 View Table -- Retrieve data SELECT * FROM adventurers Apply Substraction To Column -- Apply operation UPDATE adventurers SET age = age - 10 View Table -- Retrieve data SELECT * FROM adventurers Apply Multiplication To Column -- Apply operation UPDATE adventurers SET age = age * 10 View Table -- Retrieve data SELECT * FROM adventurers Apply Division To Column -- Apply operation UPDATE adventurers SET age = age / 10 View Table -- Retrieve data SELECT * FROM adventurers Apply Modulo To Column -- Apply operation UPDATE adventurers SET age = age % 10 View Table -- Retrieve data SELECT * FROM adventurers </description>
    </item>
    
    <item>
      <title>Outer Join Tables</title>
      <link>https://ericpena.github.io/postgresql/merging_and_joining/outer_join.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/merging_and_joining/outer_join.html</guid>
      <description>Create Table Of Adventurers -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255) ) Create Table Of Adventurer&#39;s Equipment -- Create table called equipment CREATE TABLE equipment ( -- string variable  name varchar(255), -- string variable  clothes varchar(255), -- string variable  weapon varchar(255) ) Insert Rows Into Adventurers Table INSERT INTO adventurers (name, age, race) VALUES (&amp;#39;Dallar Woodfoot&amp;#39;, 25, &amp;#39;Elf&amp;#39;), (&amp;#39;Cordin Garner&amp;#39;, 29, &amp;#39;Elf&amp;#39;), (&amp;#39;Keat Knigh&amp;#39;, 24, &amp;#39;Dwarf&amp;#39;), (&amp;#39;Colbat Nalor&amp;#39;, 124, &amp;#39;Dwarf&amp;#39;) Insert Rows Into Equipment Table INSERT INTO equipment (name, clothes, weapon) VALUES (&amp;#39;Dallar Woodfoot&amp;#39;, &amp;#39;Leather Armor&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Keat Knigh&amp;#39;, &amp;#39;Robe&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Tasar Keynelis&amp;#39;, &amp;#39;Tunic&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Sataleeti Iarroris&amp;#39;,&amp;#39;Chainmail&amp;#39;, &amp;#39;Axe&amp;#39;) Outer Join Tables -- Return the name of people from the adventurers table, age, race, clothes, and weapon SELECT adventurers.</description>
    </item>
    
    <item>
      <title>Partial String Match</title>
      <link>https://ericpena.github.io/postgresql/text/partial_string_match.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/text/partial_string_match.html</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Retrieve Rows %o% indicates we are matching any string that contains an o.</description>
    </item>
    
    <item>
      <title>Rename Columns In Views</title>
      <link>https://ericpena.github.io/postgresql/basics/rename_columns_in_views.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/basics/rename_columns_in_views.html</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Human&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;) Create View -- Create view called elves containing with the column&amp;#39;s renamed: -- elven_name, elven_age, race, and elven_weapon CREATE VIEW elves (elven_name, elven_age, race, elven_weapon) AS ( -- Select all rows from adventurers table  SELECT * FROM adventurers -- Where the race is elf  WHERE race = &amp;#39;Elf&amp;#39; ) Retrieve View -- Retrieve all rows from the view Elf SELECT * FROM elves </description>
    </item>
    
    <item>
      <title>Replace Missing Values</title>
      <link>https://ericpena.github.io/postgresql/basics/replace_missing_values.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/basics/replace_missing_values.html</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows With Missing Values -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, NULL), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, NULL) Retrieve Missing Values In SQL, missing values are denoted as NULL.</description>
    </item>
    
    <item>
      <title>Retrieve Only A Few Rows</title>
      <link>https://ericpena.github.io/postgresql/basics/retrieve_only_a_few_rows.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/basics/retrieve_only_a_few_rows.html</guid>
      <description>Note: This code works in PostgreSQL databases, but might not work in other SQL database systems (e.g. MySQL).
Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Retrieve Only Two Rows -- Retrieve rows from table SELECT * FROM adventurers -- Limited to two rows  LIMIT 2 </description>
    </item>
    
    <item>
      <title>Retrieve Random Subset Of Rows</title>
      <link>https://ericpena.github.io/postgresql/basics/retrieve_random_subset_of_rows.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/basics/retrieve_random_subset_of_rows.html</guid>
      <description>Note: This code works in PostgreSQL databases, but might not work in other SQL database systems (e.g. MySQL).
Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Retrieve Only Two Rows -- Retrieve rows from table SELECT * FROM adventurers -- Shuffle randomly  ORDER BY RANDOM() -- Retrieve two rows  LIMIT 2 </description>
    </item>
    
    <item>
      <title>Retrieve Row</title>
      <link>https://ericpena.github.io/postgresql/basics/retrieve_rows.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/basics/retrieve_rows.html</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Retrieve Rows -- Retrieve all rows from table SELECT * FROM adventurers </description>
    </item>
    
    <item>
      <title>Retrieve Rows Based On Condition</title>
      <link>https://ericpena.github.io/postgresql/basics/retrieve_rows_based_on_condition.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/basics/retrieve_rows_based_on_condition.html</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Retrieve Rows Of Elves -- Retrieve all rows from table SELECT * FROM adventurers -- Where the race is Elf  WHERE race = &amp;#39;Elf&amp;#39; Retrieve Rows Of Non-Elves -- Retrieve all rows from table SELECT * FROM adventurers -- Where the race is not Elf  WHERE race &amp;lt;&amp;gt; &amp;#39;Elf&amp;#39; Retrieve Rows Where Age Is Over 30 -- Retrieve all rows from table SELECT * FROM adventurers -- Where the age is over 30  WHERE age &amp;gt; 30 Retrieve Rows Where Age Is Greater Than Or Equal To 20 -- Retrieve all rows from table SELECT * FROM adventurers -- Where the age is greater than or equal to 20  WHERE age &amp;gt;= 20 </description>
    </item>
    
    <item>
      <title>Retrieve Rows Based On Multiple Condition</title>
      <link>https://ericpena.github.io/postgresql/basics/retrieve_rows_based_on_multiple_conditions.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/basics/retrieve_rows_based_on_multiple_conditions.html</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Retrieve Rows Of Elven Swords Wielders -- Retrieve all rows from table SELECT * FROM adventurers -- Where the race is Elf  WHERE race = &amp;#39;Elf&amp;#39; -- weapon is sword  AND weapon = &amp;#39;Sword&amp;#39; </description>
    </item>
    
    <item>
      <title>Retrieve Subset Of Columns</title>
      <link>https://ericpena.github.io/postgresql/basics/retrieve_subset_columns.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/basics/retrieve_subset_columns.html</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Retrieve Two Columns -- Retrieve name and age columns SELECT name, age FROM adventurers </description>
    </item>
    
    <item>
      <title>Retrieving Missing Values</title>
      <link>https://ericpena.github.io/postgresql/basics/retrieving_missing_values.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/basics/retrieving_missing_values.html</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows With Missing Values -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, NULL), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, NULL) Retrieve Missing Values In SQL, missing values are denoted as NULL.</description>
    </item>
    
    <item>
      <title>Right Join Tables</title>
      <link>https://ericpena.github.io/postgresql/merging_and_joining/right_join.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/merging_and_joining/right_join.html</guid>
      <description>Create Table Of Adventurers -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255) ) Create Table Of Adventurer&#39;s Equipment -- Create table called equipment CREATE TABLE equipment ( -- string variable  name varchar(255), -- string variable  clothes varchar(255), -- string variable  weapon varchar(255) ) Insert Rows Into Adventurers Table INSERT INTO adventurers (name, age, race) VALUES (&amp;#39;Dallar Woodfoot&amp;#39;, 25, &amp;#39;Elf&amp;#39;), (&amp;#39;Cordin Garner&amp;#39;, 29, &amp;#39;Elf&amp;#39;), (&amp;#39;Keat Knigh&amp;#39;, 24, &amp;#39;Dwarf&amp;#39;), (&amp;#39;Colbat Nalor&amp;#39;, 124, &amp;#39;Dwarf&amp;#39;) Insert Rows Into Equipment Table INSERT INTO equipment (name, clothes, weapon) VALUES (&amp;#39;Dallar Woodfoot&amp;#39;, &amp;#39;Leather Armor&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Keat Knigh&amp;#39;, &amp;#39;Robe&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Tasar Keynelis&amp;#39;, &amp;#39;Tunic&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Sataleeti Iarroris&amp;#39;,&amp;#39;Chainmail&amp;#39;, &amp;#39;Axe&amp;#39;) Right Join Tables -- Return the name of people from the adventurers table, age, race, clothes, and weapon SELECT adventurers.</description>
    </item>
    
    <item>
      <title>Save Queries As Variables</title>
      <link>https://ericpena.github.io/postgresql/basics/save_queries_as_variables.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/basics/save_queries_as_variables.html</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Create Two Subqueries, Save As Variables, Use In Another Query Note that there are better ways to run this particular query.</description>
    </item>
    
    <item>
      <title>Select Highest Value In Each Group</title>
      <link>https://ericpena.github.io/postgresql/basics/select_highest_value_in_each_group.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/basics/select_highest_value_in_each_group.html</guid>
      <description>Create Table Of Adventurers -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Human&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;) Select The Oldest Adventurer In Each Race -- Get the name, race, age of the first row in each group, -- when grouped by race SELECT DISTINCT ON (race) name, race, age FROM adventurers -- Order by race, then age, in descending order -- (so the oldest person is the top of each group) ORDER BY race, age DESC </description>
    </item>
    
    <item>
      <title>Select Values Between Two Values</title>
      <link>https://ericpena.github.io/postgresql/basics/select_values_between_two_values.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/basics/select_values_between_two_values.html</guid>
      <description>Create Table Of Adventurers -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Human&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;) Get Values Between Two Values, Method 1 -- Get all rows from adventurers SELECT * FROM adventurers -- Where age is between 20 and 30 WHERE age BETWEEN 20 AND 30 Get Values Between Two Values, Method 2 -- Get all rows from adventurers SELECT * FROM adventurers -- Where age is between 20 and 30 WHERE age &amp;gt;= 20 AND age &amp;lt;= 30 </description>
    </item>
    
    <item>
      <title>Self Join Table</title>
      <link>https://ericpena.github.io/postgresql/merging_and_joining/self_join.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/merging_and_joining/self_join.html</guid>
      <description>Create Table Of Adventurers -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  child_of varchar(255) ) Insert Rows Into Adventurers Table INSERT INTO adventurers (name, age, child_of) VALUES (&amp;#39;Dallar Woodfoot&amp;#39;, 25, NULL), (&amp;#39;Cordin Garner&amp;#39;, 29, NULL), (&amp;#39;Keat Garner&amp;#39;, 24, &amp;#39;Cordin Garner&amp;#39;), (&amp;#39;Colbat Nalor&amp;#39;, 124, NULL) Inner Join Tables -- Select name of copy1 and name of copy2 (renamed &amp;#34;parent&amp;#34;) SELECT copy1.</description>
    </item>
    
    <item>
      <title>Show Column Information</title>
      <link>https://ericpena.github.io/postgresql/tables/show_column_information.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/tables/show_column_information.html</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Show Column Information -- Select column name, data type, and max character limit SELECT column_name, data_type, character_maximum_length -- From the database&amp;#39;s schema FROM INFORMATION_SCHEMA.</description>
    </item>
    
    <item>
      <title>Sort Rows</title>
      <link>https://ericpena.github.io/postgresql/basics/sort_rows.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/basics/sort_rows.html</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Sort Rows By One Column -- Retrieve rows SELECT * FROM adventurers -- Order rows by age in ascending order ORDER BY age ASC Sort Rows By Two Columns Note that ascending order (ASC) in strings means alphabetical.</description>
    </item>
    
    <item>
      <title>Sort Rows In Groups</title>
      <link>https://ericpena.github.io/postgresql/basics/sort_rows_in_groups.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/basics/sort_rows_in_groups.html</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Sort Rows By One Column -- Retrieve rows SELECT * FROM adventurers -- Order rows by age in ascending order ORDER BY age ASC Sort Rows By Two Columns -- Retrieve rows SELECT * FROM adventurers -- Order rows, when race is elf, sort by name ORDER BY CASE WHEN race = &amp;#39;Elf&amp;#39; THEN name -- Otherwise sort by weapon  ELSE weapon END </description>
    </item>
    
    <item>
      <title>Stack Tables</title>
      <link>https://ericpena.github.io/postgresql/merging_and_joining/stack_tables.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/merging_and_joining/stack_tables.html</guid>
      <description>Create Table Of Elves -- Create table called elves CREATE TABLE elves ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Create Table Of Dwarves -- Create table called dwarves CREATE TABLE dwarves ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows Into Elf Table INSERT INTO elves (name, age, race, weapon) VALUES (&amp;#39;Dallar Woodfoot&amp;#39;, 25, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Cordin Garner&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Keat Knigh&amp;#39;, 24, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Colbat Nalor&amp;#39;, 124, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Insert Rows Into Dwarf Table INSERT INTO dwarves (name, age, race, weapon) VALUES (&amp;#39;Kalog&amp;#39;, 23, &amp;#39;Dwarf&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Dranar&amp;#39;, 145, &amp;#39;Dwarf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Bratar&amp;#39;, 12, &amp;#39;Dwarf&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Dragga&amp;#39;, 23, &amp;#39;Dwarf&amp;#39;, &amp;#39;Axe&amp;#39;) Stack Tables On Top Of Eachother -- All rows from elf table SELECT * FROM elves -- Stack on top of.</description>
    </item>
    
    <item>
      <title>Test If Rows Exist In Subquery</title>
      <link>https://ericpena.github.io/postgresql/basics/test_if_rows_exist_in_subquery.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/basics/test_if_rows_exist_in_subquery.html</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Test If Rows Exist In Subquery -- Retrieve all the rows in adventurers SELECT * FROM adventurers -- Where rows exist in WHERE EXISTS -- A subquery that will ( -- Select all the names in adventurers  SELECT name FROM adventurers -- Where race is elf  WHERE race = &amp;#39;Elf&amp;#39; ) Test If Rows Do Not Exist In Subquery -- Retrieve all the rows in adventurers SELECT * FROM adventurers -- Where the name of the adventurer is in WHERE NOT EXISTS -- A subquery that will ( -- Select all the names in adventurers  SELECT name FROM adventurers -- Where race is dwarf  WHERE race = &amp;#39;Dwarf&amp;#39; ) </description>
    </item>
    
    <item>
      <title>Update Rows Based On Another Table</title>
      <link>https://ericpena.github.io/postgresql/add_delete_change/update_rows_based_on_another_table.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/add_delete_change/update_rows_based_on_another_table.html</guid>
      <description>Create Table Of Elves -- Create table called elves CREATE TABLE elves ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  alive varchar(255) ) Create Table Of Deaths -- Create table called deaths CREATE TABLE deaths ( -- string variable  name varchar(255) ) Insert Rows Into Elf Table INSERT INTO elves (name, age, race, alive) VALUES (&amp;#39;Dallar Woodfoot&amp;#39;, 25, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;), (&amp;#39;Cordin Garner&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;), (&amp;#39;Keat Knigh&amp;#39;, 24, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;), (&amp;#39;Colbat Nalor&amp;#39;, 124, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;) Insert Rows Into Deaths Table INSERT INTO deaths (name) VALUES (&amp;#39;Keat Knigh&amp;#39;), (&amp;#39;Colbat Nalor&amp;#39;) View Elves Table -- Retrieve all rows from the view Elf SELECT * FROM elves Update Rows Based On Another Table -- Change the value in elves UPDATE elves -- to set alive to &amp;#34;No&amp;#34; SET alive = &amp;#39;No&amp;#39; -- Where the name of the elf is in the list of deaths WHERE elves.</description>
    </item>
    
    <item>
      <title>Use Column Aliases With Where Clause</title>
      <link>https://ericpena.github.io/postgresql/basics/use_column_aliases_with_where_clause.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/basics/use_column_aliases_with_where_clause.html</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Retrieve Two Columns The trick is to wrap the column aliasing in paratheses.</description>
    </item>
    
    <item>
      <title>Value Matches Element Of A List</title>
      <link>https://ericpena.github.io/postgresql/basics/retrieve_rows_where_value_matches_element_of_list.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/basics/retrieve_rows_where_value_matches_element_of_list.html</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Retrieve Rows -- Retrieve all rows from table SELECT * FROM adventurers -- Where the value of weapon is in a list of weapons WHERE weapon IN (&amp;#39;Polearm&amp;#39;, &amp;#39;Whip&amp;#39;, &amp;#39;Staff&amp;#39;, &amp;#39;Dagger&amp;#39;, &amp;#39;Bow&amp;#39;) </description>
    </item>
    
    <item>
      <title>View Size Of Table</title>
      <link>https://ericpena.github.io/postgresql/tables/view_size_of_table.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/tables/view_size_of_table.html</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Row -- Insert row into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) View Size Of Table Note: This is method only with in PostgreSQL databases</description>
    </item>
    
    <item>
      <title>View Unique Values</title>
      <link>https://ericpena.github.io/postgresql/basics/view_unique_values.html</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ericpena.github.io/postgresql/basics/view_unique_values.html</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) View Unique Values In Race -- View unique values in the race column SELECT DISTINCT race FROM adventurers </description>
    </item>
    
  </channel>
</rss>