<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>machine_learning - Eric Pe√±a</title>
    <link>https://ericpena.github.io/machine_learning/preprocessing_images/index.xml</link>
    <description></description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 20 Dec 2017 11:53:49 -0700</lastBuildDate>
    
        <atom:link href="https://ericpena.github.io/machine_learning/preprocessing_images/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Binarize Images</title>
      <link>https://ericpena.github.io/machine_learning/preprocessing_images/binarize_image.html</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://ericpena.github.io/machine_learning/preprocessing_images/binarize_image.html</guid>
      <description>Preliminaries # Load image import cv2 import numpy as np from matplotlib import pyplot as plt Load Image As Greyscale # Load image as greyscale image_grey = cv2.imread(&amp;#39;images/plane_256x256.jpg&amp;#39;, cv2.IMREAD_GRAYSCALE) Apply Adaptive Thresholding # Apply adaptive thresholding max_output_value = 255 neighorhood_size = 99 subtract_from_mean = 10 image_binarized = cv2.adaptiveThreshold(image_grey, max_output_value, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, neighorhood_size, subtract_from_mean) View Image # Show image plt.imshow(image_binarized, cmap=&amp;#39;gray&amp;#39;), plt.axis(&amp;#34;off&amp;#34;) plt.show() </description>
    </item>
    
    <item>
      <title>Blurring Images</title>
      <link>https://ericpena.github.io/machine_learning/preprocessing_images/blurring_images.html</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://ericpena.github.io/machine_learning/preprocessing_images/blurring_images.html</guid>
      <description>Preliminaries # Load image import cv2 import numpy as np from matplotlib import pyplot as plt Load Image As Greyscale # Load image as grayscale image = cv2.imread(&amp;#39;images/plane_256x256.jpg&amp;#39;, cv2.IMREAD_GRAYSCALE) Blur Image # Blur image image_blurry = cv2.blur(image, (5,5)) View Image # Show image plt.imshow(image_blurry, cmap=&amp;#39;gray&amp;#39;), plt.xticks([]), plt.yticks([]) plt.show() </description>
    </item>
    
    <item>
      <title>Cropping Images</title>
      <link>https://ericpena.github.io/machine_learning/preprocessing_images/cropping_images.html</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://ericpena.github.io/machine_learning/preprocessing_images/cropping_images.html</guid>
      <description>Preliminaries # Load image import cv2 import numpy as np from matplotlib import pyplot as plt Load Image As Greyscale # Load image as grayscale image = cv2.imread(&amp;#39;images/plane_256x256.jpg&amp;#39;, cv2.IMREAD_GRAYSCALE) Crop Image # Select first half of the columns and all rows image_cropped = image[:,:126] View Image # View image plt.imshow(image_cropped, cmap=&amp;#39;gray&amp;#39;), plt.axis(&amp;#34;off&amp;#34;) plt.show() </description>
    </item>
    
    <item>
      <title>Detect Edges</title>
      <link>https://ericpena.github.io/machine_learning/preprocessing_images/detect_edges.html</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://ericpena.github.io/machine_learning/preprocessing_images/detect_edges.html</guid>
      <description>Preliminaries # Load image import cv2 import numpy as np from matplotlib import pyplot as plt Load image # Load image as greyscale image_gray = cv2.imread(&amp;#39;images/plane_256x256.jpg&amp;#39;, cv2.IMREAD_GRAYSCALE) Detect Edges # Calculate median intensity median_intensity = np.median(image_gray) # Set thresholds to be one standard deviation above and below median intensity lower_threshold = int(max(0, (1.0 - 0.33) * median_intensity)) upper_threshold = int(min(255, (1.0 + 0.33) * median_intensity)) # Apply canny edge detector image_canny = cv2.</description>
    </item>
    
    <item>
      <title>Enhance Contrast Of Color Image</title>
      <link>https://ericpena.github.io/machine_learning/preprocessing_images/enhance_contrast_of_color_image.html</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://ericpena.github.io/machine_learning/preprocessing_images/enhance_contrast_of_color_image.html</guid>
      <description>Preliminaries # Load image import cv2 import numpy as np from matplotlib import pyplot as plt Load Image # Load image image_bgr = cv2.imread(&amp;#39;images/plane.jpg&amp;#39;) Convert Image To YUV Color Format # Convert to YUV image_yuv = cv2.cvtColor(image_bgr, cv2.COLOR_BGR2YUV) Enhance Image # Apply histogram equalization image_yuv[:, :, 0] = cv2.equalizeHist(image_yuv[:, :, 0]) Convert To RGB # Convert to RGB image_rgb = cv2.cvtColor(image_yuv, cv2.COLOR_YUV2RGB) View Image # Show image plt.imshow(image_rgb), plt.axis(&amp;#34;off&amp;#34;) plt.show() </description>
    </item>
    
    <item>
      <title>Enhance Contrast Of Greyscale Image</title>
      <link>https://ericpena.github.io/machine_learning/preprocessing_images/enhance_contrast_of_greyscale_image.html</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://ericpena.github.io/machine_learning/preprocessing_images/enhance_contrast_of_greyscale_image.html</guid>
      <description>Preliminaries # Load image import cv2 import numpy as np from matplotlib import pyplot as plt Load Image As Greyscale # Load image as grayscale image = cv2.imread(&amp;#39;images/plane_256x256.jpg&amp;#39;, cv2.IMREAD_GRAYSCALE) Enhance Image # Enhance image image_enhanced = cv2.equalizeHist(image) View Image # Show image plt.imshow(image_enhanced, cmap=&amp;#39;gray&amp;#39;), plt.axis(&amp;#34;off&amp;#34;) plt.show() </description>
    </item>
    
    <item>
      <title>Harris Corner Detector</title>
      <link>https://ericpena.github.io/machine_learning/preprocessing_images/harris_corner_detector.html</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://ericpena.github.io/machine_learning/preprocessing_images/harris_corner_detector.html</guid>
      <description>The Harris Corner Detector is a commonly used method of detecting the intersection of two edges. It looks for windows (also called neighborhoods or patches) where small movements of the window (imagine shaking the window) creates big changes in the contents of the pixels inside the window.
Preliminaries # Load image import cv2 import numpy as np from matplotlib import pyplot as plt Load image # Load image as grayscale image_bgr = cv2.</description>
    </item>
    
    <item>
      <title>Installing OpenCV</title>
      <link>https://ericpena.github.io/machine_learning/preprocessing_images/installing_opencv.html</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://ericpena.github.io/machine_learning/preprocessing_images/installing_opencv.html</guid>
      <description>While there are a number of good libraries out there, OpenCV is the most popular and documented library for handling images. One of the biggest hurdles to using OpenCV is installing it. However, fortunately we can use Anaconda&amp;rsquo;s package manager tool conda to install OpenCV in a single line of code in our terminal:
conda install --channel https://conda.anaconda.org/menpo opencv3
Afterwards, we can check the installation by opening a notebook, importing OpenCV, and checking the version number (3.</description>
    </item>
    
    <item>
      <title>Isolate Colors</title>
      <link>https://ericpena.github.io/machine_learning/preprocessing_images/isolate_colors.html</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://ericpena.github.io/machine_learning/preprocessing_images/isolate_colors.html</guid>
      <description>Preliminaries # Load image import cv2 import numpy as np from matplotlib import pyplot as plt Load Image # Load image image_bgr = cv2.imread(&amp;#39;images/plane_256x256.jpg&amp;#39;) Convert To HSV Color Format # Convert BGR to HSV image_hsv = cv2.cvtColor(image_bgr, cv2.COLOR_BGR2HSV) Create Mask # Define range of blue values in HSV lower_blue = np.array([50,100,50]) upper_blue = np.array([130,255,255]) # Create mask mask = cv2.inRange(image_hsv, lower_blue, upper_blue) Apply Mask # Mask image image_bgr_masked = cv2.bitwise_and(image_bgr, image_bgr, mask=mask) Convert To RGB Format # Convert BGR to RGB image_rgb = cv2.</description>
    </item>
    
    <item>
      <title>Load Images</title>
      <link>https://ericpena.github.io/machine_learning/preprocessing_images/load_images.html</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://ericpena.github.io/machine_learning/preprocessing_images/load_images.html</guid>
      <description>Preliminaries # Load library import cv2 import numpy as np from matplotlib import pyplot as plt Load Image As Greyscale # Load image as grayscale image = cv2.imread(&amp;#39;images/plane.jpg&amp;#39;, cv2.IMREAD_GRAYSCALE) # Show image plt.imshow(image, cmap=&amp;#39;gray&amp;#39;), plt.axis(&amp;#34;off&amp;#34;) plt.show() Load Image As RGB # Load image in color image_bgr = cv2.imread(&amp;#39;images/plane.jpg&amp;#39;, cv2.IMREAD_COLOR) # Convert to RGB image_rgb = cv2.cvtColor(image_bgr, cv2.COLOR_BGR2RGB) # Show image plt.imshow(image_rgb), plt.axis(&amp;#34;off&amp;#34;) plt.show() View Image Data # Show image data image array([[140, 136, 146, .</description>
    </item>
    
    <item>
      <title>Remove Backgrounds</title>
      <link>https://ericpena.github.io/machine_learning/preprocessing_images/remove_backgrounds.html</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://ericpena.github.io/machine_learning/preprocessing_images/remove_backgrounds.html</guid>
      <description>Preliminaries # Load image import cv2 import numpy as np from matplotlib import pyplot as plt Load Image # Load image image_bgr = cv2.imread(&amp;#39;images/plane_256x256.jpg&amp;#39;) Convert To RGB # Convert to RGB image_rgb = cv2.cvtColor(image_bgr, cv2.COLOR_BGR2RGB) Draw Rectangle Around Foreground # Rectange values: start x, start y, width, height rectangle = (0, 56, 256, 150) Apply GrabCut # Create initial mask mask = np.zeros(image_rgb.shape[:2], np.uint8) # Create temporary arrays used by grabCut bgdModel = np.</description>
    </item>
    
    <item>
      <title>Save Images</title>
      <link>https://ericpena.github.io/machine_learning/preprocessing_images/save_images.html</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://ericpena.github.io/machine_learning/preprocessing_images/save_images.html</guid>
      <description>Preliminaries # Load library import cv2 import numpy as np from matplotlib import pyplot as plt Load Image As Greyscale # Load image as grayscale image = cv2.imread(&amp;#39;images/plane.jpg&amp;#39;, cv2.IMREAD_GRAYSCALE) # Show image plt.imshow(image, cmap=&amp;#39;gray&amp;#39;), plt.axis(&amp;#34;off&amp;#34;) plt.show() Save Image # Save image cv2.imwrite(&amp;#39;images/plane_new.jpg&amp;#39;, image) True  </description>
    </item>
    
    <item>
      <title>Sharpen Images</title>
      <link>https://ericpena.github.io/machine_learning/preprocessing_images/sharpen_images.html</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://ericpena.github.io/machine_learning/preprocessing_images/sharpen_images.html</guid>
      <description>Preliminaries # Load image import cv2 import numpy as np from matplotlib import pyplot as plt Load Image As Greyscale # Load image as grayscale image = cv2.imread(&amp;#39;images/plane_256x256.jpg&amp;#39;, cv2.IMREAD_GRAYSCALE) Sharpen Image # Create kernel kernel = np.array([[0, -1, 0], [-1, 5,-1], [0, -1, 0]]) # Sharpen image image_sharp = cv2.filter2D(image, -1, kernel) View Image # Show image plt.imshow(image_sharp, cmap=&amp;#39;gray&amp;#39;), plt.axis(&amp;#34;off&amp;#34;) plt.show() </description>
    </item>
    
    <item>
      <title>Shi-Tomasi Corner Detector</title>
      <link>https://ericpena.github.io/machine_learning/preprocessing_images/ski-tomasi_corner_detector.html</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://ericpena.github.io/machine_learning/preprocessing_images/ski-tomasi_corner_detector.html</guid>
      <description>Preliminaries # Load image import cv2 import numpy as np from matplotlib import pyplot as plt Load image # Load images image_bgr = cv2.imread(&amp;#39;images/plane_256x256.jpg&amp;#39;) image_gray = cv2.cvtColor(image_bgr, cv2.COLOR_BGR2GRAY) Define Corner Parameters # Number of corners to detect corners_to_detect = 10 minimum_quality_score = 0.05 minimum_distance = 25 Detect Corners # Detect corners corners = cv2.goodFeaturesToTrack(image_gray, corners_to_detect, minimum_quality_score, minimum_distance) corners = np.float32(corners) Mark Corners # Draw white circle at each corner for corner in corners: x, y = corner[0] cv2.</description>
    </item>
    
    <item>
      <title>Using Mean Color As A Feature</title>
      <link>https://ericpena.github.io/machine_learning/preprocessing_images/using_mean_color_as_a_feature.html</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://ericpena.github.io/machine_learning/preprocessing_images/using_mean_color_as_a_feature.html</guid>
      <description>Preliminaries # Load image import cv2 import numpy as np from matplotlib import pyplot as plt Load image # Load image as BGR image_bgr = cv2.imread(&amp;#39;images/plane_256x256.jpg&amp;#39;, cv2.IMREAD_COLOR) Calculate Mean Color Of Each Color Channel # Calculate the mean of each channel channels = cv2.mean(image_bgr) # Swap blue and red values (making it RGB, not BGR) observation = np.array([(channels[2], channels[1], channels[0])]) Show Values # Show mean channel values observation array([[ 90.53204346, 133.</description>
    </item>
    
  </channel>
</rss>