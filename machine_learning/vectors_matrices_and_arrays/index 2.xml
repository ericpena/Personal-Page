<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>machine_learning - Eric Pe√±a</title>
    <link>https://ericpena.github.io/machine_learning/vectors_matrices_and_arrays/index.xml</link>
    <description></description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 20 Dec 2017 11:53:49 -0700</lastBuildDate>
    
        <atom:link href="https://ericpena.github.io/machine_learning/vectors_matrices_and_arrays/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Adding And Subtracting Matrices</title>
      <link>https://ericpena.github.io/machine_learning/vectors_matrices_and_arrays/adding_and_subtracting_matrices.html</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://ericpena.github.io/machine_learning/vectors_matrices_and_arrays/adding_and_subtracting_matrices.html</guid>
      <description>Preliminaries # Load library import numpy as np Create Matrices # Create matrix matrix_a = np.array([[1, 1, 1], [1, 1, 1], [1, 1, 2]]) # Create matrix matrix_b = np.array([[1, 3, 1], [1, 3, 1], [1, 3, 8]]) Add Matrices # Add two matrices np.add(matrix_a, matrix_b) array([[ 2, 4, 2], [ 2, 4, 2], [ 2, 4, 10]])  Subtract Matrices # Subtract two matrices np.subtract(matrix_a, matrix_b) array([[ 0, -2, 0], [ 0, -2, 0], [ 0, -2, -6]])  </description>
    </item>
    
    <item>
      <title>Apply Operations To Elements</title>
      <link>https://ericpena.github.io/machine_learning/vectors_matrices_and_arrays/apply_operations_to_elements.html</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://ericpena.github.io/machine_learning/vectors_matrices_and_arrays/apply_operations_to_elements.html</guid>
      <description>Preliminaries # Load library import numpy as np Create Matrix # Create matrix matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) Create Vectorized Function # Create a function that adds 100 to something add_100 = lambda i: i + 100 # Create a vectorized function vectorized_add_100 = np.vectorize(add_100) Apply Function To Elements # Apply function to all elements in matrix vectorized_add_100(matrix) array([[101, 102, 103], [104, 105, 106], [107, 108, 109]])  </description>
    </item>
    
    <item>
      <title>Calculate Dot Product Of Two Vectors</title>
      <link>https://ericpena.github.io/machine_learning/vectors_matrices_and_arrays/calculate_dot_product_of_two_vectors.html</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://ericpena.github.io/machine_learning/vectors_matrices_and_arrays/calculate_dot_product_of_two_vectors.html</guid>
      <description>Preliminaries # Load library import numpy as np Create Two Vectors # Create two vectors vector_a = np.array([1,2,3]) vector_b = np.array([4,5,6]) Calculate Dot Product (Method 1) # Calculate dot product np.dot(vector_a, vector_b) 32  Calculate Dot Product (Method 2) # Calculate dot product vector_a @ vector_b 32  </description>
    </item>
    
    <item>
      <title>Calculate The Average, Variance, And Standard Deviation</title>
      <link>https://ericpena.github.io/machine_learning/vectors_matrices_and_arrays/calculate_average_variance_and_standard_deviation.html</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://ericpena.github.io/machine_learning/vectors_matrices_and_arrays/calculate_average_variance_and_standard_deviation.html</guid>
      <description>Preliminaries # Load library import numpy as np Create Matrix # Create matrix matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) Calculate Mean # Return mean np.mean(matrix) 5.0  Calculate Variance # Return variance np.var(matrix) 6.666666666666667  Calculate Standard Deviation # Return standard deviation np.std(matrix) 2.5819888974716112  </description>
    </item>
    
    <item>
      <title>Calculate The Determinant Of A Matrix</title>
      <link>https://ericpena.github.io/machine_learning/vectors_matrices_and_arrays/calculate_the_determinant_of_a_matrix.html</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://ericpena.github.io/machine_learning/vectors_matrices_and_arrays/calculate_the_determinant_of_a_matrix.html</guid>
      <description>Preliminaries # Load library import numpy as np Create Matrix # Create matrix matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) Calculate Determinant # Return determinant of matrix np.linalg.det(matrix) -9.5161973539299405e-16  </description>
    </item>
    
    <item>
      <title>Calculate The Trace Of A Matrix</title>
      <link>https://ericpena.github.io/machine_learning/vectors_matrices_and_arrays/calculate_the_trace_of_a_matrix.html</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://ericpena.github.io/machine_learning/vectors_matrices_and_arrays/calculate_the_trace_of_a_matrix.html</guid>
      <description>Preliminaries # Load library import numpy as np Create Matrix # Create matrix matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) Calculate The Trace # Calculate the trace of the matrix matrix.diagonal().sum() 15  </description>
    </item>
    
    <item>
      <title>Converting A Dictionary Into A Matrix</title>
      <link>https://ericpena.github.io/machine_learning/vectors_matrices_and_arrays/converting_a_dictionary_into_a_matrix.html</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://ericpena.github.io/machine_learning/vectors_matrices_and_arrays/converting_a_dictionary_into_a_matrix.html</guid>
      <description>Preliminaries # Load library from sklearn.feature_extraction import DictVectorizer Create Dictionary # Our dictionary of data data_dict = [{&amp;#39;Red&amp;#39;: 2, &amp;#39;Blue&amp;#39;: 4}, {&amp;#39;Red&amp;#39;: 4, &amp;#39;Blue&amp;#39;: 3}, {&amp;#39;Red&amp;#39;: 1, &amp;#39;Yellow&amp;#39;: 2}, {&amp;#39;Red&amp;#39;: 2, &amp;#39;Yellow&amp;#39;: 2}] Feature Matrix From Dictionary # Create DictVectorizer object dictvectorizer = DictVectorizer(sparse=False) # Convert dictionary into feature matrix features = dictvectorizer.fit_transform(data_dict) # View feature matrix features array([[ 4., 2., 0.], [ 3., 4., 0.], [ 0., 1., 2.], [ 0.</description>
    </item>
    
    <item>
      <title>Create A Matrix</title>
      <link>https://ericpena.github.io/machine_learning/vectors_matrices_and_arrays/create_a_matrix.html</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://ericpena.github.io/machine_learning/vectors_matrices_and_arrays/create_a_matrix.html</guid>
      <description>Preliminaries # Load library import numpy as np Create Matrix # Create matrix matrix = np.array([[1, 4], [2, 5]]) Note NumPy&amp;rsquo;s mat data structure is less flexible for our purposes and should be avoided.</description>
    </item>
    
    <item>
      <title>Create A Sparse Matrix</title>
      <link>https://ericpena.github.io/machine_learning/vectors_matrices_and_arrays/create_a_sparse_matrix.html</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://ericpena.github.io/machine_learning/vectors_matrices_and_arrays/create_a_sparse_matrix.html</guid>
      <description>Preliminaries # Load libraries import numpy as np from scipy import sparse Create Dense Matrix # Create a matrix matrix = np.array([[0, 0], [0, 1], [3, 0]]) Convert To Sparse Matrix # Create compressed sparse row (CSR) matrix matrix_sparse = sparse.csr_matrix(matrix) Note: There are many types of sparse matrices. In the example above we use CSR but the type we use should reflect our use case.</description>
    </item>
    
    <item>
      <title>Create A Vector</title>
      <link>https://ericpena.github.io/machine_learning/vectors_matrices_and_arrays/create_a_vector.html</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://ericpena.github.io/machine_learning/vectors_matrices_and_arrays/create_a_vector.html</guid>
      <description>Preliminaries # Load library import numpy as np Create Row Vector # Create a vector as a row vector_row = np.array([1, 2, 3]) Create Column Vector # Create a vector as a column vector_column = np.array([[1], [2], [3]]) </description>
    </item>
    
    <item>
      <title>Describe An Array</title>
      <link>https://ericpena.github.io/machine_learning/vectors_matrices_and_arrays/describe_a_matrix.html</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://ericpena.github.io/machine_learning/vectors_matrices_and_arrays/describe_a_matrix.html</guid>
      <description>Preliminaries # Load library import numpy as np Create Matrix # Create matrix matrix = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) View Shape # View number of rows and columns matrix.shape (3, 4)  View Total Elements # View number of elements (rows * columns) matrix.size 12  View Number Of Dimensions # View number of dimensions matrix.ndim 2  </description>
    </item>
    
    <item>
      <title>Find The Maximum And Minimum</title>
      <link>https://ericpena.github.io/machine_learning/vectors_matrices_and_arrays/find_maximum_and_minimum.html</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://ericpena.github.io/machine_learning/vectors_matrices_and_arrays/find_maximum_and_minimum.html</guid>
      <description>Preliminaries # Load library import numpy as np Create Matrix # Create matrix matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) Find Maximum Element # Return maximum element np.max(matrix) 9  Find Minimum Element # Return minimum element np.min(matrix) 1  Find Maximum Element By Column # Find the maximum element in each column np.max(matrix, axis=0) array([7, 8, 9])  Find Maximum Element By Row # Find the maximum element in each row np.</description>
    </item>
    
    <item>
      <title>Find The Rank Of A Matrix</title>
      <link>https://ericpena.github.io/machine_learning/vectors_matrices_and_arrays/find_the_rank_of_a_matrix.html</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://ericpena.github.io/machine_learning/vectors_matrices_and_arrays/find_the_rank_of_a_matrix.html</guid>
      <description>Preliminaries # Load library import numpy as np Create Matrix # Create matrix matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) Find Rank Of Matrix # Return matrix rank np.linalg.matrix_rank(matrix) 2  </description>
    </item>
    
    <item>
      <title>Flatten A Matrix</title>
      <link>https://ericpena.github.io/machine_learning/vectors_matrices_and_arrays/flatten_a_matrix.html</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://ericpena.github.io/machine_learning/vectors_matrices_and_arrays/flatten_a_matrix.html</guid>
      <description>Preliminaries # Load library import numpy as np Create Matrix # Create matrix matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) Flatten Matrix # Flatten matrix matrix.flatten() array([1, 2, 3, 4, 5, 6, 7, 8, 9])  </description>
    </item>
    
    <item>
      <title>Getting The Diagonal Of A Matrix</title>
      <link>https://ericpena.github.io/machine_learning/vectors_matrices_and_arrays/getting_the_diagonal_of_a_matrix.html</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://ericpena.github.io/machine_learning/vectors_matrices_and_arrays/getting_the_diagonal_of_a_matrix.html</guid>
      <description>Preliminaries # Load library import numpy as np Create Matrix # Create matrix matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) Get The Diagonal # Return diagonal elements matrix.diagonal() array([1, 5, 9])  Calculate The Trace # Calculate the tracre of the matrix matrix.diagonal().sum() 15  </description>
    </item>
    
    <item>
      <title>Invert A Matrix</title>
      <link>https://ericpena.github.io/machine_learning/vectors_matrices_and_arrays/invert_a_matrix.html</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://ericpena.github.io/machine_learning/vectors_matrices_and_arrays/invert_a_matrix.html</guid>
      <description>Preliminaries # Load library import numpy as np Create Matrix # Create matrix matrix = np.array([[1, 4], [2, 5]]) Invert Matrix # Calculate inverse of matrix np.linalg.inv(matrix) array([[-1.66666667, 1.33333333], [ 0.66666667, -0.33333333]])  </description>
    </item>
    
    <item>
      <title>Reshape An Array</title>
      <link>https://ericpena.github.io/machine_learning/vectors_matrices_and_arrays/reshape_an_array.html</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://ericpena.github.io/machine_learning/vectors_matrices_and_arrays/reshape_an_array.html</guid>
      <description>Preliminaries # Load library import numpy as np Create Array # Create a 4x3 matrix matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) Reshape Array # Reshape matrix into 2x6 matrix matrix.reshape(2, 6) array([[ 1, 2, 3, 4, 5, 6], [ 7, 8, 9, 10, 11, 12]])  </description>
    </item>
    
    <item>
      <title>Selecting Elements In An Array</title>
      <link>https://ericpena.github.io/machine_learning/vectors_matrices_and_arrays/selecting_elements_in_an_array.html</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://ericpena.github.io/machine_learning/vectors_matrices_and_arrays/selecting_elements_in_an_array.html</guid>
      <description>Preliminaries # Load library import numpy as np Create Vector # Create row vector vector = np.array([1, 2, 3, 4, 5, 6]) Select Element # Select second element vector[1] 2  Create Matrix # Create matrix matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) Select Element # Select second row, second column matrix[1,1] 5  Create Tensor # Create matrix tensor = np.array([ [[[1, 1], [1, 1]], [[2, 2], [2, 2]]], [[[3, 3], [3, 3]], [[4, 4], [4, 4]]] ]) Select Element # Select second element of each of the three dimensions tensor[1,1,1] array([4, 4])  </description>
    </item>
    
    <item>
      <title>Transpose A Vector Or Matrix</title>
      <link>https://ericpena.github.io/machine_learning/vectors_matrices_and_arrays/transpose_a_vector_or_matrix.html</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://ericpena.github.io/machine_learning/vectors_matrices_and_arrays/transpose_a_vector_or_matrix.html</guid>
      <description>Preliminaries # Load library import numpy as np Create Vector # Create vector vector = np.array([1, 2, 3, 4, 5, 6]) Create Matrix # Create matrix matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) Transpose Vector # Tranpose vector vector.T array([1, 2, 3, 4, 5, 6])  Transpose Matrix # Transpose matrix matrix.T array([[1, 4, 7], [2, 5, 8], [3, 6, 9]])  </description>
    </item>
    
  </channel>
</rss>