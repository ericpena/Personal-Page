<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Eric Peña on Eric Peña</title>
    <link>https://ericpena.github.io/</link>
    <description>Recent content in Eric Peña on Eric Peña</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 16 Mar 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>War</title>
      <link>https://ericpena.github.io/2019/war/</link>
      <pubDate>Sat, 16 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ericpena.github.io/2019/war/</guid>
      <description>

&lt;h1 id=&#34;war-simulation-in-python&#34;&gt;War Simulation in Python&lt;/h1&gt;

&lt;h4 id=&#34;game-designer-greg-costikyan-has-observed-that-since-there-are-no-choices-in-the-game-and-all-outcomes-are-random-it-cannot-be-considered-a-game-by-some-definitions-i-chose-to-program-this-game-because-its-complete-random-chance-feature-it-was-an-opportunity-to-practice-python-and-writing-recursive-functions&#34;&gt;Game designer Greg Costikyan has observed that since there are no choices in the game, and all outcomes are random, it cannot be considered a game by some definitions. I chose to program this game because its complete random chance feature. It was an opportunity to practice python and writing recursive functions.&lt;/h4&gt;

&lt;h1 id=&#34;the-objective-of-the-game-is-to-win-all-cards&#34;&gt;The objective of the game is to win all cards.&lt;/h1&gt;

&lt;p&gt;A 52-card deck is divided evenly among the players, giving each a down stack. In unison, each player reveals the top card of their deck—this is a &amp;ldquo;battle&amp;rdquo;-and the player with the higher card takes both of the cards played and moves them to their reserves stack. The reserves stack is used when there are no longer cards to play in hand.&lt;/p&gt;

&lt;p&gt;If the two cards played are of equal value, then there is a &amp;ldquo;war&amp;rdquo;. Both players place the next three cards from their hand face down (depending on the variant) and then another card face-up. The owner of the higher face-up card wins the war and adds all six cards on the table to their reserves deck. If the face-up cards are again equal then the battle repeats with another set of face-down/up cards. This repeats until one player&amp;rsquo;s face-up card is higher than their opponent&amp;rsquo;s. This is the part of the game where recursion is helpful. In theory, there can be any number of &amp;ldquo;wars&amp;rdquo; only constrained by the number of cards in the deck. Most descriptions of War are unclear about what happens if a player runs out of cards during a war. In this variant, the player immediately loses.&lt;/p&gt;

&lt;p&gt;Below are several simulations that were run to explore game behavior&lt;/p&gt;

&lt;h1 id=&#34;simple-game&#34;&gt;Simple Game&lt;/h1&gt;

&lt;p&gt;This is a shorter game than average with &lt;strong&gt;3&lt;/strong&gt; wars which can be identified by the lines with steeper slopes.
&lt;img src=&#34;https://ericpena.github.io/idw_simulation_2.png&#34; alt=&#34;War Simulation -  3 Wars&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This is a slightly longer game with only &lt;strong&gt;4&lt;/strong&gt; wars which occur on card flip: 48, 90, 117, and 152.
&lt;img src=&#34;https://ericpena.github.io/idw_simulation_B.png&#34; alt=&#34;War Simulation - 4 Wars&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;blowing-up&#34;&gt;Blowing Up&lt;/h1&gt;

&lt;p&gt;There is &amp;ldquo;blowing up&amp;rdquo; behavior for some games as well. This behavior is typically exacerbated by wars won by the same player.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;img width=&#34;1604&#34; alt=&#34;...&#34; src=&#34;https://ericpena.github.io/idw_simulation_6.png&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;img width=&#34;1604&#34; alt=&#34;...&#34; src=&#34;https://ericpena.github.io/idw_simulation_8.png&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;img width=&#34;1604&#34; alt=&#34;...&#34; src=&#34;https://ericpena.github.io/idw_simulation_14.png&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;img width=&#34;1604&#34; alt=&#34;...&#34; src=&#34;https://ericpena.github.io/idw_simulation_15.png&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;triple-war&#34;&gt;Triple War&lt;/h3&gt;

&lt;p&gt;When wars occur consecutively, a mass number of cards are moved at once. The example below shows a triple war happening which led Player 2 winning the game. The war began at card flip 698.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ericpena.github.io/Triple_War.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://ericpena.github.io/idw_simulation_16_triple_war.png&#34; alt=&#34;Three Consecutive Wars&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;the-code&#34;&gt;The Code&lt;/h1&gt;

&lt;p&gt;The program has been written in Python and is copied below for those interested.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Title: War Simulation
# Date: 3/16/2019
# Author: Eric Pena

from random import shuffle
import random
import pandas as pd
import matplotlib.pyplot as plt
# Create Deck and shuffle it
deck = []
deck = range(13) * 4
shuffle(deck)
# Deal the cards
player1 = deck[::2]
player2 = deck[1::2]
# Create Reserve Piles
player1_res = []
player2_res = []
# Define more variables
topcard = 0
# Game counter
turn = 1
# Calculate the total cards a player has: hand + reserves
#----------------------------------------------------------------------------------------------------------------------------------------------
def total_cards(h, r):
	return (len(h) + len(r))
# Recursive function that happens when war starts	
#----------------------------------------------------------------------------------------------------------------------------------------------
def idw(player1, player2, player1_res, player2_res, jackpot):
	# DEBUG
	print &amp;quot;WAR BREAKS OUT...&amp;quot;
	# Add reserve to hand and shuffle if hand is less than 4 cards:
	if (len(player1) &amp;lt; 4):
		player1.extend(player1_res)
		player1_res = []
		shuffle(player1)
	if (len(player2) &amp;lt; 4):
		player2.extend(player2_res)
		player2_res = []
		shuffle(player2)
	# If this is still not enough cards, clear the cards and stop the game
	if (len(player1) &amp;lt; 4 or len(player2) &amp;lt; 4):
		player1, player2, player1_res, player2_res = ([] for i in range(4))
		return player1, player2, player1_res, player2_res
	# Remove top three cards and put them in reserve pile
	jackpot.extend([player1[0], player1[1], player1[2], player2[0], player2[1], player2[2]])
	player1 = player1[3:]
	player2 = player2[3:]

	# Use fourth card to compare
	if player1[topcard] &amp;gt; player2[topcard]:
		print &amp;quot;PLAYER 1 WINS WAR: &amp;quot; + str(player1[topcard]) + &amp;quot; - &amp;quot; + str(player2[topcard])
		player1_res.extend([player1[topcard], player2[topcard]])
		player1_res.extend(jackpot)
		# Remove cards from hand
		player1 = player1[1:]
		player2 = player2[1:]
		return player1, player2, player1_res, player2_res
	
	elif player1[topcard] &amp;lt; player2[topcard]:
		print &amp;quot;PLAYER 2 WINS WAR: &amp;quot; + str(player1[topcard]) + &amp;quot; - &amp;quot; + str(player2[topcard])
		player2_res.extend([player1[topcard], player2[topcard]])
		player2_res.extend(jackpot)
		# Remove cards from hand
		player1 = player1[1:]
		player2 = player2[1:]
		return player1, player2, player1_res, player2_res
	
	else:		
		print &amp;quot;ANOTHER WAR BEGINS: &amp;quot; + str(player1[topcard]) + &amp;quot; - &amp;quot; + str(player2[topcard])
		jackpot.extend([player1[0], player2[0]])
		player1 = player1[1:]
		player2 = player2[1:]
		return idw(player1, player2, player1_res, player2_res, jackpot)

# Start the game
#----------------------------------------------------------------------------------------------------------------------------------------------
def play_game(player1, player2, player1_res, player2_res, turn):
	# Create a record of the game
	cols = [&amp;quot;Round&amp;quot;, &amp;quot;P1 card&amp;quot;, &amp;quot;P2 card&amp;quot;, &amp;quot;P1 t-len&amp;quot;, &amp;quot;P2 t-len&amp;quot;, &amp;quot;P1 h-len&amp;quot;, &amp;quot;P2 h-len&amp;quot;]
	datarec = pd.DataFrame(columns = cols)
	while (len(player1) != 0 and len(player2) != 0):
		print &amp;quot;Round: &amp;quot; + str(turn) + &amp;quot;\t|\t&amp;quot; + \
			str(player1[topcard]) + &amp;quot;\t|\t&amp;quot; + \
			str(player2[topcard]) + &amp;quot;\t|\t&amp;quot; + \
			str(total_cards(player1, player1_res)) + &amp;quot;\t|\t&amp;quot; + \
			str(total_cards(player2, player2_res)) + &amp;quot;\t|\t&amp;quot; + \
			str(len(player1)) + &amp;quot;\t|\t&amp;quot; + \
			str(len(player2)) + &amp;quot;\t|\t&amp;quot; + \
			str(total_cards(player1, player1_res) + total_cards(player2, player2_res))
		# Add data to pandas dataframe:
		datarec.loc[turn - 1] = [turn, player1[topcard], player2[topcard], total_cards(player1, player1_res), total_cards(player2, player2_res), len(player1), len(player2)]
		# Flip top cards and assign:
		if player1[topcard] &amp;gt; player2[topcard]:
			player1_res.extend([player1[topcard], player2[topcard]])
			# Remove topcard from hands
			player1 = player1[1:]
			player2 = player2[1:]
		elif player1[topcard] &amp;lt; player2[topcard]:
			player2_res.extend([player1[topcard], player2[topcard]])
			# Remove topcard from hands
			player1 = player1[1:]
			player2 = player2[1:]
		else:
			print &amp;quot;TOP: &amp;quot; + str(player1[topcard]) + &amp;quot; - &amp;quot; + str(player2[topcard])
			player1, player2, player1_res, player2_res = idw(player1, player2, player1_res, player2_res,[])

		# Replenish Cards
		if len(player1) == 0:
			player1 = player1_res
			shuffle(player1)
			player1_res = []
			# it1 = 0
		if len(player2) == 0:
			player2 = player2_res
			shuffle(player2)
			player2_res = []
			# it2 = 0
		turn += 1
	return player1, player2, player1_res, player2_res, datarec, turn
#----------------------------------------------------------------------------------------------------------------------------------------------
# MAIN PROGRAM:
print &amp;quot;Round: &amp;quot; + &amp;quot;\t\t|\t&amp;quot; + &amp;quot;P1 card&amp;quot; + &amp;quot;\t|\t&amp;quot; + &amp;quot;P2 card&amp;quot; + &amp;quot;\t|\t&amp;quot; + &amp;quot;P1-T&amp;quot; + &amp;quot;\t|\t&amp;quot; + &amp;quot;P2-T&amp;quot; + &amp;quot;\t|\t&amp;quot; + &amp;quot;P1-H&amp;quot; + &amp;quot;\t|\t&amp;quot; + &amp;quot;P2-H&amp;quot;

player1, player2, player1_res, player2_res, df, turn = play_game(player1, player2, player1_res, player2_res, turn)
plt.plot(df[&amp;quot;Round&amp;quot;], df[&amp;quot;P1 t-len&amp;quot;])
plt.plot(df[&amp;quot;Round&amp;quot;], df[&amp;quot;P2 t-len&amp;quot;])
plt.legend([&#39;Player 1&#39;, &#39;Player 2&#39;])
plt.title(&amp;quot;War Simulation&amp;quot;)
plt.xlabel(&amp;quot;Card Flips&amp;quot;)
plt.ylabel(&amp;quot;Number of Cards For Each Player&amp;quot;)
plt.show()

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>R Data Types</title>
      <link>https://ericpena.github.io/2019/r-data-types/</link>
      <pubDate>Mon, 04 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ericpena.github.io/2019/r-data-types/</guid>
      <description>

&lt;h1 id=&#34;truth-is-ever-to-be-found-in-simplicity-and-not-in-the-multiplicity-and-confusion-of-things-br-isaac-newton&#34;&gt;&amp;ldquo;Truth is ever to be found in simplicity, and not in the multiplicity and confusion of things.&amp;rdquo;&lt;br&gt;Isaac Newton&lt;/h1&gt;

&lt;p&gt;I approached R in the same way I would any language. I immediately delve into for-loops, conditional statements, user-defined functions, classes, and so on. I didn&amp;rsquo;t pay much attention to data types at first - assuming they&amp;rsquo;re not much different than what I&amp;rsquo;ve seen already. I found myself using dataframes and matricies often with low confidence and a lingering confusion. I needed to know how these R data structures were related. I finally created these notes for myself to get a grip on the topic. Hopefully you find value in them as well.&lt;/p&gt;

&lt;p&gt;The data structures we will cover:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#vector&#34;&gt;Vectors&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#matrix&#34;&gt;Matricies&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#array&#34;&gt;Arrays&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#list&#34;&gt;Lists&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#dataframe&#34;&gt;Data Frames&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#factor&#34;&gt;Factors&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#table&#34;&gt;Tables&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For each data type, we will review the basics of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Creation&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Adding Element&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Deleting Elements&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Indexing&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Filtering&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;and More&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h1 id=&#34;a-name-vector-span-style-color-2980b9-vectors-span-a&#34;&gt;&lt;a name=&#34;vector&#34;&gt;&lt;span style=&#34;color: #2980B9&#34;&gt;Vectors&lt;/span&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-introduction-span&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Introduction&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;All elements in an R vector must have the same mode: &lt;em&gt;integer&lt;/em&gt;, &lt;em&gt;numeric&lt;/em&gt;, &lt;em&gt;character&lt;/em&gt;, &lt;em&gt;logical&lt;/em&gt;, &lt;em&gt;complex&lt;/em&gt;, etc.&lt;/p&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-creation-span&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Creation&lt;/span&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- c(88, 12, 23, 74)
x
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ## [1] 88 12 23 74
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-adding-element-span&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Adding Element&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Adding -44 to vector &lt;code&gt;x&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- c(x,-44)
x
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ## [1]  88  12  23  74 -44
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x[5] &amp;lt;- -44
x
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ## [1]  88  12  23  74 -44
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-remove-element-span&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Remove Element&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Remove 23 from &lt;code&gt;x&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- x[-3]
x
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ## [1]  88  12  74 -44
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s possible to remove several items at once:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- x[-3:-5]
x
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 88 12
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-indexing-span&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Indexing&lt;/span&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- rep(1,10)
x[4] &amp;lt;- 3
x
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##  [1] 1 1 1 3 1 1 1 1 1 1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x[4]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 3
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-filtering-span&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Filtering&lt;/span&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x[6] &amp;lt;- 5
x[9] &amp;lt;- 2
x[x &amp;gt; 2]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 3 5
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-combining-vectors-span&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Combining Vectors&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Find the length of a vector with &lt;code&gt;length(x)&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;When adding two vectors, the lengths of the vectors must be the same or one must be a multiple length of the other. When a vector isn&amp;rsquo;t long enough to add to another vectors, it will keep repeating itself however many times it needs in order for the lengths to match.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;y &amp;lt;- x + x; y
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##  [1]  2  2  2  6  2 10  2  2  4  2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;z &amp;lt;- x + c(1,2,3,4,5); z
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##  [1] 2 3 4 7 6 6 3 4 6 6
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;error &amp;lt;- x + c(1,2,3,4); error
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Warning in x + c(1, 2, 3, 4): longer object length is not a multiple of
## shorter object length

##  [1] 2 3 4 7 2 7 4 5 3 3
&lt;/code&gt;&lt;/pre&gt;

&lt;hr&gt;

&lt;h1 id=&#34;a-name-matrix-span-style-color-2980b9-matricies-span-a&#34;&gt;&lt;a name=&#34;matrix&#34;&gt;&lt;span style=&#34;color: #2980B9&#34;&gt;Matricies&lt;/span&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-introduction-span-1&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Introduction&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;A matrix is essentially a vector with two attributes. All the columns in a matrix must have the same mode: &lt;em&gt;integer&lt;/em&gt;, &lt;em&gt;numeric&lt;/em&gt;, &lt;em&gt;character&lt;/em&gt;, &lt;em&gt;logical&lt;/em&gt;, &lt;em&gt;complex&lt;/em&gt;, etc. in the same way it does for a vector. Matricies are special cases of a more general R type of object: &lt;em&gt;arrays&lt;/em&gt; - which we will read about next. Arrays can be multidimensional. ### &lt;span style=&#34;color:#E74C3C&#34;&gt;Creation&lt;/span&gt; One way to create a matrix:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;y &amp;lt;- matrix(c(1,2,3,4), nrow = 2, ncol = 2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or simply:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;y &amp;lt;- matrix(c(1,2,3,4), nrow = 2)
y
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##      [,1] [,2]
## [1,]    1    3
## [2,]    2    4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using the &lt;code&gt;byrow&lt;/code&gt; argument (default = FALSE):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;m &amp;lt;- matrix(c(1,2,3,4,5,6), nrow = 2, byrow = T)
m
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##      [,1] [,2] [,3]
## [1,]    1    2    3
## [2,]    4    5    6
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-adding-and-removing-rows-and-columns-span&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Adding and Removing Rows and Columns&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Rows and columns may be added and deleting from a matrix with operations analogous to the vector operations of adding and deleting. These functions are &lt;code&gt;rbind&lt;/code&gt; and &lt;code&gt;cbind&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Adding a column:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ones_column &amp;lt;- matrix(rep(1,2)); ones_column; m
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##      [,1]
## [1,]    1
## [2,]    1

##      [,1] [,2] [,3]
## [1,]    1    2    3
## [2,]    4    5    6
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;cbind(m, ones_column)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##      [,1] [,2] [,3] [,4]
## [1,]    1    2    3    1
## [2,]    4    5    6    1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Adding a row: (don&amp;rsquo;t forgot to adjust the row number: &lt;code&gt;nrow = 1&lt;/code&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ones_row &amp;lt;- matrix(rep(1,3), nrow = 1); ones_row; m
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##      [,1] [,2] [,3]
## [1,]    1    1    1

##      [,1] [,2] [,3]
## [1,]    1    2    3
## [2,]    4    5    6
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;rbind(ones_row, m)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##      [,1] [,2] [,3]
## [1,]    1    1    1
## [2,]    1    2    3
## [3,]    4    5    6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Rows may be added by creating matricies and copying:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;new_matrix &amp;lt;- matrix(nrow = 3, ncol = 3)

addded_row &amp;lt;- matrix(c(7,8,9), nrow = 1)

new_matrix[1:2,1:3] &amp;lt;- m
new_matrix[3,1:3] &amp;lt;- addded_row
new_matrix
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##      [,1] [,2] [,3]
## [1,]    1    2    3
## [2,]    4    5    6
## [3,]    7    8    9
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can use &lt;code&gt;rbind&lt;/code&gt; and &lt;code&gt;cbind&lt;/code&gt; to reassign values. This is a form of deleting data.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;m &amp;lt;- matrix(1:6, nrow = 3); m
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##      [,1] [,2]
## [1,]    1    4
## [2,]    2    5
## [3,]    3    6
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;m &amp;lt;- m[c(1,3),]; m
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##      [,1] [,2]
## [1,]    1    4
## [2,]    3    6
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-indexing-span-1&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Indexing&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;To retrieve information from a matrix:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;m[,2]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 4 6
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;m[2,]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 3 6
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;m[2,2]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Values may be changed in a matrix as well:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;m[2,2] &amp;lt;- 66; m
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##      [,1] [,2]
## [1,]    1    4
## [2,]    3   66
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-filtering-span-1&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Filtering&lt;/span&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- matrix(c(1,2,3,2,3,4), nrow = 3, byrow = F); x
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##      [,1] [,2]
## [1,]    1    2
## [2,]    2    3
## [3,]    3    4
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x[x[,2] &amp;gt;= 3]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 2 3 3 4
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;j &amp;lt;- x[,2] &amp;gt;= 3
x[j,]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##      [,1] [,2]
## [1,]    2    3
## [2,]    3    4
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-matrix-math-span&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Matrix Math&lt;/span&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;y
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##      [,1] [,2]
## [1,]    1    3
## [2,]    2    4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mathematical Matrix Multiplication&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;y %*% y
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##      [,1] [,2]
## [1,]    7   15
## [2,]   10   22
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mathematical Muliplication of Matrix by Scalar&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;3*y
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##      [,1] [,2]
## [1,]    3    9
## [2,]    6   12
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mathematical Matrix Addition&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;y + y
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##      [,1] [,2]
## [1,]    2    6
## [2,]    4    8
&lt;/code&gt;&lt;/pre&gt;

&lt;hr&gt;

&lt;h1 id=&#34;a-name-array-span-style-color-2980b9-arrays-span-a&#34;&gt;&lt;a name=&#34;array&#34;&gt;&lt;span style=&#34;color: #2980B9&#34;&gt;Arrays&lt;/span&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-introduction-span-2&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Introduction&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;The mechanics of an array is very similar to that of a matrix in R. Unlike a matrix, an array can represent data in higher than two dimensions. We may build a three-dimensional array by conbining two matricies, we can build four-dimensional arrays by combining two or more three-dimensional arrays, and so on.&lt;/p&gt;

&lt;hr&gt;

&lt;h1 id=&#34;a-name-list-span-style-color-2980b9-lists-span-a&#34;&gt;&lt;a name=&#34;list&#34;&gt;&lt;span style=&#34;color: #2980B9&#34;&gt;Lists&lt;/span&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-introduction-span-3&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Introduction&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;List are unique in that not all elements have to be of the same mode. List structures can combine different types. An R list is similar to a Python dictionary or C struct. List form the foundation for data frames, object oriented programming (R classes), and more.&lt;/p&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-creation-span-1&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Creation&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;If we wanted to create an employee database, we could start with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;j &amp;lt;- list(name = &amp;quot;Eric&amp;quot;, salary = 45000, union = T)
j
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## $name
## [1] &amp;quot;Eric&amp;quot;
## 
## $salary
## [1] 45000
## 
## $union
## [1] TRUE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The component names are called &lt;em&gt;tags&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-adding-element-span-1&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Adding Element&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;New components can be added after a list is created:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;z &amp;lt;- list(a = &amp;quot;abc&amp;quot;, b = 12)
z
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## $a
## [1] &amp;quot;abc&amp;quot;
## 
## $b
## [1] 12
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;z$c &amp;lt;- &amp;quot;sailing&amp;quot; # add a c component
z
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## $a
## [1] &amp;quot;abc&amp;quot;
## 
## $b
## [1] 12
## 
## $c
## [1] &amp;quot;sailing&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Adding component can also be done via a vector index:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;z[[4]] &amp;lt;- 28
z[5:7] &amp;lt;- c(F,T,T)
z
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## $a
## [1] &amp;quot;abc&amp;quot;
## 
## $b
## [1] 12
## 
## $c
## [1] &amp;quot;sailing&amp;quot;
## 
## [[4]]
## [1] 28
## 
## [[5]]
## [1] FALSE
## 
## [[6]]
## [1] TRUE
## 
## [[7]]
## [1] TRUE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also concatenate lists:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;cat &amp;lt;- c(list(&amp;quot;Joe&amp;quot;, 55000, T), list(5)); cat
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [[1]]
## [1] &amp;quot;Joe&amp;quot;
## 
## [[2]]
## [1] 55000
## 
## [[3]]
## [1] TRUE
## 
## [[4]]
## [1] 5
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-remove-element-span-1&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Remove Element&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;You can delete a list component by setting it equal to &lt;code&gt;NULL&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;z$b &amp;lt;- NULL
z
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## $a
## [1] &amp;quot;abc&amp;quot;
## 
## $c
## [1] &amp;quot;sailing&amp;quot;
## 
## [[3]]
## [1] 28
## 
## [[4]]
## [1] FALSE
## 
## [[5]]
## [1] TRUE
## 
## [[6]]
## [1] TRUE
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-indexing-span-2&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Indexing&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;You can access a list component in several different ways:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;j$salary
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 45000
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;j[[&amp;quot;salary&amp;quot;]]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 45000
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;j[[2]]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 45000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;What&amp;rsquo;s the deal with the single and double brackets?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If single brackets &lt;code&gt;[ ]&lt;/code&gt; are used, the result is another list - a sublist of the original.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;j1 &amp;lt;- j[1:2]; j1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## $name
## [1] &amp;quot;Eric&amp;quot;
## 
## $salary
## [1] 45000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If double brackets &lt;code&gt;[[ ]]&lt;/code&gt; are used, it is for referring to a single component and is return in the type of the component.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;j[[2]]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 45000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following returns an error since it&amp;rsquo;s trying to return several components using a function that is meant to return one:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# j[[1:2]]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-filtering-span-2&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Filtering&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Accessing list components:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;names(j)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;name&amp;quot;   &amp;quot;salary&amp;quot; &amp;quot;union&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can also get the specific values instead:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ulj &amp;lt;- unlist(j); ulj
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##    name  salary   union 
##  &amp;quot;Eric&amp;quot; &amp;quot;45000&amp;quot;  &amp;quot;TRUE&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each values above has a name. This name may be removed with the following function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;names(ulj) &amp;lt;- NULL
ulj
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Eric&amp;quot;  &amp;quot;45000&amp;quot; &amp;quot;TRUE&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;using-lapply-and-sapply-functions&#34;&gt;Using &lt;code&gt;lapply()&lt;/code&gt; and &lt;code&gt;sapply()&lt;/code&gt; functions&lt;/h5&gt;

&lt;p&gt;This applies a specific function on each of the compoenents of a list and returns another list:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;lapply(list(1:3,25:29), median)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [[1]]
## [1] 2
## 
## [[2]]
## [1] 27
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;sapply()&lt;/code&gt; returns a vector-valued answer:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sapply(list(1:3,25:29), median)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1]  2 27
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-recursive-lists-span&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Recursive Lists&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;You can have lists within lists:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;b &amp;lt;- list(u = 5, v = 12)
c &amp;lt;- list(w = 13)
a &amp;lt;- list(b, c)
a
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [[1]]
## [[1]]$u
## [1] 5
## 
## [[1]]$v
## [1] 12
## 
## 
## [[2]]
## [[2]]$w
## [1] 13
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;TIP: The concatenate function c() has an optional argument &lt;code&gt;recursive&lt;/code&gt;, which controls whether &lt;em&gt;flattening&lt;/em&gt; occurs when recursive lists are combined.&lt;/p&gt;

&lt;hr&gt;

&lt;h1 id=&#34;a-name-dataframe-span-style-color-2980b9-data-frames-span-a&#34;&gt;&lt;a name=&#34;dataframe&#34;&gt;&lt;span style=&#34;color: #2980B9&#34;&gt;Data Frames&lt;/span&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-introduction-span-4&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Introduction&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Data frames are similar to a two dimensional matrix in that it contains rows and columns structure. However, data frame are heterogeneous; columns can be different modes. Technically, a data frame is a list whose components are equal-lengthed vectors as the columns of the data frame. Data frame are commonly used when doing data manipulation and other data analysis techniques in R.&lt;/p&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-creation-span-2&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Creation&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Creating a data frame from scratch:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;scientists &amp;lt;- c(&amp;quot;Einstein&amp;quot;, &amp;quot;Newton&amp;quot;)
born &amp;lt;- c(1879, 1642)

d &amp;lt;- data.frame(scientists, born, stringsAsFactors = FALSE)
d
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##   scientists born
## 1   Einstein 1879
## 2     Newton 1642
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the named argument &lt;code&gt;stringsAsFactors&lt;/code&gt; is not specified, then by default, &lt;code&gt;stringsAsFactors&lt;/code&gt; will be TRUE.&lt;/p&gt;

&lt;p&gt;Data frames can also be created from external files (.csv, .mtp, .xls, .spss, .txt) using: &lt;br&gt; &lt;code&gt;mydata = read.csv(&amp;quot;mydata.csv&amp;quot;, header = TRUE)&lt;/code&gt;&lt;br&gt; &lt;code&gt;mydata = read.mtp(&amp;quot;mydata.mtp&amp;quot;)  # read from .mtp file&lt;/code&gt;&lt;br&gt; &lt;code&gt;mydata = read.xls(&amp;quot;mydata.xls&amp;quot;)  # read from first sheet&lt;/code&gt;&lt;br&gt; &lt;code&gt;mydata = read.spss(&amp;quot;myfile&amp;quot;, to.data.frame=TRUE)&lt;/code&gt;&lt;br&gt; &lt;code&gt;mydata = read.table(&amp;quot;mydata.txt&amp;quot;)&lt;/code&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;and many more options.&lt;/p&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-adding-element-span-2&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Adding Element&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;rbind()&lt;/code&gt; and &lt;code&gt;cbind()&lt;/code&gt; matrix functions also work in data frames to add new rows or columns of the same length.&lt;/p&gt;

&lt;p&gt;Adding a new row:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;d1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##   kids ages
## 1 jack   12
## 2 Jill   10
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;rbind(d1, list(&amp;quot;laura&amp;quot;, 19))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##    kids ages
## 1  jack   12
## 2  Jill   10
## 3 laura   19
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Adding a column&lt;/p&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-remove-element-span-2&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Remove Element&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Data deletion in a data frame is similar to that of a vector.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;d2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##    kids ages
## 1  jack   12
## 2  Jill   10
## 3 laura   19
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;d2 &amp;lt;- d2[-2,]
d2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##    kids ages
## 1  jack   12
## 3 laura   19
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-indexing-span-3&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Indexing&lt;/span&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;d[[1]]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Einstein&amp;quot; &amp;quot;Newton&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;d$scientists
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Einstein&amp;quot; &amp;quot;Newton&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We may also access elements in a matrix-like way we well:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;d[,1]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Einstein&amp;quot; &amp;quot;Newton&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It can be helpful to know the structure of the data frame and is easy to achieve:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str(d)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## &#39;data.frame&#39;:    2 obs. of  2 variables:
##  $ scientists: chr  &amp;quot;Einstein&amp;quot; &amp;quot;Newton&amp;quot;
##  $ born      : num  1879 1642
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-filtering-span-3&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Filtering&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at how to filter data in a data frame:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;cars &amp;lt;- cars[c(&amp;quot;mpg&amp;quot;, &amp;quot;hp&amp;quot;, &amp;quot;wt&amp;quot;,&amp;quot;cyl&amp;quot;)]
head(cars)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##                    mpg  hp    wt cyl
## Mazda RX4         21.0 110 2.620   6
## Mazda RX4 Wag     21.0 110 2.875   6
## Datsun 710        22.8  93 2.320   4
## Hornet 4 Drive    21.4 110 3.215   6
## Hornet Sportabout 18.7 175 3.440   8
## Valiant           18.1 105 3.460   6
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;cars[cars$cyl == 8,]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##                      mpg  hp    wt cyl
## Hornet Sportabout   18.7 175 3.440   8
## Duster 360          14.3 245 3.570   8
## Merc 450SE          16.4 180 4.070   8
## Merc 450SL          17.3 180 3.730   8
## Merc 450SLC         15.2 180 3.780   8
## Cadillac Fleetwood  10.4 205 5.250   8
## Lincoln Continental 10.4 215 5.424   8
## Chrysler Imperial   14.7 230 5.345   8
## Dodge Challenger    15.5 150 3.520   8
## AMC Javelin         15.2 150 3.435   8
## Camaro Z28          13.3 245 3.840   8
## Pontiac Firebird    19.2 175 3.845   8
## Ford Pantera L      15.8 264 3.170   8
## Maserati Bora       15.0 335 3.570   8
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;cars[,c(&amp;quot;mpg&amp;quot;, &amp;quot;hp&amp;quot;)][cars$wt &amp;lt;= 4,]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##                    mpg  hp
## Mazda RX4         21.0 110
## Mazda RX4 Wag     21.0 110
## Datsun 710        22.8  93
## Hornet 4 Drive    21.4 110
## Hornet Sportabout 18.7 175
## Valiant           18.1 105
## Duster 360        14.3 245
## Merc 240D         24.4  62
## Merc 230          22.8  95
## Merc 280          19.2 123
## Merc 280C         17.8 123
## Merc 450SL        17.3 180
## Merc 450SLC       15.2 180
## Fiat 128          32.4  66
## Honda Civic       30.4  52
## Toyota Corolla    33.9  65
## Toyota Corona     21.5  97
## Dodge Challenger  15.5 150
## AMC Javelin       15.2 150
## Camaro Z28        13.3 245
## Pontiac Firebird  19.2 175
## Fiat X1-9         27.3  66
## Porsche 914-2     26.0  91
## Lotus Europa      30.4 113
## Ford Pantera L    15.8 264
## Ferrari Dino      19.7 175
## Maserati Bora     15.0 335
## Volvo 142E        21.4 109
&lt;/code&gt;&lt;/pre&gt;

&lt;hr&gt;

&lt;h1 id=&#34;a-name-factor-span-style-color-2980b9-factors-span-a&#34;&gt;&lt;a name=&#34;factor&#34;&gt;&lt;span style=&#34;color: #2980B9&#34;&gt;Factors&lt;/span&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-introduction-span-5&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Introduction&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;The motivation for factors comes from the concept of categorical data in statistics. An R &lt;code&gt;factor&lt;/code&gt; may be viewed as a vector with more information added. The extra information consists of a record of the distinct values on that vector, called levels.&lt;/p&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-creation-span-3&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Creation&lt;/span&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- c(5, 12, 13, 12)
xf &amp;lt;- factor(x)
xf
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 5  12 13 12
## Levels: 5 12 13
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The distinct values in xf: 5, 12, and 13 are the levels&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str(xf)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##  Factor w/ 3 levels &amp;quot;5&amp;quot;,&amp;quot;12&amp;quot;,&amp;quot;13&amp;quot;: 1 2 3 2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;unclass(xf)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 1 2 3 2
## attr(,&amp;quot;levels&amp;quot;)
## [1] &amp;quot;5&amp;quot;  &amp;quot;12&amp;quot; &amp;quot;13&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;length(xf)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 4
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-adding-element-span-3&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Adding Element&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Future new levels can be anticipated as well:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- c(5, 12, 13, 12)
xff &amp;lt;- factor(x, levels = c(5, 12, 13, 88))
xff
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 5  12 13 12
## Levels: 5 12 13 88
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;xff[2] &amp;lt;- 88
xff
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 5  88 13 12
## Levels: 5 12 13 88
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Although you cannot add a value that doesn&amp;rsquo;t have a level associated with it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;xff[2] &amp;lt;- 28
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## invalid factor level, NA generated
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-remove-element-span-3&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Remove Element&lt;/span&gt;&lt;/h3&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-indexing-span-4&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Indexing&lt;/span&gt;&lt;/h3&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-filtering-span-4&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Filtering&lt;/span&gt;&lt;/h3&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-math-span&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Math&lt;/span&gt;&lt;/h3&gt;

&lt;hr&gt;

&lt;h1 id=&#34;a-name-table-span-style-color-2980b9-tables-span-a&#34;&gt;&lt;a name=&#34;table&#34;&gt;&lt;span style=&#34;color: #2980B9&#34;&gt;Tables&lt;/span&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-introduction-span-6&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Introduction&lt;/span&gt;&lt;/h3&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-creation-span-4&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Creation&lt;/span&gt;&lt;/h3&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-adding-element-span-4&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Adding Element&lt;/span&gt;&lt;/h3&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-remove-element-span-4&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Remove Element&lt;/span&gt;&lt;/h3&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-indexing-span-5&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Indexing&lt;/span&gt;&lt;/h3&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-filtering-span-5&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Filtering&lt;/span&gt;&lt;/h3&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-math-span-1&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Math&lt;/span&gt;&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>Mathematics of Network Theory</title>
      <link>https://ericpena.github.io/2018/network-theory/</link>
      <pubDate>Sun, 16 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ericpena.github.io/2018/network-theory/</guid>
      <description>

&lt;p&gt;Graphs may be represented in the form of a matrix. Main types of graphs that may be represented are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Simple Graph&lt;/li&gt;
&lt;li&gt;Multigraph&lt;/li&gt;
&lt;li&gt;Directed Graph&lt;/li&gt;
&lt;li&gt;Weighted Graph&lt;/li&gt;
&lt;li&gt;Bipartite Graph&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;directed-graph&#34;&gt;Directed Graph&lt;/h3&gt;

&lt;p&gt;Directed graphs are graphs that contain edges with direction. Vertices may have inward and outward edges.&lt;/p&gt;

&lt;p&gt;Unlike adjacency matricies for simped graphs, adjacency matricies for directed graphs are non-symmetric. Elements of an adjacency matrix for a directed graph may be denoted as:
$$A_{ij}$$
which represents an edge from vertex $j$ to $i$.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ericpena.github.io/DirectedGraph1.png&#34; alt=&#34;Directed graph with four verticies&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The corresponding adjacency matrix for the graph above is:
$$A = \begin{pmatrix}0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0\\ 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0\\ 1 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0\\ 1 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0 \end{pmatrix}$$&lt;/p&gt;

&lt;h3 id=&#34;cocitation&#34;&gt;Cocitation&lt;/h3&gt;

&lt;p&gt;The cocitation of two vertices $i$ and $j$ in a directed network is the number of vertices that have outgoing edges pointing to both $i$ and $j$. We can see that:&lt;/p&gt;

&lt;div&gt;$$A_{ik}A_{jk} = 1$$&lt;/div&gt;

&lt;p&gt;if $i$ and $j$ are both cited by $k$. If we sum over all these elements we get the following relation:&lt;/p&gt;

&lt;div&gt;$$C_{ij} = \sum\limits_{k=1}^n A_{ik}A_{jk} = \sum\limits_{k=1}^n A_{ik}A_{kj}^T = AA^T $$&lt;/div&gt;

&lt;p&gt;This is a cocitation network for which there is an edge between $i$ and $j$ if $C_{ij} &amp;gt; 0$, for $i \neq j$.&lt;/p&gt;

&lt;p&gt;The diagonal elements of the cocitation matrix are given by:&lt;/p&gt;

&lt;div&gt;$$C_{ii} = \sum\limits_{k=1}^n A_{ik}^2 = \sum\limits_{k=1}^n A_{ik}$$&lt;/div&gt;

&lt;p&gt;In constructing the cocitation network we ignore these diagonal elements, meaning that the network&amp;rsquo;s adjacency matrix is equal to the cocitation matrix but with all the diagonal elements set to zero.&lt;/p&gt;

&lt;h3 id=&#34;bibliographic-coupling&#34;&gt;Bibliographic Coupling&lt;/h3&gt;

&lt;p&gt;Cocitation and Bibliographic coupling are similar mathematically but give different results. They&amp;rsquo;re both affected by the number of in and out edges. Bibliographic Coupling of two vertices are the number of other vertices to which both $i$ and $j$ point to. Bibliographic Coupling is general more stable since the number of citations can vary with time. Bibliographic Coupling is known at time of publishing and doesn&amp;rsquo;t change at all. This may or may not be a good thing depending on the situation. Mathematically, it can be described by the following:&lt;/p&gt;

&lt;div&gt;$$B_{ij} = \sum\limits_{k=1}^n A_{ki}A_{kj} = \sum\limits_{k=1}^n A_{ik}^TA_{kj} = A^TA $$&lt;/div&gt;

&lt;p&gt;The diagonal elements of $\textbf{B}$ are:&lt;/p&gt;

&lt;div&gt;$$B_{ii} = \sum\limits_{k=1}^n A_{ki}^2 = \sum\limits_{k=1}^n A_{ki}$$&lt;/div&gt;

&lt;p&gt;$B_{ii}$ is equal to the number of other vertices that vertex $i$ points to - the number of papers $i$ cites.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ericpena.github.io/DirectedGraph2.png&#34; alt=&#34;Shows cocitation and bibliographic coupling network comparison&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;hypergraphs&#34;&gt;Hypergraphs&lt;/h3&gt;

&lt;p&gt;Networks with link that join more than two vertices are called hypergraphs. These types of graphs are useful when representing family relations for example. Edges that relate more than two vertices are called hyperedges. In sociology, these networks may be called &lt;em&gt;affiliation networks&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;bipartite-networks&#34;&gt;Bipartite Networks&lt;/h3&gt;

&lt;p&gt;Hypergraphs may be difficult to deal with and represent mathematically but a tool that can help are bipartite graphs - a way of conveniently representing the hypergraph structure. In sociology, this may be called: &lt;em&gt;two-mode networks&lt;/em&gt;. Edges only exist between two vertices of unlike-types.&lt;/p&gt;

&lt;p&gt;The adjacency matrix for a bipartite graph is a rectangular matrix called an &lt;em&gt;incidence matrix&lt;/em&gt; which is a $g$ by $n$ matrix where $g$ is the number of groups and $n$ are the number of members in the groups.&lt;/p&gt;

&lt;div&gt;
$$B_{ij} = \begin{cases} 
      1, &amp; \textit{if vertex j belongs to group i} \\
      0, &amp; \textit{otherwise}
\end{cases}$$
&lt;/div&gt;

&lt;p&gt;&lt;img src=&#34;https://ericpena.github.io/BipartiteGraph1.png&#34; alt=&#34;Bipartite Graph&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The adjancency matrix for the bipartite graph above can be written as a $4$ by $5$ matrix:&lt;/p&gt;

&lt;p&gt;$$B = \begin{pmatrix}1 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1 &amp;amp; 0\\1 &amp;amp; 1 &amp;amp; 1 &amp;amp; 1 &amp;amp; 0\\0 &amp;amp; 1 &amp;amp; 1 &amp;amp; 0 &amp;amp; 1\\0 &amp;amp; 0 &amp;amp; 1 &amp;amp; 1 &amp;amp; 1\end{pmatrix}$$&lt;/p&gt;

&lt;p&gt;This is a much easier way of representing the hypergraph of actors to movies for example. For much info, read section 6.6 (p.125) of Networks - An Introduction (Newman).&lt;/p&gt;

&lt;p&gt;The bipartite graph can be broken down even further by making two one-mode projections. One projection can be made with the &lt;em&gt;groups&lt;/em&gt; side and another can be made with &lt;em&gt;members&lt;/em&gt; side. These projections have the benefit of being simpler to study but are less powerful because information is lost through these projections.&lt;/p&gt;

&lt;p&gt;The two one-mode projections in words are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The number of groups for which members $i$ and $j$ are both a part of. This is an $n$ x $n$ matrix: $$P = B^TB$$&lt;/li&gt;
&lt;li&gt;The number of common members of groups $i$ and $j$. This is a $g$ x $g$ matrix: $$P&amp;rsquo;=BB^T$$&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;quick-thought&#34;&gt;Quick Thought&lt;/h4&gt;

&lt;p&gt;Naturally you want to relate this to cociation and bibliographic coupling networks but it may be confusing to do so. The main difference between cocitation and bibliographic coupling is the direction of the arrows. This bipartite network consists of two different types of nodes and un-directed edges. Therefore, you may have some cyclic thinking if you try to relate them too much. Although The &lt;em&gt;first&lt;/em&gt; projection (the one on the members) is similar to the cocitation network in that the diagonals should be ignored and forced to be zero.&lt;/p&gt;

&lt;h4 id=&#34;information-loss&#34;&gt;Information Loss&lt;/h4&gt;

&lt;p&gt;Although these projections make life a little easier, it does come at a cost: loss of information. Some of the things we loose are the number of groups in the network and the exact membership of each group. If we make the projection weighted graphs, we can at least get information as to how many commons groups a pair of vertices share for example.&lt;/p&gt;

&lt;h3 id=&#34;trees&#34;&gt;Trees&lt;/h3&gt;

&lt;p&gt;A &lt;em&gt;tree&lt;/em&gt; is a connected, undirected network that contains no closed loops. Connected means that every vertex in the network is reachable from every other via some path through the network. A network can also consists of two or more parts. If the individual parts of the network are trees, the then network as a whole is considered a forest. There are leaves on a tree - vertices with one edge on them but topologically, there isn&amp;rsquo;t really a root.&lt;/p&gt;

&lt;p&gt;The most important property of a tree is that, since there are no closed loops, there is only one path between any pair of vertices. In a forest, there is at most one path but there may be none.&lt;/p&gt;

&lt;p&gt;Another very useful property of trees is that a tree of $n$ vertices always has $n-1$ edges. The reverse is also true: any connected network with $n$ vertices and $n-1$ edges is a tree. If such a network were not a tree then there must be a loop in the network somewhere, implying that we could remove an edge without disconnecting any part of the network.&lt;/p&gt;

&lt;h3 id=&#34;planar-network&#34;&gt;Planar Network&lt;/h3&gt;

&lt;p&gt;Simply put, a planar network is a network that can be drawn on a plane without having any edges cross. All trees are planar but most of the time, network are not planar (e.g., citation networks, metabolic networks, internet, etc.). Some networks are forced to be planar because of physics space constraints such as rivers or road networks.&lt;/p&gt;

&lt;p&gt;These types of networks play an important role in the &lt;em&gt;four-color theorem&lt;/em&gt; which state that the number of colors required to color a graph in this way is called the chromatic number of the graph and many mathematical results are known about chromatic numbers.&lt;/p&gt;

&lt;p&gt;An important to point out is that there is a method of determining if a network is planar. It&amp;rsquo;s fairly easy to tell by observation if the network is small but when the network is very large, a general method is required.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Kuratowski&amp;rsquo;s Theorem&lt;/em&gt;: Every non-planar network contains a least one subgraph that is an expansion of $K_5$ and $UG$. (Read more about this on p. 132 of Networks - an Introduction (Newman)).&lt;/p&gt;

&lt;h3 id=&#34;degree&#34;&gt;Degree&lt;/h3&gt;

&lt;h4 id=&#34;mean-degree&#34;&gt;Mean Degree&lt;/h4&gt;

&lt;p&gt;We will denote the degree of vertex $i$ by $k_i$. For an undirected graph of n vertices the degree can be written in terms of the adjacency matrix as:&lt;/p&gt;

&lt;div&gt;$$k_i = \sum\limits_{j=1}^n A_{ij}$$&lt;/div&gt;

&lt;p&gt;Every edge in an undirected graph has two ends and if there are m edges in total then there are $2m$ ends of edges. But the number of ends of edges is also equal to the sum of the degrees of all the vertices, so&lt;/p&gt;

&lt;div&gt;$$2m = \sum\limits_{i=1}^n k_i$$&lt;/div&gt;

&lt;p&gt;Another way of writing this that is more intuitive is:&lt;/p&gt;

&lt;div&gt;$$m = \frac{1}{2}\sum\limits_{i=1}^n k_i = \frac{1}{2}\sum\limits_{ij}^n A_{ij}$$&lt;/div&gt;

&lt;p&gt;The mean degree $c$ of an undirected graph is:&lt;/p&gt;

&lt;div&gt;$$c = \frac{1}{n} \sum\limits_{i=1}^n k_i$$&lt;/div&gt;

&lt;p&gt;And combining this with the earlier equation:&lt;/p&gt;

&lt;p&gt;$$c = \frac{2m}{n}$$&lt;/p&gt;

&lt;h4 id=&#34;density&#34;&gt;Density&lt;/h4&gt;

&lt;p&gt;The maximum possible number of edges in a simple graph is $\binom{n}{2} = \frac{1}{2}n(n-1)$. The connectance or density $\rho$ of a graph is the fraction of these edges that are actually present:&lt;/p&gt;

&lt;p&gt;$$\rho = \frac{m}{\binom{n}{2}}=\frac{2m}{n(n-1)}=\frac{c}{n-1}$$&lt;/p&gt;

&lt;p&gt;When the network is sufficiently large, $\rho$ may be approximated with just $\frac{c}{n}$.&lt;/p&gt;

&lt;p&gt;A network where $\rho$ tends to a constant as $n \rightarrow \infty$ is said to be &lt;em&gt;dense&lt;/em&gt;. A network in which $\rho \rightarrow 0$ as $n \rightarrow \infty$ is said to be &lt;em&gt;sparse&lt;/em&gt;.&lt;/p&gt;

&lt;h4 id=&#34;directed-network-degree&#34;&gt;Directed Network Degree&lt;/h4&gt;

&lt;p&gt;Vertex degrees in a directed network are more complicated. They are broken up into &lt;em&gt;in-degree&lt;/em&gt; and &lt;em&gt;out-degree&lt;/em&gt;. If $A_{ij}$ is the adjacency matrix of a directed network, the &lt;em&gt;in&lt;/em&gt; and &lt;em&gt;out&lt;/em&gt; degree can be written as:&lt;/p&gt;

&lt;div&gt;$$k_i^{in} = \sum\limits_{j=1}^n A_{ij},\ \ \  k_j^{out} = \sum\limits_{i=1}^n A_{ij}$$&lt;/div&gt;

&lt;p&gt;We also know the number of edges are:&lt;/p&gt;

&lt;div&gt;$$m = \sum \limits_{i=1}^n k_i^{in} = \sum\limits_{j=1}^n k_j^{out} = \sum \limits_{ij} A_{ij}$$&lt;/div&gt;

&lt;p&gt;As far as the mean degree of directed networks:&lt;/p&gt;

&lt;div&gt;$$c_{in} = \frac{1}{n} \sum\limits_{i=1}^n k_i^{in} = \frac{1}{n} \sum\limits_{j=1}^n k_j^{out} = c_{out}$$&lt;/div&gt;

&lt;p&gt;Combining these two relations, the mean degree can concisely be written as:&lt;/p&gt;

&lt;p&gt;$$c = \frac{m}{n}$$&lt;/p&gt;

&lt;h3 id=&#34;paths&#34;&gt;Paths&lt;/h3&gt;

&lt;p&gt;A path along a network is a route across the network moving from vertex to vertex along the edges. In a directed network, the path can on go in the direction of the edge but can go either way for an undirected network. A path may reach a vertex or go along an edge it has seen before. A path that does not intersect itself is considered a &lt;em&gt;self-avoiding path&lt;/em&gt;. Geodesic paths and Hamiltonian paths are two special cases of self-avoiding paths.&lt;/p&gt;

&lt;p&gt;The number of paths of length $r$ may be important to study and can be calculated for directed and undirected networks. We will use the fact that for directed and undirected networks, $A_{ij}$ is 1 if there is an edge from vertex $j$ to vertex $i$, and 0 otherwise. We can start by asking how many paths of length 2 are there in a network. Imagine we want to study all paths of length 2 from $j$ to $i$ via $k$. The product $A_{ik}A_{kj}$ is 1 where there is a path of length 2 from $j$ to $i$ via $k$, and 0 otherwise.&lt;/p&gt;

&lt;div&gt;$$N_{ij}^{(2)} = \sum\limits_{k=1}^n A_{ik}A_{kj}=\left[A^2\right]_{ij}$$&lt;/div&gt;

&lt;p&gt;We can study the path of length 3 as well. The product $A_{ik}A_{kl}A_{lj}$ is 1 where there exists a path of length 3, and 0 otherwise.&lt;/p&gt;

&lt;div&gt;$$N_{ij}^{(3)} = \sum\limits_{k,l=1}^n A_{ik}A_{kl}A_{lj}=\left[A^3\right]_{ij}$$&lt;/div&gt;

&lt;p&gt;Generalizing to any length $r$ gives:&lt;/p&gt;

&lt;div&gt;$$N_{ij}^{r}=\left[A^r\right]_{ij}$$&lt;/div&gt;

&lt;p&gt;There is a proof of induction on page 137 of Network - An Introduction (Newman).&lt;/p&gt;

&lt;p&gt;Another important thing to consider are loops in a network. The number of loops may be calculated as well.&lt;/p&gt;

&lt;div&gt;$$L_r = \sum\limits_{i=1}^n\left[A^r\right]_{ii}=Tr A^r$$&lt;/div&gt;

&lt;p&gt;There &amp;lsquo;Tr&amp;rsquo; is the trace of a matrix. The number of loops can be written in terms of the eigenvalues of the adjacency matrix as well. The adjacency matrix can be written as $A=UKU^T$ where $U$ is the orthogonal matrix of eigenvectors and $K$ is the orthogonal matrix of eigenvalues:&lt;/p&gt;

&lt;p&gt;$$A^r = (UKU^T)^r = UK^rU^T$$&lt;/p&gt;

&lt;div&gt;$$L_r = Tr(UK^rU^T)=Tr(U^TUK^r)=Tr(k^r)=\sum\limits_i k_i^r$$&lt;/div&gt;

&lt;p&gt;Where $k_i$ is the $i^{th}$ eigenvalue of the adjacency matrix. This applies to directed and undirected graphs. There is one important thing to note when learning about counting the number of loops on length r. For each consideration below, the calculation for determining the number of loops uses the following criteria for counting distinct loops.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Although there are loop paths that have the same vertices and same order, if there are different starting points, then they are considered separate loops.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;$$1\rightarrow 2\rightarrow 3 \rightarrow 1 \ \ \ and \ \ \ 2\rightarrow 3\rightarrow 2 \rightarrow 1$$&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If loops are in the opposite direction, they are counted as distinct loops.
$$1 \rightarrow 2 \rightarrow 3 \rightarrow 1 \ \ \ and \ \ \ 1 \rightarrow 3 \rightarrow 2 \rightarrow 1$$&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;geodesic-paths&#34;&gt;Geodesic Paths&lt;/h3&gt;

&lt;p&gt;A geodesic path is shortest network distance between vertices in question. This is also called &lt;em&gt;geodesic distance&lt;/em&gt; or &lt;em&gt;shortest distance&lt;/em&gt;. Mathematically, a geodesic distance is the smallest value of r such that $\left[ A^r \right]_{ij} &amp;gt; 0$ between vertices $i$ and $j$.&lt;/p&gt;

&lt;p&gt;It may be the case that no shortest distance exists (for example: for separate components of the network where the distance may be said to be infinity). Another interesting fact - If a path intesects itself, it has a loop and therefore cannot be a geodesic path since it can be shortened by removing this loop.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;diameter&lt;/em&gt; of a graph is the length of the longest geodesic path between any pair of vertices in the network for which a path actually exists.&lt;/p&gt;

&lt;h3 id=&#34;eulerian-and-hamiltonian-paths&#34;&gt;Eulerian and Hamiltonian Paths&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Eulerian Path&lt;/strong&gt;: a path that traverses each edge in the network exactly once&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hamiltonian Path&lt;/strong&gt;: a path that visits each vertex exactly once&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If there are any vertex degree greater than 2, then the Eulerian path is not self-avoiding since it has to visit vertices more than once in order to traverse tall their edges.&lt;/p&gt;

&lt;h4 id=&#34;kronigsberg-bridges&#34;&gt;Kronigsberg Bridges&lt;/h4&gt;

&lt;p&gt;This problem becomes finding an Eulerian path on this network of bridges and the name is in honor of Euler who presented this problem. Euler observed that since any Eulerian path must both enter and leave every vertex it passes (except for the first and last), there can at most be two vertices with odd degree. All four of the vertices in the Kronigsberg Problem has odd degree. More precisely, there can only be 2 or 0 vertices of odd degree for an Eulerian condition to be possible. With this logic, Euler proved the Kronigsberg problem has no solution.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://ericpena.github.io/about/</link>
      <pubDate>Wed, 09 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ericpena.github.io/about/</guid>
      <description>

&lt;h1 id=&#34;center-i-m-eric-peña-center&#34;&gt;&lt;center&gt;I&amp;rsquo;m Eric Peña.&lt;/center&gt;&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;https://ericpena.github.io/faces.png&#34; alt=&#34;Home_GIF&#34; width=&#34;300&#34;&gt;&lt;/p&gt;

&lt;h1 id=&#34;center-education-center&#34;&gt;&lt;center&gt;Education&lt;/center&gt;&lt;/h1&gt;

&lt;p&gt;&lt;center&gt;The Ohio State University, B.S. Engineering Physics – Computer Information Science&lt;/center&gt;
&lt;center&gt;General Assembly - Data Science&lt;/center&gt;&lt;/p&gt;

&lt;h1 id=&#34;center-experience-center&#34;&gt;&lt;center&gt;Experience&lt;/center&gt;&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Revenue Management Data Analyst | Diageo (Spirits Manufacturer)&lt;/li&gt;
&lt;li&gt;Engineer | H.B. Fuller (Chemical Company)&lt;/li&gt;
&lt;li&gt;Physics Teacher | The OSU Minority Engineering Program&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;center-interests-center&#34;&gt;&lt;center&gt;INTERESTS&lt;/center&gt;&lt;/h1&gt;

&lt;p&gt;&lt;center&gt;Piano | Music | Science | Math | Biking&lt;/center&gt;&lt;/p&gt;

&lt;!-- Hugo is the **world’s fastest framework for building websites**. It is written in Go.

It makes use of a variety of open source projects including:

* https://github.com/russross/blackfriday
* https://github.com/alecthomas/chroma
* https://github.com/muesli/smartcrop
* https://github.com/spf13/cobra
* https://github.com/spf13/viper

Learn more and contribute on [GitHub](https://github.com/gohugoio).  --&gt;
</description>
    </item>
    
  </channel>
</rss>