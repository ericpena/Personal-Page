<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ERIC PEÑA on ERIC PEÑA</title>
    <link>http://ericpena.github.io/</link>
    <description>Recent content in ERIC PEÑA on ERIC PEÑA</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 10 Mar 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>http://ericpena.github.io/2014/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ericpena.github.io/2014/migrate-from-jekyll/</guid>
      <description>

&lt;h2 id=&#34;move-static-content-to-static&#34;&gt;Move static content to &lt;code&gt;static&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Jekyll has a rule that any directory not starting with &lt;code&gt;_&lt;/code&gt; will be copied as-is to the &lt;code&gt;_site&lt;/code&gt; output. Hugo keeps all static content under &lt;code&gt;static&lt;/code&gt;. You should therefore move it all there.
With Jekyll, something that looked like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;▾ &amp;lt;root&amp;gt;/
    ▾ images/
        logo.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;should become&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;▾ &amp;lt;root&amp;gt;/
    ▾ static/
        ▾ images/
            logo.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as &lt;code&gt;CNAME&lt;/code&gt;) to be moved to &lt;code&gt;static&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;create-your-hugo-configuration-file&#34;&gt;Create your Hugo configuration file&lt;/h2&gt;

&lt;p&gt;Hugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the &lt;a href=&#34;http://ericpena.github.io/overview/configuration/&#34;&gt;Hugo configuration documentation&lt;/a&gt; for details.&lt;/p&gt;

&lt;h2 id=&#34;set-your-configuration-publish-folder-to-site&#34;&gt;Set your configuration publish folder to &lt;code&gt;_site&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;The default is for Jekyll to publish to &lt;code&gt;_site&lt;/code&gt; and for Hugo to publish to &lt;code&gt;public&lt;/code&gt;. If, like me, you have &lt;a href=&#34;http://blog.blindgaenger.net/generate_github_pages_in_a_submodule.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;_site&lt;/code&gt; mapped to a git submodule on the &lt;code&gt;gh-pages&lt;/code&gt; branch&lt;/a&gt;, you&amp;rsquo;ll want to do one of two alternatives:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Change your submodule to point to map &lt;code&gt;gh-pages&lt;/code&gt; to public instead of &lt;code&gt;_site&lt;/code&gt; (recommended).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git submodule deinit _site
git rm _site
git submodule add -b gh-pages git@github.com:your-username/your-repo.git public
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Or, change the Hugo configuration to use &lt;code&gt;_site&lt;/code&gt; instead of &lt;code&gt;public&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    ..
    &amp;quot;publishdir&amp;quot;: &amp;quot;_site&amp;quot;,
    ..
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;convert-jekyll-templates-to-hugo-templates&#34;&gt;Convert Jekyll templates to Hugo templates&lt;/h2&gt;

&lt;p&gt;That&amp;rsquo;s the bulk of the work right here. The documentation is your friend. You should refer to &lt;a href=&#34;http://jekyllrb.com/docs/templates/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Jekyll&amp;rsquo;s template documentation&lt;/a&gt; if you need to refresh your memory on how you built your blog and &lt;a href=&#34;http://ericpena.github.io/layout/templates/&#34;&gt;Hugo&amp;rsquo;s template&lt;/a&gt; to learn Hugo&amp;rsquo;s way.&lt;/p&gt;

&lt;p&gt;As a single reference data point, converting my templates for &lt;a href=&#34;http://heyitsalex.net/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;heyitsalex.net&lt;/a&gt; took me no more than a few hours.&lt;/p&gt;

&lt;h2 id=&#34;convert-jekyll-plugins-to-hugo-shortcodes&#34;&gt;Convert Jekyll plugins to Hugo shortcodes&lt;/h2&gt;

&lt;p&gt;Jekyll has &lt;a href=&#34;http://jekyllrb.com/docs/plugins/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;plugins&lt;/a&gt;; Hugo has &lt;a href=&#34;http://ericpena.github.io/doc/shortcodes/&#34;&gt;shortcodes&lt;/a&gt;. It&amp;rsquo;s fairly trivial to do a port.&lt;/p&gt;

&lt;h3 id=&#34;implementation&#34;&gt;Implementation&lt;/h3&gt;

&lt;p&gt;As an example, I was using a custom &lt;a href=&#34;https://github.com/alexandre-normand/alexandre-normand/blob/74bb12036a71334fdb7dba84e073382fc06908ec/_plugins/image_tag.rb&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;image_tag&lt;/code&gt;&lt;/a&gt; plugin to generate figures with caption when running Jekyll. As I read about shortcodes, I found Hugo had a nice built-in shortcode that does exactly the same thing.&lt;/p&gt;

&lt;p&gt;Jekyll&amp;rsquo;s plugin:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;module Jekyll
  class ImageTag &amp;lt; Liquid::Tag
    @url = nil
    @caption = nil
    @class = nil
    @link = nil
    // Patterns
    IMAGE_URL_WITH_CLASS_AND_CAPTION =
    IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK = /(\w+)(\s+)((https?:\/\/|\/)(\S+))(\s+)&amp;quot;(.*?)&amp;quot;(\s+)-&amp;gt;((https?:\/\/|\/)(\S+))(\s*)/i
    IMAGE_URL_WITH_CAPTION = /((https?:\/\/|\/)(\S+))(\s+)&amp;quot;(.*?)&amp;quot;/i
    IMAGE_URL_WITH_CLASS = /(\w+)(\s+)((https?:\/\/|\/)(\S+))/i
    IMAGE_URL = /((https?:\/\/|\/)(\S+))/i
    def initialize(tag_name, markup, tokens)
      super
      if markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK
        @class   = $1
        @url     = $3
        @caption = $7
        @link = $9
      elsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION
        @class   = $1
        @url     = $3
        @caption = $7
      elsif markup =~ IMAGE_URL_WITH_CAPTION
        @url     = $1
        @caption = $5
      elsif markup =~ IMAGE_URL_WITH_CLASS
        @class = $1
        @url   = $3
      elsif markup =~ IMAGE_URL
        @url = $1
      end
    end
    def render(context)
      if @class
        source = &amp;quot;&amp;lt;figure class=&#39;#{@class}&#39;&amp;gt;&amp;quot;
      else
        source = &amp;quot;&amp;lt;figure&amp;gt;&amp;quot;
      end
      if @link
        source += &amp;quot;&amp;lt;a href=\&amp;quot;#{@link}\&amp;quot;&amp;gt;&amp;quot;
      end
      source += &amp;quot;&amp;lt;img src=\&amp;quot;#{@url}\&amp;quot;&amp;gt;&amp;quot;
      if @link
        source += &amp;quot;&amp;lt;/a&amp;gt;&amp;quot;
      end
      source += &amp;quot;&amp;lt;figcaption&amp;gt;#{@caption}&amp;lt;/figcaption&amp;gt;&amp;quot; if @caption
      source += &amp;quot;&amp;lt;/figure&amp;gt;&amp;quot;
      source
    end
  end
end
Liquid::Template.register_tag(&#39;image&#39;, Jekyll::ImageTag)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is written as this Hugo shortcode:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- image --&amp;gt;
&amp;lt;figure {{ with .Get &amp;quot;class&amp;quot; }}class=&amp;quot;{{.}}&amp;quot;{{ end }}&amp;gt;
    {{ with .Get &amp;quot;link&amp;quot;}}&amp;lt;a href=&amp;quot;{{.}}&amp;quot;&amp;gt;{{ end }}
        &amp;lt;img src=&amp;quot;{{ .Get &amp;quot;src&amp;quot; }}&amp;quot; {{ if or (.Get &amp;quot;alt&amp;quot;) (.Get &amp;quot;caption&amp;quot;) }}alt=&amp;quot;{{ with .Get &amp;quot;alt&amp;quot;}}{{.}}{{else}}{{ .Get &amp;quot;caption&amp;quot; }}{{ end }}&amp;quot;{{ end }} /&amp;gt;
    {{ if .Get &amp;quot;link&amp;quot;}}&amp;lt;/a&amp;gt;{{ end }}
    {{ if or (or (.Get &amp;quot;title&amp;quot;) (.Get &amp;quot;caption&amp;quot;)) (.Get &amp;quot;attr&amp;quot;)}}
    &amp;lt;figcaption&amp;gt;{{ if isset .Params &amp;quot;title&amp;quot; }}
        {{ .Get &amp;quot;title&amp;quot; }}{{ end }}
        {{ if or (.Get &amp;quot;caption&amp;quot;) (.Get &amp;quot;attr&amp;quot;)}}&amp;lt;p&amp;gt;
        {{ .Get &amp;quot;caption&amp;quot; }}
        {{ with .Get &amp;quot;attrlink&amp;quot;}}&amp;lt;a href=&amp;quot;{{.}}&amp;quot;&amp;gt; {{ end }}
            {{ .Get &amp;quot;attr&amp;quot; }}
        {{ if .Get &amp;quot;attrlink&amp;quot;}}&amp;lt;/a&amp;gt; {{ end }}
        &amp;lt;/p&amp;gt; {{ end }}
    &amp;lt;/figcaption&amp;gt;
    {{ end }}
&amp;lt;/figure&amp;gt;
&amp;lt;!-- image --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;usage&#34;&gt;Usage&lt;/h3&gt;

&lt;p&gt;I simply changed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% image full http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg &amp;quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were &amp;quot;having fun&amp;quot; and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.&amp;quot; -&amp;gt;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/ %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to this (this example uses a slightly extended version named &lt;code&gt;fig&lt;/code&gt;, different than the built-in &lt;code&gt;figure&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{% fig class=&amp;quot;full&amp;quot; src=&amp;quot;http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg&amp;quot; title=&amp;quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were having fun and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.&amp;quot; link=&amp;quot;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/&amp;quot; %}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As a bonus, the shortcode named parameters are, arguably, more readable.&lt;/p&gt;

&lt;h2 id=&#34;finishing-touches&#34;&gt;Finishing touches&lt;/h2&gt;

&lt;h3 id=&#34;fix-content&#34;&gt;Fix content&lt;/h3&gt;

&lt;p&gt;Depending on the amount of customization that was done with each post with Jekyll, this step will require more or less effort. There are no hard and fast rules here except that &lt;code&gt;hugo server --watch&lt;/code&gt; is your friend. Test your changes and fix errors as needed.&lt;/p&gt;

&lt;h3 id=&#34;clean-up&#34;&gt;Clean up&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll want to remove the Jekyll configuration at this point. If you have anything else that isn&amp;rsquo;t used, delete it.&lt;/p&gt;

&lt;h2 id=&#34;a-practical-example-in-a-diff&#34;&gt;A practical example in a diff&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://heyitsalex.net/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Hey, it&amp;rsquo;s Alex&lt;/a&gt; was migrated in less than a &lt;em&gt;father-with-kids day&lt;/em&gt; from Jekyll to Hugo. You can see all the changes (and screw-ups) by looking at this &lt;a href=&#34;https://github.com/alexandre-normand/alexandre-normand/compare/869d69435bd2665c3fbf5b5c78d4c22759d7613a...b7f6605b1265e83b4b81495423294208cc74d610&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;diff&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>R Data Types</title>
      <link>http://ericpena.github.io/2019/r-data-types/</link>
      <pubDate>Mon, 04 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://ericpena.github.io/2019/r-data-types/</guid>
      <description>

&lt;h1 id=&#34;truth-is-ever-to-be-found-in-simplicity-and-not-in-the-multiplicity-and-confusion-of-things-br-isaac-newton&#34;&gt;&amp;ldquo;Truth is ever to be found in simplicity, and not in the multiplicity and confusion of things.&amp;rdquo;&lt;br&gt;Isaac Newton&lt;/h1&gt;

&lt;p&gt;I approached R in the same way I would any language. I immediately delve into for-loops, conditional statements, user-defined functions, classes, and so on. I didn&amp;rsquo;t pay much attention to data types at first - assuming they&amp;rsquo;re not much different than what I&amp;rsquo;ve seen already. I found myself using dataframes and matricies often with low confidence and a lingering confusion. I needed to know how these R data structures were related. I finally created these notes for myself to get a grip on the topic. Hopefully you find value in them as well.&lt;/p&gt;

&lt;p&gt;The data structures we will cover:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#vector&#34;&gt;Vectors&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#matrix&#34;&gt;Matricies&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#array&#34;&gt;Arrays&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#list&#34;&gt;Lists&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#dataframe&#34;&gt;Data Frames&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#factor&#34;&gt;Factors&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#table&#34;&gt;Tables&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For each data type, we will review the basics of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Creation&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Adding Element&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Deleting Elements&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Indexing&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Filtering&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;and More&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h1 id=&#34;a-name-vector-span-style-color-2980b9-vectors-span-a&#34;&gt;&lt;a name=&#34;vector&#34;&gt;&lt;span style=&#34;color: #2980B9&#34;&gt;Vectors&lt;/span&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-introduction-span&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Introduction&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;All elements in an R vector must have the same mode: &lt;em&gt;integer&lt;/em&gt;, &lt;em&gt;numeric&lt;/em&gt;, &lt;em&gt;character&lt;/em&gt;, &lt;em&gt;logical&lt;/em&gt;, &lt;em&gt;complex&lt;/em&gt;, etc.&lt;/p&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-creation-span&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Creation&lt;/span&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- c(88, 12, 23, 74)
x
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 88 12 23 74
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-adding-element-span&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Adding Element&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Adding -44 to vector &lt;code&gt;x&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- c(x,-44)
x
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1]  88  12  23  74 -44
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x[5] &amp;lt;- -44
x
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1]  88  12  23  74 -44
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-remove-element-span&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Remove Element&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Remove 23 from &lt;code&gt;x&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- x[-3]
x
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1]  88  12  74 -44
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s possible to remove several items at once:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- x[-3:-5]
x
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 88 12
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-indexing-span&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Indexing&lt;/span&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- rep(1,10)
x[4] &amp;lt;- 3
x
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##  [1] 1 1 1 3 1 1 1 1 1 1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x[4]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 3
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-filtering-span&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Filtering&lt;/span&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x[6] &amp;lt;- 5
x[9] &amp;lt;- 2
x[x &amp;gt; 2]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 3 5
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-combining-vectors-span&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Combining Vectors&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Find the length of a vector with &lt;code&gt;length(x)&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;When adding two vectors, the lengths of the vectors must be the same or one must be a multiple length of the other. When a vector isn&amp;rsquo;t long enough to add to another vectors, it will keep repeating itself however many times it needs in order for the lengths to match.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;y &amp;lt;- x + x; y
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##  [1]  2  2  2  6  2 10  2  2  4  2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;z &amp;lt;- x + c(1,2,3,4,5); z
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##  [1] 2 3 4 7 6 6 3 4 6 6
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;error &amp;lt;- x + c(1,2,3,4); error
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Warning in x + c(1, 2, 3, 4): longer object length is not a multiple of
## shorter object length

##  [1] 2 3 4 7 2 7 4 5 3 3
&lt;/code&gt;&lt;/pre&gt;

&lt;hr&gt;

&lt;h1 id=&#34;a-name-matrix-span-style-color-2980b9-matricies-span-a&#34;&gt;&lt;a name=&#34;matrix&#34;&gt;&lt;span style=&#34;color: #2980B9&#34;&gt;Matricies&lt;/span&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-introduction-span-1&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Introduction&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;A matrix is essentially a vector with two attributes. All the columns in a matrix must have the same mode: &lt;em&gt;integer&lt;/em&gt;, &lt;em&gt;numeric&lt;/em&gt;, &lt;em&gt;character&lt;/em&gt;, &lt;em&gt;logical&lt;/em&gt;, &lt;em&gt;complex&lt;/em&gt;, etc. in the same way it does for a vector. Matricies are special cases of a more general R type of object: &lt;em&gt;arrays&lt;/em&gt; - which we will read about next. Arrays can be multidimensional. ### &lt;span style=&#34;color:#E74C3C&#34;&gt;Creation&lt;/span&gt; One way to create a matrix:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;y &amp;lt;- matrix(c(1,2,3,4), nrow = 2, ncol = 2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or simply:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;y &amp;lt;- matrix(c(1,2,3,4), nrow = 2)
y
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##      [,1] [,2]
## [1,]    1    3
## [2,]    2    4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using the &lt;code&gt;byrow&lt;/code&gt; argument (default = FALSE):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;m &amp;lt;- matrix(c(1,2,3,4,5,6), nrow = 2, byrow = T)
m
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##      [,1] [,2] [,3]
## [1,]    1    2    3
## [2,]    4    5    6
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-adding-and-removing-rows-and-columns-span&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Adding and Removing Rows and Columns&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Rows and columns may be added and deleting from a matrix with operations analogous to the vector operations of adding and deleting. These functions are &lt;code&gt;rbind&lt;/code&gt; and &lt;code&gt;cbind&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Adding a column:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ones_column &amp;lt;- matrix(rep(1,2)); ones_column; m
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##      [,1]
## [1,]    1
## [2,]    1

##      [,1] [,2] [,3]
## [1,]    1    2    3
## [2,]    4    5    6
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;cbind(m, ones_column)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##      [,1] [,2] [,3] [,4]
## [1,]    1    2    3    1
## [2,]    4    5    6    1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Adding a row: (don&amp;rsquo;t forgot to adjust the row number: &lt;code&gt;nrow = 1&lt;/code&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ones_row &amp;lt;- matrix(rep(1,3), nrow = 1); ones_row; m
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##      [,1] [,2] [,3]
## [1,]    1    1    1

##      [,1] [,2] [,3]
## [1,]    1    2    3
## [2,]    4    5    6
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;rbind(ones_row, m)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##      [,1] [,2] [,3]
## [1,]    1    1    1
## [2,]    1    2    3
## [3,]    4    5    6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Rows may be added by creating matricies and copying:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;new_matrix &amp;lt;- matrix(nrow = 3, ncol = 3)

addded_row &amp;lt;- matrix(c(7,8,9), nrow = 1)

new_matrix[1:2,1:3] &amp;lt;- m
new_matrix[3,1:3] &amp;lt;- addded_row
new_matrix
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##      [,1] [,2] [,3]
## [1,]    1    2    3
## [2,]    4    5    6
## [3,]    7    8    9
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can use &lt;code&gt;rbind&lt;/code&gt; and &lt;code&gt;cbind&lt;/code&gt; to reassign values. This is a form of deleting data.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;m &amp;lt;- matrix(1:6, nrow = 3); m
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##      [,1] [,2]
## [1,]    1    4
## [2,]    2    5
## [3,]    3    6
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;m &amp;lt;- m[c(1,3),]; m
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##      [,1] [,2]
## [1,]    1    4
## [2,]    3    6
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-indexing-span-1&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Indexing&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;To retrieve information from a matrix:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;m[,2]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 4 6
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;m[2,]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 3 6
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;m[2,2]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Values may be changed in a matrix as well:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;m[2,2] &amp;lt;- 66; m
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##      [,1] [,2]
## [1,]    1    4
## [2,]    3   66
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-filtering-span-1&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Filtering&lt;/span&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- matrix(c(1,2,3,2,3,4), nrow = 3, byrow = F); x
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##      [,1] [,2]
## [1,]    1    2
## [2,]    2    3
## [3,]    3    4
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x[x[,2] &amp;gt;= 3]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 2 3 3 4
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;j &amp;lt;- x[,2] &amp;gt;= 3
x[j,]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##      [,1] [,2]
## [1,]    2    3
## [2,]    3    4
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-matrix-math-span&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Matrix Math&lt;/span&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;y
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##      [,1] [,2]
## [1,]    1    3
## [2,]    2    4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mathematical Matrix Multiplication&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;y %*% y
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##      [,1] [,2]
## [1,]    7   15
## [2,]   10   22
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mathematical Muliplication of Matrix by Scalar&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;3*y
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##      [,1] [,2]
## [1,]    3    9
## [2,]    6   12
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mathematical Matrix Addition&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;y + y
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##      [,1] [,2]
## [1,]    2    6
## [2,]    4    8
&lt;/code&gt;&lt;/pre&gt;

&lt;hr&gt;

&lt;h1 id=&#34;a-name-array-span-style-color-2980b9-arrays-span-a&#34;&gt;&lt;a name=&#34;array&#34;&gt;&lt;span style=&#34;color: #2980B9&#34;&gt;Arrays&lt;/span&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-introduction-span-2&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Introduction&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;The mechanics of an array is very similar to that of a matrix in R. Unlike a matrix, an array can represent data in higher than two dimensions. We may build a three-dimensional array by conbining two matricies, we can build four-dimensional arrays by combining two or more three-dimensional arrays, and so on.&lt;/p&gt;

&lt;hr&gt;

&lt;h1 id=&#34;a-name-list-span-style-color-2980b9-lists-span-a&#34;&gt;&lt;a name=&#34;list&#34;&gt;&lt;span style=&#34;color: #2980B9&#34;&gt;Lists&lt;/span&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-introduction-span-3&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Introduction&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;List are unique in that not all elements have to be of the same mode. List structures can combine different types. An R list is similar to a Python dictionary or C struct. List form the foundation for data frames, object oriented programming (R classes), and more.&lt;/p&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-creation-span-1&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Creation&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;If we wanted to create an employee database, we could start with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;j &amp;lt;- list(name = &amp;quot;Eric&amp;quot;, salary = 45000, union = T)
j
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## $name
## [1] &amp;quot;Eric&amp;quot;
## 
## $salary
## [1] 45000
## 
## $union
## [1] TRUE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The component names are called &lt;em&gt;tags&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-adding-element-span-1&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Adding Element&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;New components can be added after a list is created:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;z &amp;lt;- list(a = &amp;quot;abc&amp;quot;, b = 12)
z
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## $a
## [1] &amp;quot;abc&amp;quot;
## 
## $b
## [1] 12
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;z$c &amp;lt;- &amp;quot;sailing&amp;quot; # add a c component
z
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## $a
## [1] &amp;quot;abc&amp;quot;
## 
## $b
## [1] 12
## 
## $c
## [1] &amp;quot;sailing&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Adding component can also be done via a vector index:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;z[[4]] &amp;lt;- 28
z[5:7] &amp;lt;- c(F,T,T)
z
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## $a
## [1] &amp;quot;abc&amp;quot;
## 
## $b
## [1] 12
## 
## $c
## [1] &amp;quot;sailing&amp;quot;
## 
## [[4]]
## [1] 28
## 
## [[5]]
## [1] FALSE
## 
## [[6]]
## [1] TRUE
## 
## [[7]]
## [1] TRUE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also concatenate lists:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;cat &amp;lt;- c(list(&amp;quot;Joe&amp;quot;, 55000, T), list(5)); cat
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [[1]]
## [1] &amp;quot;Joe&amp;quot;
## 
## [[2]]
## [1] 55000
## 
## [[3]]
## [1] TRUE
## 
## [[4]]
## [1] 5
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-remove-element-span-1&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Remove Element&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;You can delete a list component by setting it equal to &lt;code&gt;NULL&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;z$b &amp;lt;- NULL
z
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## $a
## [1] &amp;quot;abc&amp;quot;
## 
## $c
## [1] &amp;quot;sailing&amp;quot;
## 
## [[3]]
## [1] 28
## 
## [[4]]
## [1] FALSE
## 
## [[5]]
## [1] TRUE
## 
## [[6]]
## [1] TRUE
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-indexing-span-2&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Indexing&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;You can access a list component in several different ways:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;j$salary
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 45000
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;j[[&amp;quot;salary&amp;quot;]]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 45000
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;j[[2]]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 45000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;What&amp;rsquo;s the deal with the single and double brackets?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If single brackets &lt;code&gt;[ ]&lt;/code&gt; are used, the result is another list - a sublist of the original.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;j1 &amp;lt;- j[1:2]; j1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## $name
## [1] &amp;quot;Eric&amp;quot;
## 
## $salary
## [1] 45000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If double brackets &lt;code&gt;[[ ]]&lt;/code&gt; are used, it is for referring to a single component and is return in the type of the component.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;j[[2]]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 45000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following returns an error since it&amp;rsquo;s trying to return several components using a function that is meant to return one:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# j[[1:2]]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-filtering-span-2&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Filtering&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Accessing list components:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;names(j)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;name&amp;quot;   &amp;quot;salary&amp;quot; &amp;quot;union&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can also get the specific values instead:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ulj &amp;lt;- unlist(j); ulj
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##    name  salary   union 
##  &amp;quot;Eric&amp;quot; &amp;quot;45000&amp;quot;  &amp;quot;TRUE&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each values above has a name. This name may be removed with the following function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;names(ulj) &amp;lt;- NULL
ulj
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Eric&amp;quot;  &amp;quot;45000&amp;quot; &amp;quot;TRUE&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;using-lapply-and-sapply-functions&#34;&gt;Using &lt;code&gt;lapply()&lt;/code&gt; and &lt;code&gt;sapply()&lt;/code&gt; functions&lt;/h5&gt;

&lt;p&gt;This applies a specific function on each of the compoenents of a list and returns another list:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;lapply(list(1:3,25:29), median)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [[1]]
## [1] 2
## 
## [[2]]
## [1] 27
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;sapply()&lt;/code&gt; returns a vector-valued answer:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sapply(list(1:3,25:29), median)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1]  2 27
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-recursive-lists-span&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Recursive Lists&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;You can have lists within lists:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;b &amp;lt;- list(u = 5, v = 12)
c &amp;lt;- list(w = 13)
a &amp;lt;- list(b, c)
a
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [[1]]
## [[1]]$u
## [1] 5
## 
## [[1]]$v
## [1] 12
## 
## 
## [[2]]
## [[2]]$w
## [1] 13
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;TIP: The concatenate function c() has an optional argument &lt;code&gt;recursive&lt;/code&gt;, which controls whether &lt;em&gt;flattening&lt;/em&gt; occurs when recursive lists are combined.&lt;/p&gt;

&lt;hr&gt;

&lt;h1 id=&#34;a-name-dataframe-span-style-color-2980b9-data-frames-span-a&#34;&gt;&lt;a name=&#34;dataframe&#34;&gt;&lt;span style=&#34;color: #2980B9&#34;&gt;Data Frames&lt;/span&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-introduction-span-4&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Introduction&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Data frames are similar to a two dimensional matrix in that it contains rows and columns structure. However, data frame are heterogeneous; columns can be different modes. Technically, a data frame is a list whose components are equal-lengthed vectors as the columns of the data frame. Data frame are commonly used when doing data manipulation and other data analysis techniques in R.&lt;/p&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-creation-span-2&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Creation&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Creating a data frame from scratch:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;scientists &amp;lt;- c(&amp;quot;Einstein&amp;quot;, &amp;quot;Newton&amp;quot;)
born &amp;lt;- c(1879, 1642)

d &amp;lt;- data.frame(scientists, born, stringsAsFactors = FALSE)
d
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##   scientists born
## 1   Einstein 1879
## 2     Newton 1642
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the named argument &lt;code&gt;stringsAsFactors&lt;/code&gt; is not specified, then by default, &lt;code&gt;stringsAsFactors&lt;/code&gt; will be TRUE.&lt;/p&gt;

&lt;p&gt;Data frames can also be created from external files (.csv, .mtp, .xls, .spss, .txt) using: &lt;br&gt; &lt;code&gt;mydata = read.csv(&amp;quot;mydata.csv&amp;quot;, header = TRUE)&lt;/code&gt;&lt;br&gt; &lt;code&gt;mydata = read.mtp(&amp;quot;mydata.mtp&amp;quot;)  # read from .mtp file&lt;/code&gt;&lt;br&gt; &lt;code&gt;mydata = read.xls(&amp;quot;mydata.xls&amp;quot;)  # read from first sheet&lt;/code&gt;&lt;br&gt; &lt;code&gt;mydata = read.spss(&amp;quot;myfile&amp;quot;, to.data.frame=TRUE)&lt;/code&gt;&lt;br&gt; &lt;code&gt;mydata = read.table(&amp;quot;mydata.txt&amp;quot;)&lt;/code&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;and many more options.&lt;/p&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-adding-element-span-2&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Adding Element&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;rbind()&lt;/code&gt; and &lt;code&gt;cbind()&lt;/code&gt; matrix functions also work in data frames to add new rows or columns of the same length.&lt;/p&gt;

&lt;p&gt;Adding a new row:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;d1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##   kids ages
## 1 jack   12
## 2 Jill   10
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;rbind(d1, list(&amp;quot;laura&amp;quot;, 19))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##    kids ages
## 1  jack   12
## 2  Jill   10
## 3 laura   19
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Adding a column&lt;/p&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-remove-element-span-2&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Remove Element&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Data deletion in a data frame is similar to that of a vector.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;d2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##    kids ages
## 1  jack   12
## 2  Jill   10
## 3 laura   19
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;d2 &amp;lt;- d2[-2,]
d2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##    kids ages
## 1  jack   12
## 3 laura   19
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-indexing-span-3&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Indexing&lt;/span&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;d[[1]]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Einstein&amp;quot; &amp;quot;Newton&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;d$scientists
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Einstein&amp;quot; &amp;quot;Newton&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We may also access elements in a matrix-like way we well:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;d[,1]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Einstein&amp;quot; &amp;quot;Newton&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It can be helpful to know the structure of the data frame and is easy to achieve:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str(d)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## &#39;data.frame&#39;:    2 obs. of  2 variables:
##  $ scientists: chr  &amp;quot;Einstein&amp;quot; &amp;quot;Newton&amp;quot;
##  $ born      : num  1879 1642
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-filtering-span-3&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Filtering&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at how to filter data in a data frame:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;cars &amp;lt;- cars[c(&amp;quot;mpg&amp;quot;, &amp;quot;hp&amp;quot;, &amp;quot;wt&amp;quot;,&amp;quot;cyl&amp;quot;)]
head(cars)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##                    mpg  hp    wt cyl
## Mazda RX4         21.0 110 2.620   6
## Mazda RX4 Wag     21.0 110 2.875   6
## Datsun 710        22.8  93 2.320   4
## Hornet 4 Drive    21.4 110 3.215   6
## Hornet Sportabout 18.7 175 3.440   8
## Valiant           18.1 105 3.460   6
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;cars[cars$cyl == 8,]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##                      mpg  hp    wt cyl
## Hornet Sportabout   18.7 175 3.440   8
## Duster 360          14.3 245 3.570   8
## Merc 450SE          16.4 180 4.070   8
## Merc 450SL          17.3 180 3.730   8
## Merc 450SLC         15.2 180 3.780   8
## Cadillac Fleetwood  10.4 205 5.250   8
## Lincoln Continental 10.4 215 5.424   8
## Chrysler Imperial   14.7 230 5.345   8
## Dodge Challenger    15.5 150 3.520   8
## AMC Javelin         15.2 150 3.435   8
## Camaro Z28          13.3 245 3.840   8
## Pontiac Firebird    19.2 175 3.845   8
## Ford Pantera L      15.8 264 3.170   8
## Maserati Bora       15.0 335 3.570   8
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;cars[,c(&amp;quot;mpg&amp;quot;, &amp;quot;hp&amp;quot;)][cars$wt &amp;lt;= 4,]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##                    mpg  hp
## Mazda RX4         21.0 110
## Mazda RX4 Wag     21.0 110
## Datsun 710        22.8  93
## Hornet 4 Drive    21.4 110
## Hornet Sportabout 18.7 175
## Valiant           18.1 105
## Duster 360        14.3 245
## Merc 240D         24.4  62
## Merc 230          22.8  95
## Merc 280          19.2 123
## Merc 280C         17.8 123
## Merc 450SL        17.3 180
## Merc 450SLC       15.2 180
## Fiat 128          32.4  66
## Honda Civic       30.4  52
## Toyota Corolla    33.9  65
## Toyota Corona     21.5  97
## Dodge Challenger  15.5 150
## AMC Javelin       15.2 150
## Camaro Z28        13.3 245
## Pontiac Firebird  19.2 175
## Fiat X1-9         27.3  66
## Porsche 914-2     26.0  91
## Lotus Europa      30.4 113
## Ford Pantera L    15.8 264
## Ferrari Dino      19.7 175
## Maserati Bora     15.0 335
## Volvo 142E        21.4 109
&lt;/code&gt;&lt;/pre&gt;

&lt;hr&gt;

&lt;h1 id=&#34;a-name-factor-span-style-color-2980b9-factors-span-a&#34;&gt;&lt;a name=&#34;factor&#34;&gt;&lt;span style=&#34;color: #2980B9&#34;&gt;Factors&lt;/span&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-introduction-span-5&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Introduction&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;The motivation for factors comes from the concept of categorical data in statistics. An R &lt;code&gt;factor&lt;/code&gt; may be viewed as a vector with more information added. The extra information consists of a record of the distinct values on that vector, called levels.&lt;/p&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-creation-span-3&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Creation&lt;/span&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- c(5, 12, 13, 12)
xf &amp;lt;- factor(x)
xf
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 5  12 13 12
## Levels: 5 12 13
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The distinct values in xf: 5, 12, and 13 are the levels&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str(xf)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##  Factor w/ 3 levels &amp;quot;5&amp;quot;,&amp;quot;12&amp;quot;,&amp;quot;13&amp;quot;: 1 2 3 2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;unclass(xf)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 1 2 3 2
## attr(,&amp;quot;levels&amp;quot;)
## [1] &amp;quot;5&amp;quot;  &amp;quot;12&amp;quot; &amp;quot;13&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;length(xf)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 4
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-adding-element-span-3&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Adding Element&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Future new levels can be anticipated as well:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- c(5, 12, 13, 12)
xff &amp;lt;- factor(x, levels = c(5, 12, 13, 88))
xff
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 5  12 13 12
## Levels: 5 12 13 88
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;xff[2] &amp;lt;- 88
xff
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 5  88 13 12
## Levels: 5 12 13 88
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Although you cannot add a value that doesn&amp;rsquo;t have a level associated with it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;xff[2] &amp;lt;- 28
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## invalid factor level, NA generated
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-remove-element-span-3&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Remove Element&lt;/span&gt;&lt;/h3&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-indexing-span-4&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Indexing&lt;/span&gt;&lt;/h3&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-filtering-span-4&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Filtering&lt;/span&gt;&lt;/h3&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-math-span&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Math&lt;/span&gt;&lt;/h3&gt;

&lt;hr&gt;

&lt;h1 id=&#34;a-name-table-span-style-color-2980b9-tables-span-a&#34;&gt;&lt;a name=&#34;table&#34;&gt;&lt;span style=&#34;color: #2980B9&#34;&gt;Tables&lt;/span&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-introduction-span-6&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Introduction&lt;/span&gt;&lt;/h3&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-creation-span-4&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Creation&lt;/span&gt;&lt;/h3&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-adding-element-span-4&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Adding Element&lt;/span&gt;&lt;/h3&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-remove-element-span-4&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Remove Element&lt;/span&gt;&lt;/h3&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-indexing-span-5&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Indexing&lt;/span&gt;&lt;/h3&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-filtering-span-5&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Filtering&lt;/span&gt;&lt;/h3&gt;

&lt;h3 id=&#34;span-style-color-e74c3c-math-span-1&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Math&lt;/span&gt;&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>Mathematics of Network Theory</title>
      <link>http://ericpena.github.io/2018/network-theory/</link>
      <pubDate>Sun, 16 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>http://ericpena.github.io/2018/network-theory/</guid>
      <description>

&lt;p&gt;Graphs may be represented in the form of a matrix. Main types of graphs that may be represented are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Simple Graph&lt;/li&gt;
&lt;li&gt;Multigraph&lt;/li&gt;
&lt;li&gt;Directed Graph&lt;/li&gt;
&lt;li&gt;Weighted Graph&lt;/li&gt;
&lt;li&gt;Bipartite Graph&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;directed-graph&#34;&gt;Directed Graph&lt;/h3&gt;

&lt;p&gt;Directed graphs are graphs that contain edges with direction. Vertices may have inward and outward edges.&lt;/p&gt;

&lt;p&gt;Unlike adjacency matricies for simped graphs, adjacency matricies for directed graphs are non-symmetric. Elements of an adjacency matrix for a directed graph may be denoted as:
$$A_{ij}$$
which represents an edge from vertex $j$ to $i$.&lt;/p&gt;

&lt;p&gt;\begin{center}
\includegraphics[scale=.5]{Images/DirectedGraph1.jpg}
\end{center}
\begin{center}
Figure 1.0 Directed Graph with four vertices
\end{center}&lt;/p&gt;

&lt;p&gt;The corresponding adjacency matrix for the graph above is:
$$A = \begin{pmatrix}0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0\\ 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0\\ 1 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0\\ 1 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0 \end{pmatrix}$$&lt;/p&gt;

&lt;h3 id=&#34;cocitation&#34;&gt;Cocitation&lt;/h3&gt;

&lt;p&gt;The cocitation of two vertices $i$ and $j$ in a directed network is the number of vertices that have outgoing edges pointing to both $i$ and $j$. We can see that:&lt;/p&gt;

&lt;div&gt;$$A_{ik}A_{jk} = 1$$&lt;/div&gt;

&lt;p&gt;if $i$ and $j$ are both cited by $k$. If we sum over all these elements we get the following relation:&lt;/p&gt;

&lt;div&gt;$$C_{ij} = \sum\limits_{k=1}^n A_{ik}A_{jk} = \sum\limits_{k=1}^n A_{ik}A_{kj}^T = AA^T $$&lt;/div&gt;

&lt;p&gt;This is a cocitation network for which there is an edge between $i$ and $j$ if $C_{ij} &amp;gt; 0$, for $i \neq j$.&lt;/p&gt;

&lt;p&gt;The diagonal elements of the cocitation matrix are given by:&lt;/p&gt;

&lt;div&gt;$$C_{ii} = \sum\limits_{k=1}^n A_{ik}^2 = \sum\limits_{k=1}^n A_{ik}$$&lt;/div&gt;

&lt;p&gt;In constructing the cocitation network we ignore these diagonal elements, meaning that the network&amp;rsquo;s adjacency matrix is equal to the cocitation matrix but with all the diagonal elements set to zero.&lt;/p&gt;

&lt;h3 id=&#34;bibliographic-coupling&#34;&gt;Bibliographic Coupling&lt;/h3&gt;

&lt;p&gt;Cocitation and Bibliographic coupling are similar mathematically but give different results. They&amp;rsquo;re both affected by the number of in and out edges. Bibliographic Coupling of two vertices are the number of other vertices to which both $i$ and $j$ point to. Bibliographic Coupling is general more stable since the number of citations can vary with time. Bibliographic Coupling is known at time of publishing and doesn&amp;rsquo;t change at all. This may or may not be a good thing depending on the situation. Mathematically, it can be described by the following:&lt;/p&gt;

&lt;div&gt;$$B_{ij} = \sum\limits_{k=1}^n A_{ki}A_{kj} = \sum\limits_{k=1}^n A_{ik}^TA_{kj} = A^TA $$&lt;/div&gt;

&lt;p&gt;The diagonal elements of $\textbf{B}$ are:&lt;/p&gt;

&lt;div&gt;$$B_{ii} = \sum\limits_{k=1}^n A_{ki}^2 = \sum\limits_{k=1}^n A_{ki}$$&lt;/div&gt;

&lt;p&gt;$B_{ii}$ is equal to the number of other vertices that vertex $i$ points to - the number of papers $i$ cites.&lt;/p&gt;

&lt;p&gt;\begin{center}
\includegraphics[scale=.15]{Images/DirectedGraph2.jpg}
\end{center}
\begin{center}
Figure 1.1 Shows cocitation and bibliographic coupling network comparison
\end{center}&lt;/p&gt;

&lt;h3 id=&#34;hypergraphs&#34;&gt;Hypergraphs&lt;/h3&gt;

&lt;p&gt;Networks with link that join more than two vertices are called hypergraphs. These types of graphs are useful when representing family relations for example. Edges that relate more than two vertices are called hyperedges. In sociology, these networks may be called &lt;em&gt;affiliation networks&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;bipartite-networks&#34;&gt;Bipartite Networks&lt;/h3&gt;

&lt;p&gt;Hypergraphs may be difficult to deal with and represent mathematically but a tool that can help are bipartite graphs - a way of conveniently representing the hypergraph structure. In sociology, this may be called: &lt;em&gt;two-mode networks&lt;/em&gt;. Edges only exist between two vertices of unlike-types.&lt;/p&gt;

&lt;p&gt;The adjacency matrix for a bipartite graph is a rectangular matrix called an &lt;em&gt;incidence matrix&lt;/em&gt; which is a $g$ by $n$ matrix where $g$ is the number of groups and $n$ are the number of members in the groups.&lt;/p&gt;

&lt;div&gt;$$B_{ij} = \begin{cases} 
      1, &amp; \textit{if vertex j belongs to group i} \\
      0, &amp; \textit{otherwise}
\end{cases}$$&lt;/div&gt;

&lt;p&gt;\begin{center}
\includegraphics[scale=.5]{Images/BipartiteGraph1.jpg}
\end{center}
\begin{center}
Figure 1.2 Bipartite Graph
\end{center}&lt;/p&gt;

&lt;p&gt;The adjancency matrix for the bipartite graph above can be written as a $4$ by $5$ matrix:&lt;/p&gt;

&lt;p&gt;$$B = \begin{pmatrix}1 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1 &amp;amp; 0\\1 &amp;amp; 1 &amp;amp; 1 &amp;amp; 1 &amp;amp; 0\\0 &amp;amp; 1 &amp;amp; 1 &amp;amp; 0 &amp;amp; 1\\0 &amp;amp; 0 &amp;amp; 1 &amp;amp; 1 &amp;amp; 1\end{pmatrix}$$&lt;/p&gt;

&lt;p&gt;This is a much easier way of representing the hypergraph of actors to movies for example. For much info, read section 6.6 (p.125) of Networks - An Introduction (Newman).&lt;/p&gt;

&lt;p&gt;The bipartite graph can be broken down even further by making two one-mode projections. One projection can be made with the &lt;em&gt;groups&lt;/em&gt; side and another can be made with &lt;em&gt;members&lt;/em&gt; side. These projects have the benefit of being simpler to study but are less powerful because information is lost through these projections.&lt;/p&gt;

&lt;p&gt;The two one-mode projections in words are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The number of groups for which members $i$ and $j$ are both a part of. This is an $n$ x $n$ matrix: $$P = B^TB$$&lt;/li&gt;
&lt;li&gt;The number of common members of groups $i$ and $j$. This is a $g$ x $g$ matrix: $$P&amp;rsquo;=BB^T$$&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;quick-thought&#34;&gt;Quick Thought&lt;/h4&gt;

&lt;p&gt;Naturally you want to relate this to cociation and bibliographic coupling networks but it may be confusing to do so. The main difference between cocitation and bibliographic coupling is the direction of the arrows. This bipartite network consists of two different types of nodes and un-directed edges. Therefore, you may have some cyclic thinking if you try to relate them too much. Although The &lt;em&gt;first&lt;/em&gt; projection (the one on the members) is similar to the cocitation network in that the diagonals should be ignored and forced to be zero.&lt;/p&gt;

&lt;h4 id=&#34;information-loss&#34;&gt;Information Loss&lt;/h4&gt;

&lt;p&gt;Although these projections make life a little easier, it does come at a cost: loss of information. Some of the things we loose are the number of groups in the network and the exact membership of each group. If we make the projection weighted graphs, we can at least get information as to how many commons groups a pair of vertices share for example.&lt;/p&gt;

&lt;h3 id=&#34;trees&#34;&gt;Trees&lt;/h3&gt;

&lt;p&gt;A &lt;em&gt;tree&lt;/em&gt; is a connected, undirected network that contains no closed loops. Connected means that every vertex in the network is reachable from every other via some path through the network. A network can also consists of two or more parts. If the individual parts of the network are trees, the then network as a whole is considered a forest. There are leaves on a tree - vertices with one edge on them but topologically, there isn&amp;rsquo;t really a root.&lt;/p&gt;

&lt;p&gt;The most important property of a tree is that, since there are no closed loops, there is only one path between any pair of vertices. In a forest, there is at most one path but there may be none.&lt;/p&gt;

&lt;p&gt;Another very useful property of trees is that a tree of $n$ vertices always has $n-1$ edges. The reverse is also true: any connected network with $n$ vertices and $n-1$ edges is a tree. If such a network were not a tree then there must be a loop in the network somewhere, implying that we could remove an edge without disconnecting any part of the network.&lt;/p&gt;

&lt;h3 id=&#34;planar-network&#34;&gt;Planar Network&lt;/h3&gt;

&lt;p&gt;Simply put, a planar network is a network that can be drawn on a plane without having any edges cross. All trees are planar but most of the time, network are not planar (e.g., citation networks, metabolic networks, internet, etc.). Some networks are forced to be planar because of physics space constraints such as rivers or road networks.&lt;/p&gt;

&lt;p&gt;These types of networks play an important role in the &lt;em&gt;four-color theorem&lt;/em&gt; which state that the number of colors required to color a graph in this way is called the chromatic number of the graph and many mathematical results are known about chromatic numbers.&lt;/p&gt;

&lt;p&gt;An important to point out is that there is a method of determining if a network is planar. It&amp;rsquo;s fairly easy to tell by observation if the network is small but when the network is very large, a general method is required.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Kuratowski&amp;rsquo;s Theorem&lt;/em&gt;: Every non-planar network contains a least one subgraph that is an expansion of $K_5$ and $UG$. (Read more about this on p. 132 of Networks - an Introduction (Newman)).&lt;/p&gt;

&lt;h3 id=&#34;degree&#34;&gt;Degree&lt;/h3&gt;

&lt;h4 id=&#34;mean-degree&#34;&gt;Mean Degree&lt;/h4&gt;

&lt;p&gt;We will denote the degree of vertex $i$ by $k_i$. For an undirected graph of n vertices the degree can be written in terms of the adjacency matrix as:&lt;/p&gt;

&lt;div&gt;$$k_i = \sum\limits_{j=1}^n A_{ij}$$&lt;/div&gt;

&lt;p&gt;Every edge in an undirected graph has two ends and if there are m edges in total then there are $2m$ ends of edges. But the number of ends of edges is also equal to the sum of the degrees of all the vertices, so&lt;/p&gt;

&lt;div&gt;$$2m = \sum\limits_{i=1}^n k_i$$&lt;/div&gt;

&lt;p&gt;Another way of writing this that is more intuitive is:&lt;/p&gt;

&lt;div&gt;$$m = \frac{1}{2}\sum\limits_{i=1}^n k_i = \frac{1}{2}\sum\limits_{ij}^n A_{ij}$$&lt;/div&gt;

&lt;p&gt;The mean degree $c$ of an undirected graph is:&lt;/p&gt;

&lt;div&gt;$$c = \frac{1}{n} \sum\limits_{i=1}^n k_i$$&lt;/div&gt;

&lt;p&gt;And combining this with the earlier equation:&lt;/p&gt;

&lt;p&gt;$$c = \frac{2m}{n}$$&lt;/p&gt;

&lt;h4 id=&#34;density&#34;&gt;Density&lt;/h4&gt;

&lt;p&gt;The maximum possible number of edges in a simple graph is $\binom{n}{2} = \frac{1}{2}n(n-1)$. The connectance or density $\rho$ of a graph is the fraction of these edges that are actually present:&lt;/p&gt;

&lt;p&gt;$$\rho = \frac{m}{\binom{n}{2}}=\frac{2m}{n(n-1)}=\frac{c}{n-1}$$&lt;/p&gt;

&lt;p&gt;When the network is sufficiently large, $\rho$ may be approximated with just $\frac{c}{n}$.&lt;/p&gt;

&lt;p&gt;A network where $\rho$ tends to a constant as $n \rightarrow \infty$ is said to be &lt;em&gt;dense&lt;/em&gt;. A network in which $\rho \rightarrow 0$ as $n \rightarrow \infty$ is said to be &lt;em&gt;sparse&lt;/em&gt;.&lt;/p&gt;

&lt;h4 id=&#34;directed-network-degree&#34;&gt;Directed Network Degree&lt;/h4&gt;

&lt;p&gt;Vertex degrees in a directed network are more complicated. They are broken up into &lt;em&gt;in-degree&lt;/em&gt; and &lt;em&gt;out-degree&lt;/em&gt;. If $A_{ij}$ is the adjacency matrix of a directed network, the &lt;em&gt;in&lt;/em&gt; and &lt;em&gt;out&lt;/em&gt; degree can be written as:&lt;/p&gt;

&lt;div&gt;$$k_i^{in} = \sum\limits_{j=1}^n A_{ij},\ \ \  k_j^{out} = \sum\limits_{i=1}^n A_{ij}$$&lt;/div&gt;

&lt;p&gt;We also know the number of edges are:&lt;/p&gt;

&lt;div&gt;$$m = \sum \limits_{i=1}^n k_i^{in} = \sum\limits_{j=1}^n k_j^{out} = \sum \limits_{ij} A_{ij}$$&lt;/div&gt;

&lt;p&gt;As far as the mean degree of directed networks:&lt;/p&gt;

&lt;div&gt;$$c_{in} = \frac{1}{n} \sum\limits_{i=1}^n k_i^{in} = \frac{1}{n} \sum\limits_{j=1}^n k_j^{out} = c_{out}$$&lt;/div&gt;

&lt;p&gt;Combining these two relations, the mean degree can concisely be written as:&lt;/p&gt;

&lt;p&gt;$$c = \frac{m}{n}$$&lt;/p&gt;

&lt;h3 id=&#34;paths&#34;&gt;Paths&lt;/h3&gt;

&lt;p&gt;A path along a network is a route across the network moving from vertex to vertex along the edges. In a directed network, the path can on go in the direction of the edge but can go either way for an undirected network. A path may reach a vertex or go along an edge it has seen before. A path that does not intersect itself is considered a &lt;em&gt;self-avoiding path&lt;/em&gt;. Geodesic paths and Hamiltonian paths are two special cases of self-avoiding paths.&lt;/p&gt;

&lt;p&gt;The number of paths of length $r$ may be important to study and can be calculated for directed and undirected networks. We will use the fact that for directed and undirected networks, $A_{ij}$ is 1 if there is an edge from vertex $j$ to vertex $i$, and 0 otherwise. We can start by asking how many paths of length 2 are there in a network. Imagine we want to study all paths of length 2 from $j$ to $i$ via $k$. The product $A_{ik}A_{kj}$ is 1 where there is a path of length 2 from $j$ to $i$ via $k$, and 0 otherwise.&lt;/p&gt;

&lt;div&gt;$$N_{ij}^{(2)} = \sum\limits_{k=1}^n A_{ik}A_{kj}=\left[A^2\right]_{ij}$$&lt;/div&gt;

&lt;p&gt;We can study the path of length 3 as well. The product $A_{ik}A_{kl}A_{lj}$ is 1 where there exists a path of length 3, and 0 otherwise.&lt;/p&gt;

&lt;div&gt;$$N_{ij}^{(3)} = \sum\limits_{k,l=1}^n A_{ik}A_{kl}A_{lj}=\left[A^3\right]_{ij}$$&lt;/div&gt;

&lt;p&gt;Generalizing to any length $r$ gives:&lt;/p&gt;

&lt;div&gt;$$N_{ij}^{r}=\left[A^r\right]_{ij}$$&lt;/div&gt;

&lt;p&gt;There is a proof of induction on page 137 of Network - An Introduction (Newman).&lt;/p&gt;

&lt;p&gt;Another important thing to consider are loops in a network. The number of loops may be calculated as well.&lt;/p&gt;

&lt;div&gt;$$L_r = \sum\limits_{i=1}^n\left[A^r\right]_{ii}=Tr A^r$$&lt;/div&gt;

&lt;p&gt;There &amp;lsquo;Tr&amp;rsquo; is the trace of a matrix. The number of loops can be written in terms of the eigenvalues of the adjacency matrix as well. The adjacency matrix can be written as $A=UKU^T$ where $U$ is the orthogonal matrix of eigenvectors and $K$ is the orthogonal matrix of eigenvalues:&lt;/p&gt;

&lt;p&gt;$$A^r = (UKU^T)^r = UK^rU^T$$&lt;/p&gt;

&lt;div&gt;$$L_r = Tr(UK^rU^T)=Tr(U^TUK^r)=Tr(k^r)=\sum\limits_i k_i^r$$&lt;/div&gt;

&lt;p&gt;Where $k_i$ is the $i^{th}$ eigenvalue of the adjacency matrix. This applies to directed and undirected graphs. There is one important thing to note when learning about counting the number of loops on length r. For each consideration below, the calculation for determining the number of loops uses the following criteria for counting distinct loops.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Although there are loop paths that have the same vertices and same order, if there are different starting points, then they are considered separate loops.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;$$1\rightarrow 2\rightarrow 3 \rightarrow 1 \ \ \ and \ \ \ 2\rightarrow 3\rightarrow 2 \rightarrow 1$$&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If loops are in the opposite direction, they are counted as distinct loops.
$$1 \rightarrow 2 \rightarrow 3 \rightarrow 1 \ \ \ and \ \ \ 1 \rightarrow 3 \rightarrow 2 \rightarrow 1$$&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;geodesic-paths&#34;&gt;Geodesic Paths&lt;/h3&gt;

&lt;p&gt;A geodesic path is shortest network distance between vertices in question. This is also called &lt;em&gt;geodesic distance&lt;/em&gt; or &lt;em&gt;shortest distance&lt;/em&gt;. Mathematically, a geodesic distance is the smallest value of r such that $\left[ A^r \right]_{ij} &amp;gt; 0$ between vertices $i$ and $j$.&lt;/p&gt;

&lt;p&gt;It may be the case that no shortest distance exists (for example: for separate components of the network where the distance may be said to be infinity). Another interesting fact - If a path intesects itself, it has a loop and therefore cannot be a geodesic path since it can be shortened by removing this loop.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;diameter&lt;/em&gt; of a graph is the length of the longest geodesic path between any pair of vertices in the network for which a path actually exists.&lt;/p&gt;

&lt;h3 id=&#34;eulerian-and-hamiltonian-paths&#34;&gt;Eulerian and Hamiltonian Paths&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Eulerian Path&lt;/strong&gt;: a path that traverses each edge in the network exactly once&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hamiltonian Path&lt;/strong&gt;: a path that visits each vertex exactly once&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If there are any vertex degree greater than 2, then the Eulerian path is not self-avoiding since it has to visit vertices more than once in order to traverse tall their edges.&lt;/p&gt;

&lt;h4 id=&#34;kronigsberg-bridges&#34;&gt;Kronigsberg Bridges&lt;/h4&gt;

&lt;p&gt;This problem becomes finding an Eulerian path on this network of bridges and the name is in honor of Euler who presented this problem. Euler observed that since any Eulerian path must both enter and leave every vertex it passes (except for the first and last), there can at most be two vertices with odd degree. All four of the vertices in the Kronigsberg Problem has odd degree. More precisely, there can only be 2 or 0 vertices of odd degree for an Eulerian condition to be possible. With this logic, Euler proved the Kronigsberg problem has no solution.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>http://ericpena.github.io/about/</link>
      <pubDate>Wed, 09 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ericpena.github.io/about/</guid>
      <description>&lt;p&gt;Hugo is the &lt;strong&gt;world’s fastest framework for building websites&lt;/strong&gt;. It is written in Go.&lt;/p&gt;

&lt;p&gt;It makes use of a variety of open source projects including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/russross/blackfriday&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://github.com/russross/blackfriday&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/alecthomas/chroma&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://github.com/alecthomas/chroma&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/muesli/smartcrop&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://github.com/muesli/smartcrop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/cobra&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://github.com/spf13/cobra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/viper&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://github.com/spf13/viper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Learn more and contribute on &lt;a href=&#34;https://github.com/gohugoio&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>http://ericpena.github.io/2014/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ericpena.github.io/2014/goisforlovers/</guid>
      <description>

&lt;p&gt;Hugo uses the excellent &lt;a href=&#34;https://golang.org/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Go&lt;/a&gt; &lt;a href=&#34;https://golang.org/pkg/html/template/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;html/template&lt;/a&gt; library for
its template engine. It is an extremely lightweight engine that provides a very
small amount of logic. In our experience that it is just the right amount of
logic to be able to create a good static website. If you have used other
template systems from different languages or frameworks you will find a lot of
similarities in Go templates.&lt;/p&gt;

&lt;p&gt;This document is a brief primer on using Go templates. The &lt;a href=&#34;https://golang.org/pkg/html/template/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Go docs&lt;/a&gt;
provide more details.&lt;/p&gt;

&lt;h2 id=&#34;introduction-to-go-templates&#34;&gt;Introduction to Go Templates&lt;/h2&gt;

&lt;p&gt;Go templates provide an extremely simple template language. It adheres to the
belief that only the most basic of logic belongs in the template or view layer.
One consequence of this simplicity is that Go templates parse very quickly.&lt;/p&gt;

&lt;p&gt;A unique characteristic of Go templates is they are content aware. Variables and
content will be sanitized depending on the context of where they are used. More
details can be found in the &lt;a href=&#34;https://golang.org/pkg/html/template/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Go docs&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;basic-syntax&#34;&gt;Basic Syntax&lt;/h2&gt;

&lt;p&gt;Golang templates are HTML files with the addition of variables and
functions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Go variables and functions are accessible within {{ }}&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Accessing a predefined variable &amp;ldquo;foo&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ foo }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Parameters are separated using spaces&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Calling the add function with input of 1, 2:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ add 1 2 }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Methods and fields are accessed via dot notation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Accessing the Page Parameter &amp;ldquo;bar&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ .Params.bar }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Parentheses can be used to group items together&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if or (isset .Params &amp;quot;alt&amp;quot;) (isset .Params &amp;quot;caption&amp;quot;) }} Caption {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;variables&#34;&gt;Variables&lt;/h2&gt;

&lt;p&gt;Each Go template has a struct (object) made available to it. In hugo each
template is passed either a page or a node struct depending on which type of
page you are rendering. More details are available on the
&lt;a href=&#34;http://ericpena.github.io/layout/variables&#34;&gt;variables&lt;/a&gt; page.&lt;/p&gt;

&lt;p&gt;A variable is accessed by referencing the variable name.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;title&amp;gt;{{ .Title }}&amp;lt;/title&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Variables can also be defined and referenced.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ $address := &amp;quot;123 Main St.&amp;quot;}}
{{ $address }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;functions&#34;&gt;Functions&lt;/h2&gt;

&lt;p&gt;Go template ship with a few functions which provide basic functionality. The Go
template system also provides a mechanism for applications to extend the
available functions with their own. &lt;a href=&#34;http://ericpena.github.io/layout/functions&#34;&gt;Hugo template
functions&lt;/a&gt; provide some additional functionality we believe
are useful for building websites. Functions are called by using their name
followed by the required parameters separated by spaces. Template
functions cannot be added without recompiling hugo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ add 1 2 }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;includes&#34;&gt;Includes&lt;/h2&gt;

&lt;p&gt;When including another template you will pass to it the data it will be
able to access. To pass along the current context please remember to
include a trailing dot. The templates location will always be starting at
the /layout/ directory within Hugo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ template &amp;quot;chrome/header.html&amp;quot; . }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;logic&#34;&gt;Logic&lt;/h2&gt;

&lt;p&gt;Go templates provide the most basic iteration and conditional logic.&lt;/p&gt;

&lt;h3 id=&#34;iteration&#34;&gt;Iteration&lt;/h3&gt;

&lt;p&gt;Just like in Go, the Go templates make heavy use of range to iterate over
a map, array or slice. The following are different examples of how to use
range.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 1: Using Context&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range array }}
    {{ . }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Example 2: Declaring value variable name&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{range $element := array}}
    {{ $element }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Example 2: Declaring key and value variable name&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{range $index, $element := array}}
    {{ $index }}
    {{ $element }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;conditionals&#34;&gt;Conditionals&lt;/h3&gt;

&lt;p&gt;If, else, with, or, &amp;amp; and provide the framework for handling conditional
logic in Go Templates. Like range, each statement is closed with &lt;code&gt;end&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Go Templates treat the following values as false:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;false&lt;/li&gt;
&lt;li&gt;0&lt;/li&gt;
&lt;li&gt;any array, slice, map, or string of length zero&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Example 1: If&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if isset .Params &amp;quot;title&amp;quot; }}&amp;lt;h4&amp;gt;{{ index .Params &amp;quot;title&amp;quot; }}&amp;lt;/h4&amp;gt;{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Example 2: If -&amp;gt; Else&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if isset .Params &amp;quot;alt&amp;quot; }}
    {{ index .Params &amp;quot;alt&amp;quot; }}
{{else}}
    {{ index .Params &amp;quot;caption&amp;quot; }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Example 3: And &amp;amp; Or&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if and (or (isset .Params &amp;quot;title&amp;quot;) (isset .Params &amp;quot;caption&amp;quot;)) (isset .Params &amp;quot;attr&amp;quot;)}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Example 4: With&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;An alternative way of writing &amp;ldquo;if&amp;rdquo; and then referencing the same value
is to use &amp;ldquo;with&amp;rdquo; instead. With rebinds the context &lt;code&gt;.&lt;/code&gt; within its scope,
and skips the block if the variable is absent.&lt;/p&gt;

&lt;p&gt;The first example above could be simplified as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ with .Params.title }}&amp;lt;h4&amp;gt;{{ . }}&amp;lt;/h4&amp;gt;{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Example 5: If -&amp;gt; Else If&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if isset .Params &amp;quot;alt&amp;quot; }}
    {{ index .Params &amp;quot;alt&amp;quot; }}
{{ else if isset .Params &amp;quot;caption&amp;quot; }}
    {{ index .Params &amp;quot;caption&amp;quot; }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;pipes&#34;&gt;Pipes&lt;/h2&gt;

&lt;p&gt;One of the most powerful components of Go templates is the ability to
stack actions one after another. This is done by using pipes. Borrowed
from unix pipes, the concept is simple, each pipeline&amp;rsquo;s output becomes the
input of the following pipe.&lt;/p&gt;

&lt;p&gt;Because of the very simple syntax of Go templates, the pipe is essential
to being able to chain together function calls. One limitation of the
pipes is that they only can work with a single value and that value
becomes the last parameter of the next pipeline.&lt;/p&gt;

&lt;p&gt;A few simple examples should help convey how to use the pipe.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 1 :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if eq 1 1 }} Same {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is the same as&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ eq 1 1 | if }} Same {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It does look odd to place the if at the end, but it does provide a good
illustration of how to use the pipes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 2 :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ index .Params &amp;quot;disqus_url&amp;quot; | html }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Access the page parameter called &amp;ldquo;disqus_url&amp;rdquo; and escape the HTML.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 3 :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if or (or (isset .Params &amp;quot;title&amp;quot;) (isset .Params &amp;quot;caption&amp;quot;)) (isset .Params &amp;quot;attr&amp;quot;)}}
Stuff Here
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Could be rewritten as&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{  isset .Params &amp;quot;caption&amp;quot; | or isset .Params &amp;quot;title&amp;quot; | or isset .Params &amp;quot;attr&amp;quot; | if }}
Stuff Here
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;context-aka-the-dot&#34;&gt;Context (aka. the dot)&lt;/h2&gt;

&lt;p&gt;The most easily overlooked concept to understand about Go templates is that {{ . }}
always refers to the current context. In the top level of your template this
will be the data set made available to it. Inside of a iteration it will have
the value of the current item. When inside of a loop the context has changed. .
will no longer refer to the data available to the entire page. If you need to
access this from within the loop you will likely want to set it to a variable
instead of depending on the context.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  {{ $title := .Site.Title }}
  {{ range .Params.tags }}
    &amp;lt;li&amp;gt; &amp;lt;a href=&amp;quot;{{ $baseurl }}/tags/{{ . | urlize }}&amp;quot;&amp;gt;{{ . }}&amp;lt;/a&amp;gt; - {{ $title }} &amp;lt;/li&amp;gt;
  {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice how once we have entered the loop the value of {{ . }} has changed. We
have defined a variable outside of the loop so we have access to it from within
the loop.&lt;/p&gt;

&lt;h1 id=&#34;hugo-parameters&#34;&gt;Hugo Parameters&lt;/h1&gt;

&lt;p&gt;Hugo provides the option of passing values to the template language
through the site configuration (for sitewide values), or through the meta
data of each specific piece of content. You can define any values of any
type (supported by your front matter/config format) and use them however
you want to inside of your templates.&lt;/p&gt;

&lt;h2 id=&#34;using-content-page-parameters&#34;&gt;Using Content (page) Parameters&lt;/h2&gt;

&lt;p&gt;In each piece of content you can provide variables to be used by the
templates. This happens in the &lt;a href=&#34;http://ericpena.github.io/content/front-matter&#34;&gt;front matter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;An example of this is used in this documentation site. Most of the pages
benefit from having the table of contents provided. Sometimes the TOC just
doesn&amp;rsquo;t make a lot of sense. We&amp;rsquo;ve defined a variable in our front matter
of some pages to turn off the TOC from being displayed.&lt;/p&gt;

&lt;p&gt;Here is the example front matter:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title: &amp;quot;Permalinks&amp;quot;
date: &amp;quot;2013-11-18&amp;quot;
aliases:
  - &amp;quot;/doc/permalinks/&amp;quot;
groups: [&amp;quot;extras&amp;quot;]
groups_weight: 30
notoc: true
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the corresponding code inside of the template:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  {{ if not .Params.notoc }}
    &amp;lt;div id=&amp;quot;toc&amp;quot; class=&amp;quot;well col-md-4 col-sm-6&amp;quot;&amp;gt;
    {{ .TableOfContents }}
    &amp;lt;/div&amp;gt;
  {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;using-site-config-parameters&#34;&gt;Using Site (config) Parameters&lt;/h2&gt;

&lt;p&gt;In your top-level configuration file (eg, &lt;code&gt;config.yaml&lt;/code&gt;) you can define site
parameters, which are values which will be available to you in chrome.&lt;/p&gt;

&lt;p&gt;For instance, you might declare:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;params:
  CopyrightHTML: &amp;quot;Copyright &amp;amp;#xA9; 2013 John Doe. All Rights Reserved.&amp;quot;
  TwitterUser: &amp;quot;spf13&amp;quot;
  SidebarRecentLimit: 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Within a footer layout, you might then declare a &lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt; which is only
provided if the &lt;code&gt;CopyrightHTML&lt;/code&gt; parameter is provided, and if it is given,
you would declare it to be HTML-safe, so that the HTML entity is not escaped
again.  This would let you easily update just your top-level config file each
January 1st, instead of hunting through your templates.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{if .Site.Params.CopyrightHTML}}&amp;lt;footer&amp;gt;
&amp;lt;div class=&amp;quot;text-center&amp;quot;&amp;gt;{{.Site.Params.CopyrightHTML | safeHtml}}&amp;lt;/div&amp;gt;
&amp;lt;/footer&amp;gt;{{end}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An alternative way of writing the &amp;ldquo;if&amp;rdquo; and then referencing the same value
is to use &amp;ldquo;with&amp;rdquo; instead. With rebinds the context &lt;code&gt;.&lt;/code&gt; within its scope,
and skips the block if the variable is absent:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{with .Site.Params.TwitterUser}}&amp;lt;span class=&amp;quot;twitter&amp;quot;&amp;gt;
&amp;lt;a href=&amp;quot;https://twitter.com/{{.}}&amp;quot; rel=&amp;quot;author&amp;quot;&amp;gt;
&amp;lt;img src=&amp;quot;/images/twitter.png&amp;quot; width=&amp;quot;48&amp;quot; height=&amp;quot;48&amp;quot; title=&amp;quot;Twitter: {{.}}&amp;quot;
 alt=&amp;quot;Twitter&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;
&amp;lt;/span&amp;gt;{{end}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, if you want to pull &amp;ldquo;magic constants&amp;rdquo; out of your layouts, you can do
so, such as in this example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;nav class=&amp;quot;recent&amp;quot;&amp;gt;
  &amp;lt;h1&amp;gt;Recent Posts&amp;lt;/h1&amp;gt;
  &amp;lt;ul&amp;gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}}
    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;{{.RelPermalink}}&amp;quot;&amp;gt;{{.Title}}&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  {{end}}&amp;lt;/ul&amp;gt;
&amp;lt;/nav&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>http://ericpena.github.io/2014/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ericpena.github.io/2014/hugoisforlovers/</guid>
      <description>

&lt;h2 id=&#34;step-1-install-hugo&#34;&gt;Step 1. Install Hugo&lt;/h2&gt;

&lt;p&gt;$$\sum_{i=0}^n i^2 = \frac{(\alpha^2+n)(2n+1)}{6}$$&lt;/p&gt;

&lt;p&gt;$$\Biggl(\biggl(\Bigl(\bigl((x)\bigr)\Bigr)\biggr)\Biggr)$$&lt;/p&gt;

&lt;p&gt;This fraction: $\frac{(n^2+n)(2n+1)}{6}$ is great.&lt;/p&gt;

&lt;p&gt;Go to &lt;a href=&#34;https://github.com/spf13/hugo/releases&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Hugo releases&lt;/a&gt; and download the
appropriate version for your OS and architecture.&lt;/p&gt;

&lt;p&gt;Save it somewhere specific as we will be using it in the next step.&lt;/p&gt;

&lt;p&gt;More complete instructions are available at &lt;a href=&#34;https://gohugo.io/getting-started/installing/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Install Hugo&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;step-2-build-the-docs&#34;&gt;Step 2. Build the Docs&lt;/h2&gt;

&lt;p&gt;Hugo has its own example site which happens to also be the documentation site
you are reading right now.&lt;/p&gt;

&lt;p&gt;Follow the following steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Clone the &lt;a href=&#34;http://github.com/spf13/hugo&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Hugo repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Go into the repo&lt;/li&gt;
&lt;li&gt;Run hugo in server mode and build the docs&lt;/li&gt;
&lt;li&gt;Open your browser to &lt;a href=&#34;http://localhost:1313&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;http://localhost:1313&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Corresponding pseudo commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/spf13/hugo
cd hugo
/path/to/where/you/installed/hugo server --source=./docs
&amp;gt; 29 pages created
&amp;gt; 0 tags index created
&amp;gt; in 27 ms
&amp;gt; Web Server is available at http://localhost:1313
&amp;gt; Press ctrl+c to stop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you&amp;rsquo;ve gotten here, follow along the rest of this page on your local build.&lt;/p&gt;

&lt;h2 id=&#34;step-3-change-the-docs-site&#34;&gt;Step 3. Change the docs site&lt;/h2&gt;

&lt;p&gt;Stop the Hugo process by hitting Ctrl+C.&lt;/p&gt;

&lt;p&gt;Now we are going to run hugo again, but this time with hugo in watch mode.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/path/to/hugo/from/step/1/hugo server --source=./docs --watch
&amp;gt; 29 pages created
&amp;gt; 0 tags index created
&amp;gt; in 27 ms
&amp;gt; Web Server is available at http://localhost:1313
&amp;gt; Watching for changes in /Users/spf13/Code/hugo/docs/content
&amp;gt; Press ctrl+c to stop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Open your &lt;a href=&#34;http://vim.spf13.com&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;favorite editor&lt;/a&gt; and change one of the source
content pages. How about changing this very file to &lt;em&gt;fix the typo&lt;/em&gt;. How about changing this very file to &lt;em&gt;fix the typo&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Content files are found in &lt;code&gt;docs/content/&lt;/code&gt;. Unless otherwise specified, files
are located at the same relative location as the url, in our case
&lt;code&gt;docs/content/overview/quickstart.md&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Change and save this file.. Notice what happened in your terminal.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; Change detected, rebuilding site

&amp;gt; 29 pages created
&amp;gt; 0 tags index created
&amp;gt; in 26 ms
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Refresh the browser and observe that the typo is now fixed.&lt;/p&gt;

&lt;p&gt;Notice how quick that was. Try to refresh the site before it&amp;rsquo;s finished building. I double dare you.
Having nearly instant feedback enables you to have your creativity flow without waiting for long builds.&lt;/p&gt;

&lt;h2 id=&#34;step-4-have-fun&#34;&gt;Step 4. Have fun&lt;/h2&gt;

&lt;p&gt;The best way to learn something is to play with it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introduction aux modèles (Hu)go</title>
      <link>http://ericpena.github.io/2014/goisforlovers.fr/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ericpena.github.io/2014/goisforlovers.fr/</guid>
      <description>

&lt;p&gt;Hugo utilise l&amp;rsquo;excellente librairie &lt;a href=&#34;http://golang.org/&amp;gt;&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;go&lt;/a&gt; &lt;a href=&#34;http://golang.org/pkg/html/template/&amp;gt;&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;html/template&lt;/a&gt; pour
son moteur de modèles. c&amp;rsquo;est un moteur extrêmement léger qui offre un très petit
nombre de fonctions logiques. À notre expérience, c&amp;rsquo;est juste ce qu&amp;rsquo;il faut pour
créer un bon site web statique. Si vous avez déjà utilisé d&amp;rsquo;autre moteurs de
modèles pour différents langages ou frameworks, vous allez retrouver beaucoup de
similitudes avec les modèles go.&lt;/p&gt;

&lt;p&gt;Ce document est une introduction sur l&amp;rsquo;utilisation de Go templates. La
&lt;a href=&#34;http://golang.org/pkg/html/template/&amp;gt;&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;documentation go&lt;/a&gt; fourni plus de détails.&lt;/p&gt;

&lt;h2 id=&#34;introduction-aux-modèles-go&#34;&gt;Introduction aux modèles Go&lt;/h2&gt;

&lt;p&gt;Go templates fournit un langage de modèles très simple. Il adhère à la
conviction que les modèles ou les vues doivent avoir une logique des plus
élémentaires. L&amp;rsquo;une des conséquences de cette simplicité est que les modèles
seront plus rapides a être analysés.&lt;/p&gt;

&lt;p&gt;Une caractéristique unique de Go templates est qu&amp;rsquo;il est conscient du contenu.
Les variables et le contenu va être nettoyé suivant le contexte d&amp;rsquo;utilisation.
Plus de détails sont disponibles dans la &lt;a href=&#34;http://golang.org/pkg/html/template/&amp;gt;&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;documentation go&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;syntaxe-basique&#34;&gt;Syntaxe basique&lt;/h2&gt;

&lt;p&gt;Les modèles en langage Go sont des fichiers HTML avec l&amp;rsquo;ajout de variables et
fonctions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Les variables Go et les fonctions sont accessibles avec {{ }}&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Accès à une variable prédéfinie &amp;ldquo;foo&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ foo }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Les paramètres sont séparés par des espaces&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Appel de la fonction add avec 1 et 2 en argument**&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ add 1 2 }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Les méthodes et les champs sont accessibles par un point&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Accès au paramètre de la page &amp;ldquo;bar&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ .Params.bar }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Les parenthèses peuvent être utilisées pour grouper des éléments ensemble&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if or (isset .Params &amp;quot;alt&amp;quot;) (isset .Params &amp;quot;caption&amp;quot;) }} Caption {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;variables&#34;&gt;Variables&lt;/h2&gt;

&lt;p&gt;Chaque modèle go a une structure (objet) mis à sa disposition. Avec Hugo, à
chaque modèle est passé soit une page, soit une structure de nœud, suivant quel
type de page vous rendez. Plus de détails sont disponibles sur la page des
&lt;a href=&#34;http://ericpena.github.io/layout/variables&#34;&gt;variables&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Une variable est accessible par son nom.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;title&amp;gt;{{ .Title }}&amp;lt;/title&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Les variables peuvent également être définies et appelées.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ $address := &amp;quot;123 Main St.&amp;quot;}}
{{ $address }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;functions&#34;&gt;Functions&lt;/h2&gt;

&lt;p&gt;Go templace est livré avec quelques fonctions qui fournissent des
fonctionnalités basiques. Le système de Go template fourni également un
mécanisme permettant aux applications d&amp;rsquo;étendre les fonctions disponible. Les
&lt;a href=&#34;http://ericpena.github.io/layout/functions&#34;&gt;fonctions de modèle Hugo&lt;/a&gt; fourni quelques fonctionnalités
supplémentaires que nous espérons qu&amp;rsquo;elles seront utiles pour vos sites web.
Les functions sont appelées en utilisant leur nom suivi par les paramètres
requis séparés par des espaces. Des fonctions de modèles ne peuvent pas être
ajoutées sans recompiler Hugo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exemple:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ add 1 2 }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;inclusions&#34;&gt;Inclusions&lt;/h2&gt;

&lt;p&gt;Lorsque vous incluez un autre modèle, vous devez y passer les données qu&amp;rsquo;il sera
en mesure d&amp;rsquo;accèder. Pour passer le contexte actuel, pensez à ajouter un point.
La localisation du modèle sera toujours à partir du répertoire /layout/ dans
Hugo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exemple:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ template &amp;quot;chrome/header.html&amp;quot; . }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;logique&#34;&gt;Logique&lt;/h2&gt;

&lt;p&gt;Go templates fourni les itérations et la logique conditionnèle des plus basique.&lt;/p&gt;

&lt;h3 id=&#34;itération&#34;&gt;Itération&lt;/h3&gt;

&lt;p&gt;Comme en go, les modèles go utilisent fortement &lt;em&gt;range&lt;/em&gt; pour itérer dans une
map, un array ou un slice. Les exemples suivant montre différentes façons
d&amp;rsquo;utiliser &lt;em&gt;range&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exemple 1: En utilisant le context&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range array }}
    {{ . }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Exemple 2: En déclarant un nom de variable&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{range $element := array}}
    {{ $element }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Exemple 2: En déclarant un nom de varialbe pour la clé et la valeur&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{range $index, $element := array}}
    {{ $index }}
    {{ $element }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;conditions&#34;&gt;Conditions&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;If&lt;/em&gt;, &lt;em&gt;else&lt;/em&gt;, &lt;em&gt;with&lt;/em&gt;, &lt;em&gt;or&lt;/em&gt;, &lt;em&gt;&amp;amp;&lt;/em&gt;, &lt;em&gt;and&lt;/em&gt; fournissent la base pour la logique
conditionnelle avec Go templates. Comme &lt;em&gt;range&lt;/em&gt;, chaque déclaration est fermé
avec &lt;code&gt;end&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Go templates considère les valeurs suivante comme &lt;em&gt;false&lt;/em&gt; :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;false&lt;/li&gt;
&lt;li&gt;0&lt;/li&gt;
&lt;li&gt;tout array, slice, map ou chaine d&amp;rsquo;une longueur de zéro&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Exemple 1: If&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if isset .Params &amp;quot;title&amp;quot; }}&amp;lt;h4&amp;gt;{{ index .Params &amp;quot;title&amp;quot; }}&amp;lt;/h4&amp;gt;{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Exemple 2: If -&amp;gt; Else&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if isset .Params &amp;quot;alt&amp;quot; }}
    {{ index .Params &amp;quot;alt&amp;quot; }}
{{else}}
    {{ index .Params &amp;quot;caption&amp;quot; }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Exemple 3: And &amp;amp; Or&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if and (or (isset .Params &amp;quot;title&amp;quot;) (isset .Params &amp;quot;caption&amp;quot;))
    (isset .Params &amp;quot;attr&amp;quot;)}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Exemple 4: With&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Une manière alternative d&amp;rsquo;écrire un &amp;ldquo;if&amp;rdquo; et de référencer cette même valeur est
d&amp;rsquo;utiliser &amp;ldquo;with&amp;rdquo;. Cela permet de remplacer le contexte &lt;code&gt;.&lt;/code&gt; par cet valeur et
saute le bloc si la variable est absente.&lt;/p&gt;

&lt;p&gt;Le premier exemple peut être simplifié à ceci :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ with .Params.title }}&amp;lt;h4&amp;gt;{{ . }}&amp;lt;/h4&amp;gt;{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Exemple 5: If -&amp;gt; Else If&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if isset .Params &amp;quot;alt&amp;quot; }}
    {{ index .Params &amp;quot;alt&amp;quot; }}
{{ else if isset .Params &amp;quot;caption&amp;quot; }}
    {{ index .Params &amp;quot;caption&amp;quot; }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;pipes&#34;&gt;&lt;em&gt;Pipes&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;L&amp;rsquo;un des composants le plus puissant de Go templates est la capacité d&amp;rsquo;empiler
les action l&amp;rsquo;une après l&amp;rsquo;autre. Cela est fait en utilisant les &lt;em&gt;pipes&lt;/em&gt;.
Empruntés aux &lt;em&gt;pipes&lt;/em&gt; unix, le concept est simple. Chaque sortie de &lt;em&gt;pipeline&lt;/em&gt;
devient l&amp;rsquo;entrée du &lt;em&gt;pipe&lt;/em&gt; suivant.&lt;/p&gt;

&lt;p&gt;À cause de la syntaxe très simple de Go templates, le &lt;em&gt;pipe&lt;/em&gt; est essentiel pour
être capable d&amp;rsquo;enchainer les appels de fonctions. Une limitation des &lt;em&gt;pipes&lt;/em&gt;
est qu&amp;rsquo;il ne peuvent fonctionner seulement avec une seule valeur et cette valeur
devient le dernier paramètre du prochain &lt;em&gt;pipeline&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Quelques exemples simple devrait vous aider à comprendre comment utiliser les
&lt;em&gt;pipes&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exemple 1 :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if eq 1 1 }} Same {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;est identique à&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ eq 1 1 | if }} Same {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Il semble étrange de placer le &lt;em&gt;if&lt;/em&gt; à la fin, mais il fournit une bonne
illustration de la façon d&amp;rsquo;utiliser les tuyaux.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exemple 2 :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ index .Params &amp;quot;disqus_url&amp;quot; | html }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Accès au paramètre de page nommé &amp;ldquo;disqus_url&amp;rdquo; et échappement du HTML&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exemple 3 :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if or (or (isset .Params &amp;quot;title&amp;quot;) (isset .Params &amp;quot;caption&amp;quot;))
    (isset .Params &amp;quot;attr&amp;quot;)}}
Stuff Here
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Peut être réécrit en&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{  isset .Params &amp;quot;caption&amp;quot; | or isset .Params &amp;quot;title&amp;quot; |
    or isset .Params &amp;quot;attr&amp;quot; | if }}
Stuff Here
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;contexte-alias-le-point&#34;&gt;Contexte (alias. le point)&lt;/h2&gt;

&lt;p&gt;Le concept le plus facilement négligé pour comprendre les modèles go est que
{{ . }} fait toujours référence au contexte actuel. Dans le plus haut niveau de
votre modèle, ce sera l&amp;rsquo;ensemble des données mis à votre disposition. Dans une
itération, ce sera la valeur de l&amp;rsquo;élément actuel. Enfin, dans une boucle, le
contexte change. . ne fera plus référence aux données disponibles dans la page
entière. Si vous avez besoin y d&amp;rsquo;accèder depuis l&amp;rsquo;intérieur d&amp;rsquo;une boucle, il est
judicieux d&amp;rsquo;y définir comme variable au lieu de dépendre du contexte.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exemple:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ $title := .Site.Title }}
{{ range .Params.tags }}
&amp;lt;li&amp;gt; &amp;lt;a href=&amp;quot;{{ $baseurl }}/tags/{{ . | urlize }}&amp;quot;&amp;gt;
    {{ . }}&amp;lt;/a&amp;gt; - {{ $title }} &amp;lt;/li&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notez que, une fois que nous sommes entrés dans la boucle, la valeur de
{{ . }} a changée. Nous avons défini une variable en dehors de la boucle, afin
d&amp;rsquo;y avoir accès dans la boucle.&lt;/p&gt;

&lt;h1 id=&#34;les-paramètres-d-hugo&#34;&gt;Les Paramètres d&amp;rsquo;Hugo&lt;/h1&gt;

&lt;p&gt;Hugo fournit l&amp;rsquo;option de passer des valeurs au modèle depuis la configuration du
site, ou depuis les métadonnées de chaque partie du contenu. Vous pouvez définir
n&amp;rsquo;importe quelle valeur de n&amp;rsquo;importe quel type (supporté par votre section
liminaire / format de configuration) et les utiliser comme vous le souhaitez
dans votre modèle.&lt;/p&gt;

&lt;h2 id=&#34;utiliser-les-paramètres-de-contenu-page&#34;&gt;Utiliser les paramètres de contenu (page)&lt;/h2&gt;

&lt;p&gt;Dans chaque partie du contenu, vous pouvez fournir des variables pour être
utilisées par le modèle. Cela se passe dans la
&lt;a href=&#34;http://ericpena.github.io/content/front-matter&#34;&gt;section liminaire&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Un exemple de cela est utilisé par ce site de documentation. La plupart des
pages bénéficient de la présentation de la table des matières. Quelques fois,
la table des matières n&amp;rsquo;a pas beaucoup de sens. Nous avons défini une variable
dans notre section liminaire de quelques pages pour désactiver la table des
matières.&lt;/p&gt;

&lt;p&gt;Ceci est un exemple de section liminaire :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title: &amp;quot;Permalinks&amp;quot;
date: &amp;quot;2013-11-18&amp;quot;
aliases:
  - &amp;quot;/doc/permalinks/&amp;quot;
groups: [&amp;quot;extras&amp;quot;]
groups_weight: 30
notoc: true
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ceci est le code correspondant dans le modèle :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  {{ if not .Params.notoc }}
    &amp;lt;div id=&amp;quot;toc&amp;quot; class=&amp;quot;well col-md-4 col-sm-6&amp;quot;&amp;gt;
    {{ .TableOfContents }}
    &amp;lt;/div&amp;gt;
  {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;utiliser-les-paramètres-de-site-config&#34;&gt;Utiliser les paramètres de site (config)&lt;/h2&gt;

&lt;p&gt;Dans votre configuration de plus haut niveau (ex &lt;code&gt;config.yaml&lt;/code&gt;), vous pouvez
définir des paramètres de site, dont les valeurs vous seront accessibles.&lt;/p&gt;

&lt;p&gt;Pour les instances, vous pourriez délarer :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;params:
  CopyrightHTML: &amp;quot;Copyright &amp;amp;#xA9; 2013 John Doe. All Rights Reserved.&amp;quot;
  TwitterUser: &amp;quot;spf13&amp;quot;
  SidebarRecentLimit: 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Avec un pied de page, vous devriez déclarer un &lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt; qui est affiché
seulement si le paramètre &lt;code&gt;CopyrightHTML&lt;/code&gt; est déclaré, et si il l&amp;rsquo;est, vous
devriez le déclarer comme HTML-safe, afin d&amp;rsquo;éviter d&amp;rsquo;échapper les entités HTML.
Cela vous permettra de le modifier facilement dans votre configuration au lieu
de le chercher dans votre modèle.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{if .Site.Params.CopyrightHTML}}&amp;lt;footer&amp;gt;
&amp;lt;div class=&amp;quot;text-center&amp;quot;&amp;gt;{{.Site.Params.CopyrightHTML | safeHtml}}&amp;lt;/div&amp;gt;
&amp;lt;/footer&amp;gt;{{end}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Une alternative au &amp;ldquo;if&amp;rdquo; et d&amp;rsquo;appeler la même valeur est d&amp;rsquo;utiliser &amp;ldquo;with&amp;rdquo;. Cela
modifiera le contexte et passera le bloc si la variable est absente :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{with .Site.Params.TwitterUser}}&amp;lt;span class=&amp;quot;twitter&amp;quot;&amp;gt;
&amp;lt;a href=&amp;quot;https://twitter.com/{{.}}&amp;quot; rel=&amp;quot;author&amp;quot;&amp;gt;
&amp;lt;img src=&amp;quot;/images/twitter.png&amp;quot; width=&amp;quot;48&amp;quot; height=&amp;quot;48&amp;quot; title=&amp;quot;Twitter: {{.}}&amp;quot;
 alt=&amp;quot;Twitter&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;
&amp;lt;/span&amp;gt;{{end}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Enfin, si vous souhaitez extraire des &amp;ldquo;constantes magiques&amp;rdquo; de vos mises en
page, vous pouvez le faire comme dans l&amp;rsquo;exemple suivant :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;nav class=&amp;quot;recent&amp;quot;&amp;gt;
  &amp;lt;h1&amp;gt;Recent Posts&amp;lt;/h1&amp;gt;
  &amp;lt;ul&amp;gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}}
    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;{{.RelPermalink}}&amp;quot;&amp;gt;{{.Title}}&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  {{end}}&amp;lt;/ul&amp;gt;
&amp;lt;/nav&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>