<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming | ERIC PEÑA</title>
    <link>/tags/programming/</link>
      <atom:link href="/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    <description>Programming</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>©2019 Eric Peña</copyright><lastBuildDate>Wed, 11 Dec 2019 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/img/icon-192.png</url>
      <title>Programming</title>
      <link>/tags/programming/</link>
    </image>
    
    <item>
      <title>Diversity in Competitive Threshold Linear Networks</title>
      <link>/project/ctln/</link>
      <pubDate>Wed, 11 Dec 2019 00:00:00 +0000</pubDate>
      <guid>/project/ctln/</guid>
      <description>&lt;figure&gt;
  &lt;img src=&#34;img/network.png&#34; alt=&#34;Network&#34; width=&#34;600&#34;/&gt;
  &lt;figcaption&gt;Figure 1 — Directed Network Which Represents Threshold Linear Network&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div&gt;$$\frac{d x_i}{dt} = -x_i + \left[ \sum_{j=1}^{n} W_{ij} x_j + \theta \right]_+ i = 1, \ldots, n$$&lt;/div&gt;
&lt;p&gt;&lt;iframe src=&#34;https://docs.google.com/presentation/d/1fx30MNJ0vK8NCKlWVHHwYNCAWU1UkN1zVmRUMJ6gjVQ/edit?usp=sharing&#34; frameborder=&#34;0&#34; width=&#34;800&#34; height=&#34;600&#34; allowfullscreen=&#34;true&#34; mozallowfullscreen=&#34;true&#34; webkitallowfullscreen=&#34;true&#34;&gt;&lt;/iframe&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Genetic Algorithm — Cellular Automata Optimization</title>
      <link>/project/liso-project/</link>
      <pubDate>Sun, 01 Dec 2019 00:00:00 +0000</pubDate>
      <guid>/project/liso-project/</guid>
      <description>&lt;h1 id=&#34;abstract&#34;&gt;Abstract&lt;/h1&gt;
&lt;p&gt;The mechanism by which nature exhibits emergent patterns and behaviors has been a mystery throughout history. One application that has been developed which tends to mimic nature is Conway’s Game of Life — an application in the field of cellular automata. The ability to predict a final state of a system, given an initial state in the context of Game of Life, come as an insurmountable task. In this work, genetic algorithms are explored along with how they may be used to search for initial conditions such that their final outcomes are optimal. Optimal final states may be defined in terms of growth, diversity, and density of the cellular automaton evolution. This may be beneficial in exploring the way in which coupled components interact in mathematical and physical systems.&lt;/p&gt;
&lt;h1 id=&#34;motivation&#34;&gt;Motivation&lt;/h1&gt;
&lt;p&gt;Many will claim that the ultimate objective of science is to understand and model the natural world. There are many phenomena in nature whose patterns and behavior seem somewhat unpredictable yet these resulting patterns appear highly structured and organized. Scientists and mathematicians have developed techniques such as chaos theory and cellular automata for the attempt to model nature in its truest sense. In this paper we will take an approach to understand how structure stems from randomness in a cellular automata model. A cellular automaton is defined in terms of clear rules on each individual cell and its well defined neighborhood of cells that surround it. We will go into detail as to what this means in later chapters but let us begin by thinking about a two dimensional grid of cells that are all identical. We can even analogize this to a simple universe of people who are all the same and only know how to do the same task: become alive or die. Whether they become alive or die depends on the number of people around them who are either alive or dead given clear, unambiguous rules. Every person in this universe obeys the same universal laws—namely, in this context, the cellular automata rules. Given a clear and finite set of cellular automata rules and given a defined initial state, we can compute the state of a future grid—this will tell us which cells are alive and which are dead, after applying the rules onto the grid some predefined number n times. The defined cellular automata rules used in this report are those defined by Conway’s Game of Life. The well defined rules for Conway’s Game of Life will be explained in section 2.2.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&#34;img/dna.png&#34; alt=&#34;DNA&#34; width=&#34;300&#34;/&gt;
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h1 id=&#34;thesis-objective&#34;&gt;Thesis Objective&lt;/h1&gt;
&lt;p&gt;The objective of this project is to understand which initial conditions (initial states), given a set of welldefined cellular automata rules, produce the most optimized final states after n iterations of applying these rules. The variable being optimized is the fitness value where fitness is defined in terms of what I call growth, diversity, and density of the final state grids. These three terms and how they relate to this specific application are further explained in section 4.4. To make the objective clear, I will state it here and repeat it throughout the report to make sure we are on track with achieving it.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;OBJECTIVE: Given well-defined cellular automata rules defined by Conway’s Game of Life, determine an initial state that produces an optimal final state in terms of growth, diversity, and density after a finite number of iterations.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;thesis-outline&#34;&gt;Thesis Outline&lt;/h1&gt;
&lt;p&gt;The report is organized in chapters that describe the major components of this project. The topics covered are the background of the application (Chapter 2), an overview of the genetic algorithms and how they are used to optimize initial states (Chapter 3), the details of the genetic algorithm implementation (Chapter 4), a description of the results (Chapter 5), and a few concluding thoughts and considerations for improvements and future work (Chapter 6).&lt;/p&gt;
&lt;h1 id=&#34;the-report&#34;&gt;The Report&lt;/h1&gt;
&lt;center&gt;Click the icon below to read the full report.&lt;/center&gt;
&lt;p&gt;&lt;a href=&#34;LISO_Project.pdf&#34; class=&#34;image fit&#34;&gt;&lt;img src=&#34;img/pdf.png&#34; alt=&#34;&#34; height=&#34;100&#34; width=&#34;100&#34;&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python Character Analysis</title>
      <link>/project/heatmap-project/</link>
      <pubDate>Thu, 03 Oct 2019 00:00:00 +0000</pubDate>
      <guid>/project/heatmap-project/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;I have separated my work into sections so ease of flow. All Python code is included in this article. Observations of the data are shown in the histogram and heatmap below.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;header&#34;&gt;Header&lt;/h2&gt;
&lt;p&gt;The header of my python file gives general information:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Title: Python Character Analysis
Author: Eric Pena
Date: Oct. 2019

Text Source:
Academic Sample
http://www.thegrammarlab.com/?nor-portfolio=1000000-word-sample-corpora
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;packages&#34;&gt;Packages&lt;/h2&gt;
&lt;p&gt;Below are important packages that I am importing for the program to work properly.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
import fileinput as fi
import matplotlib.pyplot as plt
import seaborn as sns
import string
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;user-defined-functions&#34;&gt;User Defined Functions&lt;/h2&gt;
&lt;p&gt;I have defined several functions used by the \verb|main()| function:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def read(file):
	&amp;quot;&amp;quot;&amp;quot;Reads given file and parses characters

	Args:
		file: the text file to be parsed
	Returns:
		charArr: parsed character array
	&amp;quot;&amp;quot;&amp;quot;
	return [i for line in fi.input(file) for i in line]

# -------------------------------------------------------------------

def count(array):
	&amp;quot;&amp;quot;&amp;quot;Counts characters and creates freq table

	Args:
		array: character array of text
	Returns:
		freq: dictionary that represents freq table
	&amp;quot;&amp;quot;&amp;quot;
	return {c: array.count(c) for c in array}


# -------------------------------------------------------------------


def partition2(array):
	&amp;quot;&amp;quot;&amp;quot;Works similar to Mathematica&#39;s partition function
		but slightly differently. This function will create
		a string that combines each pair of characters in
		order to be hashed through by the count function.

	Args:
		array: this array
	Returns:
		
	&amp;quot;&amp;quot;&amp;quot;
	return [str(array[i]) + str(array[i + 1]) for i in range(len(array) - 1)]
# -------------------------------------------------------------------


def dict_print(d):
	&amp;quot;&amp;quot;&amp;quot;Print function specifically for dictionary

	Args:
		d: dictionary
	Returns:
		None: only prints out the contents of the dictionary
	&amp;quot;&amp;quot;&amp;quot;
	[print(key[0] + &#39; --- &#39; + key[1] + &#39; :\t&#39; + str(val)) for key, val in d.items()]

# -------------------------------------------------------------------


def to_dataframe(d):
	&amp;quot;&amp;quot;&amp;quot;converts the dictionary of transitions to a dataframe from which
		can be turned into a heatmap

	Args:
		d: dictionary
	Returns:
		df: dataframe 
	&amp;quot;&amp;quot;&amp;quot;
	# :: Create dataframe
	df = pd.DataFrame(columns=(&#39;First&#39;, &#39;Second&#39;, &#39;Frequency&#39;))

	# :: Initialize matrix
	alpha = list(string.ascii_letters)[:26]
	alpha.append(&#39; &#39;)
	for i in alpha:
		for j in alpha:
			df = df.append(pd.Series([i, j, 0], index=df.columns), ignore_index=True)

	# :: Pivot our dataframe to make a matrix for heatmap
	df = df.pivot(&amp;quot;First&amp;quot;, &amp;quot;Second&amp;quot;, &amp;quot;Frequency&amp;quot;)

	# :: Add relevant frequencies to the matrix
	for k in d:
		df[k[1]][k[0]] = d[k]

	df = df[df.columns].astype(int)

	return df
# -------------------------------------------------------------------


def show_heatmap(df, filename):
	&amp;quot;&amp;quot;&amp;quot;Create and plot heatmap of data

	Args:
		df: dataframe of frequencies
	Returns:
		None: Instead will plot a heatmap of the data
	&amp;quot;&amp;quot;&amp;quot;
	# :: Creae heatmap and customize
	sns.set()
	ax = sns.heatmap(df, cmap=&amp;quot;binary&amp;quot;, robust=True, xticklabels=True, yticklabels=True)
	ax.xaxis.set_label_position(&#39;top&#39;)
	ax.xaxis.set_ticks_position(&#39;top&#39;)
	ax.spines[&#39;top&#39;].set_visible(False)
	ax.tick_params(top=False, left=False)
	ax.xaxis.label.set_color(&#39;darkgray&#39;)
	ax.yaxis.label.set_color(&#39;darkgray&#39;)
	ax.tick_params(axis=&#39;x&#39;, colors=&#39;darkgray&#39;)
	ax.tick_params(axis=&#39;y&#39;, colors=&#39;darkgray&#39;)
	plt.xlabel(&#39;Second Letter&#39;, fontsize=18)
	plt.ylabel(&#39;First Letter&#39;, fontsize=18)
	plt.show()

	figure = ax.get_figure()
	figure.savefig(filename, dpi=400)
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;main-program&#34;&gt;Main Program&lt;/h2&gt;
&lt;p&gt;This shows the code for the main program which utilizes the functions above.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def main():
	# ---------------------------MAIN PROGRAM---------------------------
	# :: Reads in text file
	# :: Counts the frequencies
	# :: Data stored in dictionary
	# :: Plots histogram of results
	
	freq_dict = count(read(&#39;text.txt&#39;))
	plt.bar(freq_dict.keys(), freq_dict.values(), color=&#39;gray&#39;)
	plt.title(&#39;Character Histogram&#39;)
	plt.xlabel(&#39;Characters&#39;)
	plt.ylabel(&#39;Frequency&#39;)
	plt.show()

	# :: Reads in text file
	# :: Partitions in 2-tuples for transitions
	# :: Data stored in dictionary
	# :: Frequencies are printed to console/terminal
	
	dict_print(count(partition2(read(&#39;text.txt&#39;))))

	df = to_dataframe(count(partition2(read(&#39;text.txt&#39;))))
	print(df)
	
	filename = &#39;/Users/ericpena/iCloud/Binghamton_Courses/500_Computational_Tools/HW2/heatmap.png&#39;
	show_heatmap(df, filename)

if __name__ == &#39;__main__&#39;:
	main()
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;plot-of-histogram&#34;&gt;Plot of Histogram&lt;/h2&gt;
&lt;figure&gt;
  &lt;img src=&#34;img/hist.png&#34; alt=&#34;Histogram&#34; width=&#34;500&#34;/&gt;
  &lt;figcaption&gt;Figure 1 — Histogram that shows frequencies of characters appearing in the text&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&#34;histogram-observations&#34;&gt;Histogram Observations&lt;/h2&gt;
&lt;p&gt;Here are a few observations about the histogram above:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$space\ character$: The space character is by far the most frequent. This makes sense since after each word, a space appears&lt;/li&gt;
&lt;li&gt;${j, z, x, k}$: Characters such as $j$, $z$, $x$, and $k$ are low frequency &amp;mdash; not often present in common words&lt;/li&gt;
&lt;li&gt;$vowels$: It makes sense for the frequency of the vowels to be higher than consonants given how English is structured&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;heatmap-of-character-transitions&#34;&gt;Heatmap of Character Transitions&lt;/h2&gt;
&lt;p&gt;The heat map below visually represents the frequencies of the transitions $c_i \rightarrow c_{i+1}$ where $c_i$ is the $i^{th}$ character in the supplied text file.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&#34;img/heatmap.png&#34; alt=&#34;Heatmap&#34; width=&#34;500&#34;/&gt;
  &lt;figcaption&gt;Figure 2 — Heatmap that shows the frequencies of character transitions&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id=&#34;heatmap-observations&#34;&gt;Heatmap Observations&lt;/h4&gt;
&lt;p&gt;Here are a few observations about the heatmap above:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$Common\ Occurences$: Some common occurrences: $t \rightarrow h$, $i \rightarrow n$, $n \rightarrow t$, $r \rightarrow e$, $t \rightarrow i$&lt;/li&gt;
&lt;li&gt;$Spaces$: As expected the row and column of the $space$ is quite active &amp;mdash; this makes sense since all words start and end with a $space$&lt;/li&gt;
&lt;li&gt;$Bare$: It&#39;s interesting but not unexpected that the right bottom right is quite bare &amp;mdash; very low frequencies later in the alphabet&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;robustness-parameter&#34;&gt;Robustness Parameter&lt;/h2&gt;
&lt;p&gt;The heatmap above is actually using a &lt;code&gt;robust=True&lt;/code&gt; parameter that normalizes the frequencies into a small range in order to improve the visualization. This is an improvement over the heatmap with the original frequencies. See below for the difference between the $RAW$ heatmap and the $ROBUST$ heatmap. More visual information can be obtained by using the $robust$ parameter since the `interesting&amp;rsquo; events are much more pronounced.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&#34;img/heatmap_robust.png&#34; alt=&#34;Heatmap&#34; width=&#34;700&#34;/&gt;
  &lt;figcaption&gt;Figure 3 — Shows the difference between the Raw and Robust frequencies for the heatmap&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&#34;appendix--output-data&#34;&gt;Appendix — Output Data&lt;/h2&gt;
&lt;hr&gt;
&lt;h4 id=&#34;histogram-frenquencies&#34;&gt;Histogram Frenquencies&lt;/h4&gt;
&lt;p&gt;{&amp;lsquo;d&amp;rsquo;: 234, &amp;lsquo;i&amp;rsquo;: 574, &amp;lsquo;f&amp;rsquo;: 233, &amp;lsquo;e&amp;rsquo;: 958, &amp;lsquo;r&amp;rsquo;: 428, &amp;lsquo;n&amp;rsquo;: 492, &amp;lsquo;c&amp;rsquo;: 255, &#39; &amp;lsquo;: 1370, &amp;lsquo;w&amp;rsquo;: 111, &amp;lsquo;h&amp;rsquo;: 344, &amp;lsquo;m&amp;rsquo;: 184, &amp;lsquo;s&amp;rsquo;: 455, &amp;lsquo;t&amp;rsquo;: 653, &amp;lsquo;o&amp;rsquo;: 475, &amp;lsquo;u&amp;rsquo;: 206, &amp;lsquo;a&amp;rsquo;: 561, &amp;lsquo;p&amp;rsquo;: 146, &amp;lsquo;l&amp;rsquo;: 336, &amp;lsquo;y&amp;rsquo;: 77, &amp;lsquo;x&amp;rsquo;: 24, &amp;lsquo;b&amp;rsquo;: 111, &amp;lsquo;k&amp;rsquo;: 15, &amp;lsquo;g&amp;rsquo;: 103, &amp;lsquo;v&amp;rsquo;: 60, &amp;lsquo;q&amp;rsquo;: 20, &amp;lsquo;j&amp;rsquo;: 9, &amp;lsquo;z&amp;rsquo;: 11}&lt;/p&gt;
&lt;h4 id=&#34;heatmap-frenquencies&#34;&gt;Heatmap Frenquencies&lt;/h4&gt;
&lt;p&gt;d &amp;mdash; i :	30
i &amp;mdash; f :	11
f &amp;mdash; f :	15
f &amp;mdash; e :	10
e &amp;mdash; r :	114
r &amp;mdash; e :	113
e &amp;mdash; n :	105
n &amp;mdash; c :	22
c &amp;mdash; e :	49
e &amp;mdash;   :	339
&amp;mdash; w :	79
w &amp;mdash; h :	23
h &amp;mdash; e :	210
&amp;mdash; m :	53
m &amp;mdash; c :	1
c &amp;mdash;   :	8
&amp;mdash; i :	72
i &amp;mdash; s :	61
s &amp;mdash;   :	199
&amp;mdash; t :	252
t &amp;mdash; h :	212
m &amp;mdash; o :	13
o &amp;mdash; i :	5
s &amp;mdash; t :	41
t &amp;mdash; u :	11
u &amp;mdash; r :	46
&amp;mdash; c :	90
c &amp;mdash; o :	54
o &amp;mdash; n :	104
n &amp;mdash; t :	88
t &amp;mdash; e :	94
t &amp;mdash;   :	107
m &amp;mdash; a :	18
a &amp;mdash;   :	40
a &amp;mdash; s :	55
s &amp;mdash; s :	18
&amp;mdash; o :	93
o &amp;mdash; f :	70
f &amp;mdash;   :	73
&amp;mdash; s :	69
s &amp;mdash; a :	14
a &amp;mdash; m :	23
m &amp;mdash; p :	25
p &amp;mdash; l :	14
l &amp;mdash; e :	47
&amp;mdash; a :	168
a &amp;mdash; f :	6
f &amp;mdash; t :	4
r &amp;mdash;   :	64
&amp;mdash; h :	40
h &amp;mdash; u :	12
u &amp;mdash; m :	9
m &amp;mdash; i :	37
i &amp;mdash; d :	28
i &amp;mdash; t :	46
t &amp;mdash; y :	11
y &amp;mdash;   :	60
&amp;mdash; e :	40
e &amp;mdash; x :	11
x &amp;mdash; p :	3
p &amp;mdash; o :	41
o &amp;mdash; s :	28
s &amp;mdash; u :	28
a &amp;mdash; n :	92
n &amp;mdash; d :	65
d &amp;mdash;   :	140
m &amp;mdash; d :	1
&amp;mdash; d :	39
d &amp;mdash; r :	2
r &amp;mdash; y :	12
&amp;mdash; r :	37
e &amp;mdash; s :	71
u &amp;mdash; l :	21
l &amp;mdash; t :	4
t &amp;mdash; s :	17
s &amp;mdash; c :	3
c &amp;mdash; u :	3
u &amp;mdash; s :	31
s &amp;mdash; i :	53
i &amp;mdash; o :	60
n &amp;mdash;   :	131
c &amp;mdash; h :	34
e &amp;mdash; m :	26
i &amp;mdash; c :	47
c &amp;mdash; a :	45
a &amp;mdash; l :	81
l &amp;mdash;   :	50
o &amp;mdash; m :	24
t &amp;mdash; i :	92
&amp;mdash; f :	103
f &amp;mdash; i :	59
i &amp;mdash; b :	38
b &amp;mdash; e :	59
r &amp;mdash; s :	37
w &amp;mdash; e :	33
e &amp;mdash; l :	40
l &amp;mdash; l :	49
&amp;mdash; k :	1
k &amp;mdash; n :	1
n &amp;mdash; o :	21
o &amp;mdash; w :	12
w &amp;mdash; n :	3
h &amp;mdash; a :	34
a &amp;mdash; t :	55
&amp;mdash; l :	37
l &amp;mdash; i :	42
i &amp;mdash; g :	23
g &amp;mdash; n :	4
o &amp;mdash; c :	10
l &amp;mdash; u :	30
l &amp;mdash; o :	18
i &amp;mdash; n :	128
n &amp;mdash; v :	2
v &amp;mdash; e :	34
g &amp;mdash; a :	8
e &amp;mdash; d :	68
o &amp;mdash; u :	27
u &amp;mdash; n :	17
n &amp;mdash; e :	37
&amp;mdash; q :	2
q &amp;mdash; u :	20
u &amp;mdash; a :	8
i &amp;mdash; e :	24
d &amp;mdash; o :	5
o &amp;mdash; e :	2
&amp;mdash; n :	19
o &amp;mdash; t :	30
a &amp;mdash; d :	10
d &amp;mdash; d :	1
&amp;mdash; u :	12
u &amp;mdash; p :	9
p &amp;mdash;   :	6
t &amp;mdash; o :	47
o &amp;mdash;   :	48
i &amp;mdash; m :	21
l &amp;mdash; y :	27
&amp;mdash; b :	46
e &amp;mdash; c :	25
a &amp;mdash; u :	9
s &amp;mdash; e :	44
n &amp;mdash; l :	4
a &amp;mdash; j :	1
j &amp;mdash; o :	1
o &amp;mdash; r :	66
a &amp;mdash; r :	64
e &amp;mdash; p :	6
r &amp;mdash; t :	15
d &amp;mdash; e :	24
e &amp;mdash; t :	32
r &amp;mdash; m :	17
&amp;mdash; p :	66
p &amp;mdash; e :	20
c &amp;mdash; t :	35
p &amp;mdash; r :	27
r &amp;mdash; o :	42
e &amp;mdash; i :	11
n &amp;mdash; s :	24
x &amp;mdash; t :	4
t &amp;mdash; r :	17
r &amp;mdash; a :	32
a &amp;mdash; c :	43
t &amp;mdash; a :	24
a &amp;mdash; b :	18
b &amp;mdash; l :	12
r &amp;mdash; g :	6
n &amp;mdash; i :	28
t &amp;mdash; t :	15
u &amp;mdash; c :	7
h &amp;mdash;   :	31
w &amp;mdash; a :	19
a &amp;mdash; x :	12
x &amp;mdash; e :	2
f &amp;mdash; a :	20
l &amp;mdash; c :	1
o &amp;mdash; h :	1
h &amp;mdash; o :	18
o &amp;mdash; l :	26
l &amp;mdash; s :	11
c &amp;mdash; i :	8
d &amp;mdash; s :	16
i &amp;mdash; l :	28
l &amp;mdash; a :	44
r &amp;mdash; l :	5
e &amp;mdash; q :	7
u &amp;mdash; e :	20
a &amp;mdash; p :	11
p &amp;mdash; p :	4
o &amp;mdash; x :	1
x &amp;mdash;   :	9
w &amp;mdash; t :	3
h &amp;mdash; i :	26
&amp;mdash; g :	19
g &amp;mdash; o :	2
o &amp;mdash; o :	2
o &amp;mdash; d :	2
a &amp;mdash; g :	7
g &amp;mdash; r :	16
e &amp;mdash; e :	18
m &amp;mdash; e :	46
&amp;mdash; v :	22
v &amp;mdash; a :	20
b &amp;mdash; y :	10
e &amp;mdash; z :	2
z &amp;mdash;   :	2
n &amp;mdash; z :	1
z &amp;mdash; a :	1
f &amp;mdash; l :	8
a &amp;mdash; v :	12
g &amp;mdash; h :	10
b &amp;mdash; a :	11
r &amp;mdash; n :	11
n &amp;mdash; h :	6
s &amp;mdash; k :	6
k &amp;mdash;   :	7
e &amp;mdash; a :	39
r &amp;mdash; c :	2
g &amp;mdash; e :	13
u &amp;mdash; g :	5
g &amp;mdash; u :	10
u &amp;mdash; i :	13
e &amp;mdash; y :	5
n &amp;mdash; g :	33
g &amp;mdash;   :	29
f &amp;mdash; r :	9
m &amp;mdash;   :	19
r &amp;mdash; i :	36
e &amp;mdash; o :	6
o &amp;mdash; g :	3
p &amp;mdash; h :	4
e &amp;mdash; g :	6
g &amp;mdash; i :	7
o &amp;mdash; p :	10
r &amp;mdash; f :	13
s &amp;mdash; h :	13
w &amp;mdash; s :	3
h &amp;mdash; t :	7
a &amp;mdash; i :	13
w &amp;mdash; i :	15
s &amp;mdash; w :	3
x &amp;mdash; i :	4
m &amp;mdash; u :	7
d &amp;mdash; u :	7
i &amp;mdash; q :	9
p &amp;mdash; i :	7
i &amp;mdash; i :	1
i &amp;mdash;   :	1
e &amp;mdash; f :	7
p &amp;mdash; a :	9
c &amp;mdash; k :	3
k &amp;mdash; e :	5
e &amp;mdash; v :	10
f &amp;mdash; u :	9
b &amp;mdash; s :	1
s &amp;mdash; o :	13
r &amp;mdash; p :	4
p &amp;mdash; t :	6
m &amp;mdash; n :	8
f &amp;mdash; o :	26
n &amp;mdash; f :	6
d &amp;mdash; a :	3
i &amp;mdash; a :	23
h &amp;mdash; l :	1
i &amp;mdash; k :	3
n &amp;mdash; y :	1
n &amp;mdash; a :	19
r &amp;mdash; v :	1
l &amp;mdash; w :	1
a &amp;mdash; y :	3
y &amp;mdash; s :	2
v &amp;mdash; i :	5
r &amp;mdash; r :	8
s &amp;mdash; p :	5
i &amp;mdash; z :	3
z &amp;mdash; e :	4
o &amp;mdash; b :	1
b &amp;mdash; t :	1
i &amp;mdash; p :	1
y &amp;mdash; i :	2
i &amp;mdash; v :	10
c &amp;mdash; r :	9
c &amp;mdash; c :	2
g &amp;mdash; y :	1
&amp;mdash; z :	3
z &amp;mdash; i :	4
s &amp;mdash; m :	7
c &amp;mdash; l :	4
p &amp;mdash; u :	4
t &amp;mdash; w :	6
m &amp;mdash; s :	5
b &amp;mdash; o :	5
l &amp;mdash; d :	11
b &amp;mdash; i :	4
p &amp;mdash; s :	4
b &amp;mdash; u :	7
u &amp;mdash; t :	12
h &amp;mdash; y :	2
y &amp;mdash; d :	1
i &amp;mdash; r :	8
c &amp;mdash; y :	1
g &amp;mdash; g :	1
a &amp;mdash; z :	1
n &amp;mdash; k :	1
y &amp;mdash; z :	1
l &amp;mdash; m :	1
&amp;mdash; y :	3
y &amp;mdash; p :	2
x &amp;mdash; c :	2
r &amp;mdash; u :	4
u &amp;mdash; f :	1
d &amp;mdash; l :	1
o &amp;mdash; a :	1
s &amp;mdash; y :	1
y &amp;mdash; m :	1
o &amp;mdash; v :	1
d &amp;mdash; v :	2
u &amp;mdash;   :	1
&amp;mdash; j :	5
j &amp;mdash; u :	2
y &amp;mdash; t :	3
a &amp;mdash; q :	1
y &amp;mdash; r :	1
g &amp;mdash; l :	1
w &amp;mdash; o :	6
r &amp;mdash; d :	5
u &amp;mdash; d :	2
u &amp;mdash; b :	3
y &amp;mdash; e :	4
u &amp;mdash; o :	1
m &amp;mdash; m :	1
e &amp;mdash; w :	6
w &amp;mdash;   :	5
s &amp;mdash; b :	1
g &amp;mdash; f :	1
m &amp;mdash; b :	3
a &amp;mdash; w :	1
a &amp;mdash; k :	1
b &amp;mdash;   :	1
n &amp;mdash; u :	2
k &amp;mdash; s :	2
n &amp;mdash; j :	1
j &amp;mdash; a :	1
s &amp;mdash; r :	1
a &amp;mdash; e :	1
j &amp;mdash; e :	5
a &amp;mdash; h :	1
r &amp;mdash; b :	1
o &amp;mdash; j :	1
e &amp;mdash; u :	2
v &amp;mdash; o :	1
s &amp;mdash; l :	4
h &amp;mdash; m :	1
h &amp;mdash; r :	2
d &amp;mdash; w :	3
w &amp;mdash; r :	1
e &amp;mdash; j :	1
s &amp;mdash; q :	1&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>First Genetic Algorithm</title>
      <link>/post/ga-intro/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      <guid>/post/ga-intro/</guid>
      <description>&lt;h1 id=&#34;components-of-a-genetic-algorithm&#34;&gt;Components of a Genetic Algorithm&lt;/h1&gt;
&lt;h1 id=&#34;genetic-algorithm-written-in-python&#34;&gt;Genetic Algorithm Written in Python&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from fuzzywuzzy import fuzz
import random
import string

class Agent:

	def __init__(self, length):

		# Initialize a new agent
		self.string = &#39;&#39;.join(random.choice(string.ascii_letters) for _ in range(length))
		self.fitness = -1

	def __str__(self):

		return &#39;String: &#39; + str(self.string) + &#39; Fitness: &#39; + str(self.fitness)

in_str = None
in_str_len = None
population = 20
generations = 5000

# All the code to evolve
def ga():
	
	agents = init_agents(population, in_str_len)

	for generation in range(generations):

		print(&#39;Generation: &#39; + str(generation))

		agents = fitness(agents)
		agents = selection(agents)
		agents = crossover(agents)
		agents = mutation(agents)

		if any(agent.fitness &amp;gt;= 90 for agent in agents):

			print(&#39;Threshold met!&#39;)
			exit(0)

def init_agents(population, length):

	return [Agent(length) for _ in range(population)]

def fitness(agents):

	for agent in agents:

		agent.fitness = fuzz.ratio(agent.string, in_str)

	return agents

def selection(agents):

	agents = sorted(agents, key=lambda agent: agent.fitness, reverse=True)
	print(&#39;\n&#39;.join(map(str, agents)))
	agents = agents[:int(0.2 * len(agents))]

	return agents

def crossover(agents):

	offspring = []

	for _ in range(int((population - len(agents)) / 2)):

		parent1 = random.choice(agents)
		parent2 = random.choice(agents)
		child1 = Agent(in_str_len)
		child2 = Agent(in_str_len)
		split = random.randint(0, in_str_len)
		child1.string = parent1.string[0:split] + parent2.string[split:in_str_len]
		child2.string = parent2.string[0:split] + parent1.string[split:in_str_len]

		offspring.append(child1)
		offspring.append(child2)

	agents.extend(offspring)

	return agents

def mutation(agents):

	for agent in agents:

		for idx, param in enumerate(agent.string):

			if random.uniform(0.0, 1.0) &amp;lt;= 0.1:

				agent.string = agent.string[0:idx] + \
					random.choice(string.ascii_letters) + \
					agent.string[idx + 1:in_str_len]

	return agents

if __name__ == &#39;__main__&#39;:
	
	in_str = &#39;ericpena&#39;
	in_str_len = len(in_str)
	ga()
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;results&#34;&gt;Results&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title>Speed of Julia</title>
      <link>/post/julia/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      <guid>/post/julia/</guid>
      <description>&lt;figure&gt;
  &lt;img src=&#34;img/logo.png&#34; alt=&#34;Julia Logo&#34; width=&#34;500&#34;/&gt;
&lt;/figure&gt;
&lt;h2 id=&#34;creating-fibn&#34;&gt;Creating fib(n)&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;function fib(n)
    if (n == 1 || n == 2)
        return 1
    else
        return fib(n - 1) + fib(n - 2)
    end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;timing-fibn-140&#34;&gt;Timing fib(n) 1:40&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;function fibTime(k)
    t = []
    for i in 1:k
        push!(t, (@timed fib(i))[2])
    end
    return t
end

# :: Print @timed Fibonacci 1 through 40
println(fibTime(40))
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;plotting-timed-results&#34;&gt;Plotting @Timed Results&lt;/h2&gt;
&lt;p&gt;The timing for Julia is surprisingly very fast!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;using Plots
plot(fibTime(40), title=&amp;quot;Timed Recursive Fibonacci Algorithm&amp;quot;, 
	color = :red, fill = (0, .3, :red), legend = false)
xaxis!(&amp;quot;[n given in fib(n)]&amp;quot;)
yaxis!(&amp;quot;Time [seconds]&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;figure&gt;
  &lt;img src=&#34;img/timed.png&#34; alt=&#34;Timed&#34; width=&#34;600&#34;/&gt;
  &lt;figcaption&gt;Figure 1 — Timed Recursive Algorithm That Calculates $n^{th}$ Fibonacci Number in Julia&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&#34;achieve-results-in-python&#34;&gt;Achieve Results in Python&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from matplotlib import pyplot as plt
import time

def fib(n):
    if (n == 1) or (n == 2):
        return 1
    else:
        return fib(n - 1) + fib(n - 2)

def fibTimed(k):
    t = []
    for i in range(1, k + 1):
        s = time.time()
        fib(i)
        fib_t = time.time() - s
        t.append(fib_t)
    return t

result = fibTimed(40)
print(result)
plt.plot(result)
plt.title(&amp;quot;Python @Timed Recursive fib(n) Algorithm&amp;quot;)
plt.xlabel(&amp;quot;[n given in fin(n)]&amp;quot;)
plt.ylabel(&amp;quot;Time [seconds]&amp;quot;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;The results from Python are significantly slower than compared to Julia. $Fib(40)$ takes nearly $30$ seconds to complete.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&#34;img/timed_python.png&#34; alt=&#34;Timed&#34; width=&#34;600&#34;/&gt;
  &lt;figcaption&gt;Figure 2 — Timed Recursive Algorithm That Calculates $n^{th}$ Fibonacci Number in Python&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&#34;show-julia-versus-python-comparison&#34;&gt;Show Julia Versus Python Comparison&lt;/h2&gt;
&lt;p&gt;The plot below shows that Julia is significantly more efficient compared to Python for this recursive algorithm.&lt;/p&gt;
&lt;hr&gt;
&lt;figure&gt;
  &lt;img src=&#34;img/comparison.png&#34; alt=&#34;Compare&#34; width=&#34;600&#34;/&gt;
  &lt;figcaption&gt;Figure 3 — Timed Recursive Algorithm Between Julia and Python between $n = 30$ and $n = 40$&lt;/figcaption&gt;
&lt;/figure&gt;</description>
    </item>
    
    <item>
      <title>Declare War Project</title>
      <link>/project/war-project/</link>
      <pubDate>Sat, 16 Mar 2019 00:00:00 +0000</pubDate>
      <guid>/project/war-project/</guid>
      <description>&lt;h1 id=&#34;war-simulation-in-python&#34;&gt;War Simulation in Python&lt;/h1&gt;
&lt;h4 id=&#34;game-designer-greg-costikyan-has-observed-that-since-there-are-no-choices-in-the-game-and-all-outcomes-are-random-it-cannot-be-considered-a-game-by-some-definitions-i-chose-to-program-this-game-because-its-complete-random-chance-feature-it-was-an-opportunity-to-practice-python-and-writing-recursive-functions&#34;&gt;Game designer Greg Costikyan has observed that since there are no choices in the game, and all outcomes are random, it cannot be considered a game by some definitions. I chose to program this game because its complete random chance feature. It was an opportunity to practice python and writing recursive functions.&lt;/h4&gt;
&lt;h1 id=&#34;the-objective-of-the-game-is-to-win-all-cards&#34;&gt;The objective of the game is to win all cards.&lt;/h1&gt;
&lt;p&gt;A 52-card deck is divided evenly among the players, giving each a down stack. In unison, each player reveals the top card of their deck—this is a &amp;ldquo;battle&amp;rdquo;-and the player with the higher card takes both of the cards played and moves them to their reserves stack. The reserves stack is used when there are no longer cards to play in hand.&lt;/p&gt;
&lt;p&gt;If the two cards played are of equal value, then there is a &amp;ldquo;war&amp;rdquo;. Both players place the next three cards from their hand face down (depending on the variant) and then another card face-up. The owner of the higher face-up card wins the war and adds all six cards on the table to their reserves deck. If the face-up cards are again equal then the battle repeats with another set of face-down/up cards. This repeats until one player&#39;s face-up card is higher than their opponent&#39;s. This is the part of the game where recursion is helpful. In theory, there can be any number of &amp;ldquo;wars&amp;rdquo; only constrained by the number of cards in the deck. Most descriptions of War are unclear about what happens if a player runs out of cards during a war. In this variant, the player immediately loses.&lt;/p&gt;
&lt;p&gt;Below are several simulations that were run to explore game behavior&lt;/p&gt;
&lt;h1 id=&#34;simple-game&#34;&gt;Simple Game&lt;/h1&gt;
&lt;p&gt;This is a shorter game than average with &lt;strong&gt;3&lt;/strong&gt; wars which can be identified by the lines with steeper slopes.
&lt;img src=&#34;img/idw_simulation_2.png&#34; alt=&#34;War Simulation -  3 Wars&#34;&gt;&lt;/p&gt;
&lt;p&gt;This is a slightly longer game with only &lt;strong&gt;4&lt;/strong&gt; wars which occur on card flip: 48, 90, 117, and 152.
&lt;img src=&#34;img/idw_simulation_B.png&#34; alt=&#34;War Simulation - 4 Wars&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;blowing-up&#34;&gt;Blowing Up&lt;/h1&gt;
&lt;p&gt;There is &amp;ldquo;blowing up&amp;rdquo; behavior for some games as well. This behavior is typically exacerbated by wars won by the same player.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;img width=&#34;1604&#34; alt=&#34;...&#34; src=&#34;img/idw_simulation_6.png&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;img width=&#34;1604&#34; alt=&#34;...&#34; src=&#34;img/idw_simulation_8.png&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;img width=&#34;1604&#34; alt=&#34;...&#34; src=&#34;img/idw_simulation_14.png&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;img width=&#34;1604&#34; alt=&#34;...&#34; src=&#34;img/idw_simulation_15.png&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;triple-war&#34;&gt;Triple War&lt;/h3&gt;
&lt;p&gt;When wars occur consecutively, a mass number of cards are moved at once. The example below shows a triple war happening which led Player 2 winning the game. The war began at card flip 698.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/Triple_War.png&#34; alt=&#34;&#34;&gt;
&lt;img src=&#34;img/idw_simulation_16_triple_war.png&#34; alt=&#34;Three Consecutive Wars&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;number-of-wars-per-game&#34;&gt;Number of Wars Per Game&lt;/h1&gt;
&lt;h3 id=&#34;what-is-the-war-and-game-length-relationship&#34;&gt;What is the War and Game Length relationship?&lt;/h3&gt;
&lt;p&gt;One question that we can ask is how does the number was wars in a game relate to the length of the game itself. I modified the program so that it simulated 1000 games and plotted the number of wars versus the length of each game. Below is the result of this simulation.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;img/WCvGL_1.png&#34; alt=&#34;No. of Wars v. Game Length&#34;&gt;&lt;/p&gt;
&lt;p&gt;As you can see, there is a strong linear relationship between the these two quantities. The $R^2 \approx 1$ value is a helpful indicator of this. The $R^2$ and linear equation are:&lt;/p&gt;
&lt;p&gt;$$R^2 = 0.9225$$
$$y(x)=0.0549x+1.2212$$&lt;/p&gt;
&lt;h3 id=&#34;how-many-battles-are-played-before-a-war-breaks-out&#34;&gt;How many battles are played before a war breaks out?&lt;/h3&gt;
&lt;p&gt;This slope tells us that there is a war every approximately 19 &amp;ldquo;battles&amp;rdquo; (where a battle is a single card flip). To prove this by dividing the game length data by 19 and replotting. This would make every x-axis unit equal to 19 battles. If our claim is true, there should be a one-to-one relationship between our new unit and the number of wars per game. Let&#39;s plot it:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;img/WCvGL_2.png&#34; alt=&#34;1 War Every ~19 Battles&#34;&gt;&lt;/p&gt;
&lt;p&gt;The trendline has an equation whose slope is close to 1. This is a good sign that our value of 19 is a nice estimate.&lt;/p&gt;
&lt;p&gt;$$y(x) = 1.0391x+1.4576$$&lt;/p&gt;
&lt;h3 id=&#34;distribution-of-quantities&#34;&gt;Distribution of Quantities&lt;/h3&gt;
&lt;p&gt;It may be helpful to know how the game length or war count themselves are distributed. Below are two histgrams that can give insight into their spread. From the two plots below, we can see that these two distribution are somewhat normal with a slight right skew.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;img/WCvGL_3.png&#34; alt=&#34;Histograms of Game Lengths and War Counts&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;change-the-size-of-the-war&#34;&gt;Change The Size Of The War!&lt;/h1&gt;
&lt;p&gt;When two cards are equal a war begins. In this variant of the game, three additional cards are played face-down and a fourth card is used to do another comparison. This is essentially what a &amp;ldquo;war&amp;rdquo; is in this game. We can change the size of the wars - which means we can change the number of face-down cards we throw down before we do another comparison. Here is a table:&lt;/p&gt;
&lt;center&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;War Size&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;War Size = 2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2 face-down cards before comparing the 3th card during war&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;War Size = 3&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3 face-down cards before comparing the 4th card during war&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;War Size = 4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2 face-down cards before comparing the 5th card during war&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/center&gt;
&lt;p&gt;It would be helpful to plot the WC versus GL plot for each war size. From the plot we can observe how the slope of the linear regression equation changes (or how the &amp;ldquo;war per battle&amp;rdquo; value changes with war size). Click on plot below to see it in detail:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;img/WCvGL_4.png&#34; alt=&#34;Changing War Size&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;how-does-average-game-length-and-war-count-change-with-war-size&#34;&gt;How does Average Game Length and War Count change with War Size&lt;/h3&gt;
&lt;p&gt;The plot below is a clear picture into how the averages and medians change when we change war size&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;img/WCvGL_5.png&#34; alt=&#34;How does average GL and WC change with War Size&#34;&gt;&lt;/p&gt;
&lt;p&gt;It appears that the larger the war size, the more normal the distribution becomes since the average and median approach the same value.&lt;/p&gt;
&lt;p&gt;Another way of looking at the game length for different values of war size would be with a layered bar graph. When the data is ordered and plotted with each war size being a layer, we can create the following graph.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;img/GL_1.png&#34; alt=&#34;Layered Bar Graph of Game Length for Different War Sizes&#34;&gt;&lt;/p&gt;
&lt;p&gt;This graph also shows that the larger the War Size, the smaller the Game Length. Is there anything else we can look into for the analysis of this game?&lt;/p&gt;
&lt;h1 id=&#34;the-code&#34;&gt;The Code&lt;/h1&gt;
&lt;p&gt;The program has been written in Python and is copied below for those interested.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Title: War Simulation
# Date: 3/16/2019
# Author: Eric Pena

from random import shuffle
import random
import pandas as pd
import matplotlib.pyplot as plt
# Create Deck and shuffle it
deck = []
deck = range(13) * 4
shuffle(deck)
# Deal the cards
player1 = deck[::2]
player2 = deck[1::2]
# Create Reserve Piles
player1_res = []
player2_res = []
# Define more variables
topcard = 0
# Game counter
turn = 1
# Calculate the total cards a player has: hand + reserves
#----------------------------------------------------------------------------------------------------------------------------------------------
def total_cards(h, r):
	return (len(h) + len(r))
# Recursive function that happens when war starts	
#----------------------------------------------------------------------------------------------------------------------------------------------
def idw(player1, player2, player1_res, player2_res, jackpot):
	# DEBUG
	print &amp;quot;WAR BREAKS OUT...&amp;quot;
	# Add reserve to hand and shuffle if hand is less than 4 cards:
	if (len(player1) &amp;lt; 4):
		player1.extend(player1_res)
		player1_res = []
		shuffle(player1)
	if (len(player2) &amp;lt; 4):
		player2.extend(player2_res)
		player2_res = []
		shuffle(player2)
	# If this is still not enough cards, clear the cards and stop the game
	if (len(player1) &amp;lt; 4 or len(player2) &amp;lt; 4):
		player1, player2, player1_res, player2_res = ([] for i in range(4))
		return player1, player2, player1_res, player2_res
	# Remove top three cards and put them in reserve pile
	jackpot.extend([player1[0], player1[1], player1[2], player2[0], player2[1], player2[2]])
	player1 = player1[3:]
	player2 = player2[3:]

	# Use fourth card to compare
	if player1[topcard] &amp;gt; player2[topcard]:
		print &amp;quot;PLAYER 1 WINS WAR: &amp;quot; + str(player1[topcard]) + &amp;quot; - &amp;quot; + str(player2[topcard])
		player1_res.extend([player1[topcard], player2[topcard]])
		player1_res.extend(jackpot)
		# Remove cards from hand
		player1 = player1[1:]
		player2 = player2[1:]
		return player1, player2, player1_res, player2_res
	
	elif player1[topcard] &amp;lt; player2[topcard]:
		print &amp;quot;PLAYER 2 WINS WAR: &amp;quot; + str(player1[topcard]) + &amp;quot; - &amp;quot; + str(player2[topcard])
		player2_res.extend([player1[topcard], player2[topcard]])
		player2_res.extend(jackpot)
		# Remove cards from hand
		player1 = player1[1:]
		player2 = player2[1:]
		return player1, player2, player1_res, player2_res
	
	else:		
		print &amp;quot;ANOTHER WAR BEGINS: &amp;quot; + str(player1[topcard]) + &amp;quot; - &amp;quot; + str(player2[topcard])
		jackpot.extend([player1[0], player2[0]])
		player1 = player1[1:]
		player2 = player2[1:]
		return idw(player1, player2, player1_res, player2_res, jackpot)

# Start the game
#----------------------------------------------------------------------------------------------------------------------------------------------
def play_game(player1, player2, player1_res, player2_res, turn):
	# Create a record of the game
	cols = [&amp;quot;Round&amp;quot;, &amp;quot;P1 card&amp;quot;, &amp;quot;P2 card&amp;quot;, &amp;quot;P1 t-len&amp;quot;, &amp;quot;P2 t-len&amp;quot;, &amp;quot;P1 h-len&amp;quot;, &amp;quot;P2 h-len&amp;quot;]
	datarec = pd.DataFrame(columns = cols)
	while (len(player1) != 0 and len(player2) != 0):
		print &amp;quot;Round: &amp;quot; + str(turn) + &amp;quot;\t|\t&amp;quot; + \
			str(player1[topcard]) + &amp;quot;\t|\t&amp;quot; + \
			str(player2[topcard]) + &amp;quot;\t|\t&amp;quot; + \
			str(total_cards(player1, player1_res)) + &amp;quot;\t|\t&amp;quot; + \
			str(total_cards(player2, player2_res)) + &amp;quot;\t|\t&amp;quot; + \
			str(len(player1)) + &amp;quot;\t|\t&amp;quot; + \
			str(len(player2)) + &amp;quot;\t|\t&amp;quot; + \
			str(total_cards(player1, player1_res) + total_cards(player2, player2_res))
		# Add data to pandas dataframe:
		datarec.loc[turn - 1] = [turn, player1[topcard], player2[topcard], total_cards(player1, player1_res), total_cards(player2, player2_res), len(player1), len(player2)]
		# Flip top cards and assign:
		if player1[topcard] &amp;gt; player2[topcard]:
			player1_res.extend([player1[topcard], player2[topcard]])
			# Remove topcard from hands
			player1 = player1[1:]
			player2 = player2[1:]
		elif player1[topcard] &amp;lt; player2[topcard]:
			player2_res.extend([player1[topcard], player2[topcard]])
			# Remove topcard from hands
			player1 = player1[1:]
			player2 = player2[1:]
		else:
			print &amp;quot;TOP: &amp;quot; + str(player1[topcard]) + &amp;quot; - &amp;quot; + str(player2[topcard])
			player1, player2, player1_res, player2_res = idw(player1, player2, player1_res, player2_res,[])

		# Replenish Cards
		if len(player1) == 0:
			player1 = player1_res
			shuffle(player1)
			player1_res = []
			# it1 = 0
		if len(player2) == 0:
			player2 = player2_res
			shuffle(player2)
			player2_res = []
			# it2 = 0
		turn += 1
	return player1, player2, player1_res, player2_res, datarec, turn
#----------------------------------------------------------------------------------------------------------------------------------------------
# MAIN PROGRAM:
print &amp;quot;Round: &amp;quot; + &amp;quot;\t\t|\t&amp;quot; + &amp;quot;P1 card&amp;quot; + &amp;quot;\t|\t&amp;quot; + &amp;quot;P2 card&amp;quot; + &amp;quot;\t|\t&amp;quot; + &amp;quot;P1-T&amp;quot; + &amp;quot;\t|\t&amp;quot; + &amp;quot;P2-T&amp;quot; + &amp;quot;\t|\t&amp;quot; + &amp;quot;P1-H&amp;quot; + &amp;quot;\t|\t&amp;quot; + &amp;quot;P2-H&amp;quot;

player1, player2, player1_res, player2_res, df, turn = play_game(player1, player2, player1_res, player2_res, turn)
plt.plot(df[&amp;quot;Round&amp;quot;], df[&amp;quot;P1 t-len&amp;quot;])
plt.plot(df[&amp;quot;Round&amp;quot;], df[&amp;quot;P2 t-len&amp;quot;])
plt.legend([&#39;Player 1&#39;, &#39;Player 2&#39;])
plt.title(&amp;quot;War Simulation&amp;quot;)
plt.xlabel(&amp;quot;Card Flips&amp;quot;)
plt.ylabel(&amp;quot;Number of Cards For Each Player&amp;quot;)
plt.show()

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>R Programming Data Types</title>
      <link>/post/r-data-types/</link>
      <pubDate>Mon, 04 Mar 2019 00:00:00 +0000</pubDate>
      <guid>/post/r-data-types/</guid>
      <description>&lt;h1 id=&#34;truth-is-ever-to-be-found-in-simplicity-and-not-in-the-multiplicity-and-confusion-of-thingsbrisaac-newton&#34;&gt;&amp;ldquo;Truth is ever to be found in simplicity, and not in the multiplicity and confusion of things.&amp;ldquo;&lt;br&gt;Isaac Newton&lt;/h1&gt;
&lt;p&gt;I approached R in the same way I would any language. I immediately delve into for-loops, conditional statements, user-defined functions, classes, and so on. I didn&#39;t pay much attention to data types at first - assuming they&#39;re not much different than what I&#39;ve seen already. I found myself using dataframes and matricies often with low confidence and a lingering confusion. I needed to know how these R data structures were related. I finally created these notes for myself to get a grip on the topic. Hopefully you find value in them as well.&lt;/p&gt;
&lt;p&gt;The data structures we will cover:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#vector&#34;&gt;Vectors&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#matrix&#34;&gt;Matricies&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#array&#34;&gt;Arrays&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#list&#34;&gt;Lists&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#dataframe&#34;&gt;Data Frames&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#factor&#34;&gt;Factors&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#table&#34;&gt;Tables&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For each data type, we will review the basics of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Creation&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Adding Element&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Deleting Elements&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Indexing&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Filtering&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;and More&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;a-namevectorspan-stylecolor-2980b9vectorsspana&#34;&gt;&lt;a name=&#34;vector&#34;&gt;&lt;span style=&#34;color: #2980B9&#34;&gt;Vectors&lt;/span&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h3 id=&#34;span-stylecolore74c3cintroductionspan&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Introduction&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;All elements in an R vector must have the same mode: &lt;em&gt;integer&lt;/em&gt;, &lt;em&gt;numeric&lt;/em&gt;, &lt;em&gt;character&lt;/em&gt;, &lt;em&gt;logical&lt;/em&gt;, &lt;em&gt;complex&lt;/em&gt;, etc.&lt;/p&gt;
&lt;h3 id=&#34;span-stylecolore74c3ccreationspan&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Creation&lt;/span&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- c(88, 12, 23, 74)
x
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ## [1] 88 12 23 74
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;span-stylecolore74c3cadding-elementspan&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Adding Element&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Adding -44 to vector &lt;code&gt;x&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- c(x,-44)
x
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ## [1]  88  12  23  74 -44
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x[5] &amp;lt;- -44
x
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ## [1]  88  12  23  74 -44
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;span-stylecolore74c3cremove-elementspan&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Remove Element&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Remove 23 from &lt;code&gt;x&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- x[-3]
x
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ## [1]  88  12  74 -44
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It&#39;s possible to remove several items at once:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- x[-3:-5]
x
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ## [1] 88 12
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;span-stylecolore74c3cindexingspan&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Indexing&lt;/span&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- rep(1,10)
x[4] &amp;lt;- 3
x
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ##  [1] 1 1 1 3 1 1 1 1 1 1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x[4]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ## [1] 3
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;span-stylecolore74c3cfilteringspan&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Filtering&lt;/span&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x[6] &amp;lt;- 5
x[9] &amp;lt;- 2
x[x &amp;gt; 2]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ## [1] 3 5
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;span-stylecolore74c3ccombining-vectorsspan&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Combining Vectors&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Find the length of a vector with &lt;code&gt;length(x)&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;When adding two vectors, the lengths of the vectors must be the same or one must be a multiple length of the other. When a vector isn&#39;t long enough to add to another vectors, it will keep repeating itself however many times it needs in order for the lengths to match.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;y &amp;lt;- x + x; y
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ##  [1]  2  2  2  6  2 10  2  2  4  2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;z &amp;lt;- x + c(1,2,3,4,5); z
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ##  [1] 2 3 4 7 6 6 3 4 6 6
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;error &amp;lt;- x + c(1,2,3,4); error
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ## Warning in x + c(1, 2, 3, 4): longer object length is not a multiple of
    ## shorter object length

    ##  [1] 2 3 4 7 2 7 4 5 3 3
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;a-namematrixspan-stylecolor-2980b9matriciesspana&#34;&gt;&lt;a name=&#34;matrix&#34;&gt;&lt;span style=&#34;color: #2980B9&#34;&gt;Matricies&lt;/span&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h3 id=&#34;span-stylecolore74c3cintroductionspan-1&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Introduction&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;A matrix is essentially a vector with two attributes. All the columns in a matrix must have the same mode: &lt;em&gt;integer&lt;/em&gt;, &lt;em&gt;numeric&lt;/em&gt;, &lt;em&gt;character&lt;/em&gt;, &lt;em&gt;logical&lt;/em&gt;, &lt;em&gt;complex&lt;/em&gt;, etc. in the same way it does for a vector. Matricies are special cases of a more general R type of object: &lt;em&gt;arrays&lt;/em&gt; - which we will read about next. Arrays can be multidimensional.&lt;/p&gt;
&lt;h3 id=&#34;span-stylecolore74c3ccreationspan-1&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Creation&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;One way to create a matrix:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;y &amp;lt;- matrix(c(1,2,3,4), nrow = 2, ncol = 2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or simply:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;y &amp;lt;- matrix(c(1,2,3,4), nrow = 2)
y
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ##      [,1] [,2]
    ## [1,]    1    3
    ## [2,]    2    4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using the &lt;code&gt;byrow&lt;/code&gt; argument (default = FALSE):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;m &amp;lt;- matrix(c(1,2,3,4,5,6), nrow = 2, byrow = T)
m
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ##      [,1] [,2] [,3]
    ## [1,]    1    2    3
    ## [2,]    4    5    6
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;span-stylecolore74c3cadding-and-removing-rows-and-columnsspan&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Adding and Removing Rows and Columns&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Rows and columns may be added and deleting from a matrix with operations analogous to the vector operations of adding and deleting. These functions are &lt;code&gt;rbind&lt;/code&gt; and &lt;code&gt;cbind&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Adding a column:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ones_column &amp;lt;- matrix(rep(1,2)); ones_column; m
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ##      [,1]
    ## [1,]    1
    ## [2,]    1

    ##      [,1] [,2] [,3]
    ## [1,]    1    2    3
    ## [2,]    4    5    6
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;cbind(m, ones_column)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ##      [,1] [,2] [,3] [,4]
    ## [1,]    1    2    3    1
    ## [2,]    4    5    6    1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Adding a row: (don&#39;t forgot to adjust the row number: &lt;code&gt;nrow = 1&lt;/code&gt;)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ones_row &amp;lt;- matrix(rep(1,3), nrow = 1); ones_row; m
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ##      [,1] [,2] [,3]
    ## [1,]    1    1    1

    ##      [,1] [,2] [,3]
    ## [1,]    1    2    3
    ## [2,]    4    5    6
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;rbind(ones_row, m)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ##      [,1] [,2] [,3]
    ## [1,]    1    1    1
    ## [2,]    1    2    3
    ## [3,]    4    5    6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Rows may be added by creating matricies and copying:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;new_matrix &amp;lt;- matrix(nrow = 3, ncol = 3)

addded_row &amp;lt;- matrix(c(7,8,9), nrow = 1)

new_matrix[1:2,1:3] &amp;lt;- m
new_matrix[3,1:3] &amp;lt;- addded_row
new_matrix
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ##      [,1] [,2] [,3]
    ## [1,]    1    2    3
    ## [2,]    4    5    6
    ## [3,]    7    8    9
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can use &lt;code&gt;rbind&lt;/code&gt; and &lt;code&gt;cbind&lt;/code&gt; to reassign values. This is a form of deleting data.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;m &amp;lt;- matrix(1:6, nrow = 3); m
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ##      [,1] [,2]
    ## [1,]    1    4
    ## [2,]    2    5
    ## [3,]    3    6
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;m &amp;lt;- m[c(1,3),]; m
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ##      [,1] [,2]
    ## [1,]    1    4
    ## [2,]    3    6
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;span-stylecolore74c3cindexingspan-1&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Indexing&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;To retrieve information from a matrix:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;m[,2]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ## [1] 4 6
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;m[2,]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ## [1] 3 6
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;m[2,2]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ## [1] 6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Values may be changed in a matrix as well:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;m[2,2] &amp;lt;- 66; m
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ##      [,1] [,2]
    ## [1,]    1    4
    ## [2,]    3   66
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;span-stylecolore74c3cfilteringspan-1&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Filtering&lt;/span&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- matrix(c(1,2,3,2,3,4), nrow = 3, byrow = F); x
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ##      [,1] [,2]
    ## [1,]    1    2
    ## [2,]    2    3
    ## [3,]    3    4
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x[x[,2] &amp;gt;= 3]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ## [1] 2 3 3 4
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;j &amp;lt;- x[,2] &amp;gt;= 3
x[j,]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ##      [,1] [,2]
    ## [1,]    2    3
    ## [2,]    3    4
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;span-stylecolore74c3cmatrix-mathspan&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Matrix Math&lt;/span&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;y
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ##      [,1] [,2]
    ## [1,]    1    3
    ## [2,]    2    4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mathematical Matrix Multiplication&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;y %*% y
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ##      [,1] [,2]
    ## [1,]    7   15
    ## [2,]   10   22
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mathematical Muliplication of Matrix by Scalar&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;3*y
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ##      [,1] [,2]
    ## [1,]    3    9
    ## [2,]    6   12
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mathematical Matrix Addition&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;y + y
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ##      [,1] [,2]
    ## [1,]    2    6
    ## [2,]    4    8
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;a-namearrayspan-stylecolor-2980b9arraysspana&#34;&gt;&lt;a name=&#34;array&#34;&gt;&lt;span style=&#34;color: #2980B9&#34;&gt;Arrays&lt;/span&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h3 id=&#34;span-stylecolore74c3cintroductionspan-2&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Introduction&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;The mechanics of an array is very similar to that of a matrix in R. Unlike a matrix, an array can represent data in higher than two dimensions. We may build a three-dimensional array by conbining two matricies, we can build four-dimensional arrays by combining two or more three-dimensional arrays, and so on.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;a-namelistspan-stylecolor-2980b9listsspana&#34;&gt;&lt;a name=&#34;list&#34;&gt;&lt;span style=&#34;color: #2980B9&#34;&gt;Lists&lt;/span&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h3 id=&#34;span-stylecolore74c3cintroductionspan-3&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Introduction&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;List are unique in that not all elements have to be of the same mode. List structures can combine different types. An R list is similar to a Python dictionary or C struct. List form the foundation for data frames, object oriented programming (R classes), and more.&lt;/p&gt;
&lt;h3 id=&#34;span-stylecolore74c3ccreationspan-2&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Creation&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;If we wanted to create an employee database, we could start with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;j &amp;lt;- list(name = &amp;quot;Eric&amp;quot;, salary = 45000, union = T)
j
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ## $name
    ## [1] &amp;quot;Eric&amp;quot;
    ## 
    ## $salary
    ## [1] 45000
    ## 
    ## $union
    ## [1] TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The component names are called &lt;em&gt;tags&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&#34;span-stylecolore74c3cadding-elementspan-1&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Adding Element&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;New components can be added after a list is created:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;z &amp;lt;- list(a = &amp;quot;abc&amp;quot;, b = 12)
z
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ## $a
    ## [1] &amp;quot;abc&amp;quot;
    ## 
    ## $b
    ## [1] 12
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;z$c &amp;lt;- &amp;quot;sailing&amp;quot; # add a c component
z
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ## $a
    ## [1] &amp;quot;abc&amp;quot;
    ## 
    ## $b
    ## [1] 12
    ## 
    ## $c
    ## [1] &amp;quot;sailing&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Adding component can also be done via a vector index:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;z[[4]] &amp;lt;- 28
z[5:7] &amp;lt;- c(F,T,T)
z
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ## $a
    ## [1] &amp;quot;abc&amp;quot;
    ## 
    ## $b
    ## [1] 12
    ## 
    ## $c
    ## [1] &amp;quot;sailing&amp;quot;
    ## 
    ## [[4]]
    ## [1] 28
    ## 
    ## [[5]]
    ## [1] FALSE
    ## 
    ## [[6]]
    ## [1] TRUE
    ## 
    ## [[7]]
    ## [1] TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also concatenate lists:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;cat &amp;lt;- c(list(&amp;quot;Joe&amp;quot;, 55000, T), list(5)); cat
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ## [[1]]
    ## [1] &amp;quot;Joe&amp;quot;
    ## 
    ## [[2]]
    ## [1] 55000
    ## 
    ## [[3]]
    ## [1] TRUE
    ## 
    ## [[4]]
    ## [1] 5
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;span-stylecolore74c3cremove-elementspan-1&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Remove Element&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;You can delete a list component by setting it equal to &lt;code&gt;NULL&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;z$b &amp;lt;- NULL
z
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ## $a
    ## [1] &amp;quot;abc&amp;quot;
    ## 
    ## $c
    ## [1] &amp;quot;sailing&amp;quot;
    ## 
    ## [[3]]
    ## [1] 28
    ## 
    ## [[4]]
    ## [1] FALSE
    ## 
    ## [[5]]
    ## [1] TRUE
    ## 
    ## [[6]]
    ## [1] TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;span-stylecolore74c3cindexingspan-2&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Indexing&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;You can access a list component in several different ways:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;j$salary
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ## [1] 45000
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;j[[&amp;quot;salary&amp;quot;]]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ## [1] 45000
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;j[[2]]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ## [1] 45000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;What&#39;s the deal with the single and double brackets?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If single brackets are used, the result is another list - a sublist of the original.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;j1 &amp;lt;- j[1:2]; j1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ## $name
    ## [1] &amp;quot;Eric&amp;quot;
    ## 
    ## $salary
    ## [1] 45000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If double brackets are used, it is for referring to a single component and is return in the type of the component.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;j[[2]]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ## [1] 45000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following returns an error since it&#39;s trying to return several components using a function that is meant to return one:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# j[[1:2]]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;span-stylecolore74c3cfilteringspan-2&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Filtering&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Accessing list components:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;names(j)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ## [1] &amp;quot;name&amp;quot;   &amp;quot;salary&amp;quot; &amp;quot;union&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can also get the specific values instead:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ulj &amp;lt;- unlist(j); ulj
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ##    name  salary   union 
    ##  &amp;quot;Eric&amp;quot; &amp;quot;45000&amp;quot;  &amp;quot;TRUE&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Each values above has a name. This name may be removed with the following function:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;names(ulj) &amp;lt;- NULL
ulj
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ## [1] &amp;quot;Eric&amp;quot;  &amp;quot;45000&amp;quot; &amp;quot;TRUE&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;using-lapply-and-sapply-functions&#34;&gt;Using &lt;code&gt;lapply()&lt;/code&gt; and &lt;code&gt;sapply()&lt;/code&gt; functions&lt;/h5&gt;
&lt;p&gt;This applies a specific function on each of the compoenents of a list and returns another list:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;lapply(list(1:3,25:29), median)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ## [[1]]
    ## [1] 2
    ## 
    ## [[2]]
    ## [1] 27
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;sapply()&lt;/code&gt; returns a vector-valued answer:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sapply(list(1:3,25:29), median)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ## [1]  2 27
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;span-stylecolore74c3crecursive-listsspan&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Recursive Lists&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;You can have lists within lists:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;b &amp;lt;- list(u = 5, v = 12)
c &amp;lt;- list(w = 13)
a &amp;lt;- list(b, c)
a
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ## [[1]]
    ## [[1]]$u
    ## [1] 5
    ## 
    ## [[1]]$v
    ## [1] 12
    ## 
    ## 
    ## [[2]]
    ## [[2]]$w
    ## [1] 13
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;TIP: The concatenate function c() has an optional argument &lt;code&gt;recursive&lt;/code&gt;, which controls whether &lt;em&gt;flattening&lt;/em&gt; occurs when recursive lists are combined.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;a-namedataframespan-stylecolor-2980b9data-framesspana&#34;&gt;&lt;a name=&#34;dataframe&#34;&gt;&lt;span style=&#34;color: #2980B9&#34;&gt;Data Frames&lt;/span&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h3 id=&#34;span-stylecolore74c3cintroductionspan-4&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Introduction&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Data frames are similar to a two dimensional matrix in that it contains rows and columns structure. However, data frame are heterogeneous; columns can be different modes. Technically, a data frame is a list whose components are equal-lengthed vectors as the columns of the data frame. Data frame are commonly used when doing data manipulation and other data analysis techniques in R.&lt;/p&gt;
&lt;h3 id=&#34;span-stylecolore74c3ccreationspan-3&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Creation&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Creating a data frame from scratch:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;scientists &amp;lt;- c(&amp;quot;Einstein&amp;quot;, &amp;quot;Newton&amp;quot;)
born &amp;lt;- c(1879, 1642)

d &amp;lt;- data.frame(scientists, born, stringsAsFactors = FALSE)
d
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ##   scientists born
    ## 1   Einstein 1879
    ## 2     Newton 1642
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the named argument &lt;code&gt;stringsAsFactors&lt;/code&gt; is not specified, then by default, &lt;code&gt;stringsAsFactors&lt;/code&gt; will be TRUE.&lt;/p&gt;
&lt;p&gt;Data frames can also be created from external files (.csv, .mtp, .xls, .spss, .txt) using: &lt;br&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;mydata = read.csv(&amp;quot;mydata.csv&amp;quot;, header = TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;mydata = read.mtp(&amp;quot;mydata.mtp&amp;quot;)  # read from .mtp file
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;mydata = read.xls(&amp;quot;mydata.xls&amp;quot;)  # read from first sheet
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;mydata = read.spss(&amp;quot;myfile&amp;quot;, to.data.frame=TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;mydata = read.table(&amp;quot;mydata.txt&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and many more options.&lt;/p&gt;
&lt;h3 id=&#34;span-stylecolore74c3cadding-elementspan-2&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Adding Element&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;rbind()&lt;/code&gt; and &lt;code&gt;cbind()&lt;/code&gt; matrix functions also work in data frames to add new rows or columns of the same length.&lt;/p&gt;
&lt;p&gt;Adding a new row:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;d1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ##   kids ages
    ## 1 jack   12
    ## 2 Jill   10
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;rbind(d1, list(&amp;quot;laura&amp;quot;, 19))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ##    kids ages
    ## 1  jack   12
    ## 2  Jill   10
    ## 3 laura   19
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Adding a column&lt;/p&gt;
&lt;h3 id=&#34;span-stylecolore74c3cremove-elementspan-2&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Remove Element&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Data deletion in a data frame is similar to that of a vector.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;d2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ##    kids ages
    ## 1  jack   12
    ## 2  Jill   10
    ## 3 laura   19
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;d2 &amp;lt;- d2[-2,]
d2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ##    kids ages
    ## 1  jack   12
    ## 3 laura   19
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;span-stylecolore74c3cindexingspan-3&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Indexing&lt;/span&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;d[[1]]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ## [1] &amp;quot;Einstein&amp;quot; &amp;quot;Newton&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;d$scientists
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ## [1] &amp;quot;Einstein&amp;quot; &amp;quot;Newton&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We may also access elements in a matrix-like way we well:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;d[,1]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ## [1] &amp;quot;Einstein&amp;quot; &amp;quot;Newton&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It can be helpful to know the structure of the data frame and is easy to achieve:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str(d)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ## &#39;data.frame&#39;:    2 obs. of  2 variables:
    ##  $ scientists: chr  &amp;quot;Einstein&amp;quot; &amp;quot;Newton&amp;quot;
    ##  $ born      : num  1879 1642
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;span-stylecolore74c3cfilteringspan-3&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Filtering&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Let&#39;s take a look at how to filter data in a data frame:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;cars &amp;lt;- cars[c(&amp;quot;mpg&amp;quot;, &amp;quot;hp&amp;quot;, &amp;quot;wt&amp;quot;,&amp;quot;cyl&amp;quot;)]
head(cars)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ##                    mpg  hp    wt cyl
    ## Mazda RX4         21.0 110 2.620   6
    ## Mazda RX4 Wag     21.0 110 2.875   6
    ## Datsun 710        22.8  93 2.320   4
    ## Hornet 4 Drive    21.4 110 3.215   6
    ## Hornet Sportabout 18.7 175 3.440   8
    ## Valiant           18.1 105 3.460   6
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;cars[cars$cyl == 8,]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ##                      mpg  hp    wt cyl
    ## Hornet Sportabout   18.7 175 3.440   8
    ## Duster 360          14.3 245 3.570   8
    ## Merc 450SE          16.4 180 4.070   8
    ## Merc 450SL          17.3 180 3.730   8
    ## Merc 450SLC         15.2 180 3.780   8
    ## Cadillac Fleetwood  10.4 205 5.250   8
    ## Lincoln Continental 10.4 215 5.424   8
    ## Chrysler Imperial   14.7 230 5.345   8
    ## Dodge Challenger    15.5 150 3.520   8
    ## AMC Javelin         15.2 150 3.435   8
    ## Camaro Z28          13.3 245 3.840   8
    ## Pontiac Firebird    19.2 175 3.845   8
    ## Ford Pantera L      15.8 264 3.170   8
    ## Maserati Bora       15.0 335 3.570   8
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;cars[,c(&amp;quot;mpg&amp;quot;, &amp;quot;hp&amp;quot;)][cars$wt &amp;lt;= 4,]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ##                    mpg  hp
    ## Mazda RX4         21.0 110
    ## Mazda RX4 Wag     21.0 110
    ## Datsun 710        22.8  93
    ## Hornet 4 Drive    21.4 110
    ## Hornet Sportabout 18.7 175
    ## Valiant           18.1 105
    ## Duster 360        14.3 245
    ## Merc 240D         24.4  62
    ## Merc 230          22.8  95
    ## Merc 280          19.2 123
    ## Merc 280C         17.8 123
    ## Merc 450SL        17.3 180
    ## Merc 450SLC       15.2 180
    ## Fiat 128          32.4  66
    ## Honda Civic       30.4  52
    ## Toyota Corolla    33.9  65
    ## Toyota Corona     21.5  97
    ## Dodge Challenger  15.5 150
    ## AMC Javelin       15.2 150
    ## Camaro Z28        13.3 245
    ## Pontiac Firebird  19.2 175
    ## Fiat X1-9         27.3  66
    ## Porsche 914-2     26.0  91
    ## Lotus Europa      30.4 113
    ## Ford Pantera L    15.8 264
    ## Ferrari Dino      19.7 175
    ## Maserati Bora     15.0 335
    ## Volvo 142E        21.4 109
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;a-namefactorspan-stylecolor-2980b9factorsspana&#34;&gt;&lt;a name=&#34;factor&#34;&gt;&lt;span style=&#34;color: #2980B9&#34;&gt;Factors&lt;/span&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h3 id=&#34;span-stylecolore74c3cintroductionspan-5&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Introduction&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;The motivation for factors comes from the concept of categorical data in statistics. An R &lt;code&gt;factor&lt;/code&gt; may be viewed as a vector with more information added. The extra information consists of a record of the distinct values on that vector, called levels.&lt;/p&gt;
&lt;h3 id=&#34;span-stylecolore74c3ccreationspan-4&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Creation&lt;/span&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- c(5, 12, 13, 12)
xf &amp;lt;- factor(x)
xf
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ## [1] 5  12 13 12
    ## Levels: 5 12 13
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The distinct values in xf: 5, 12, and 13 are the levels&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str(xf)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ##  Factor w/ 3 levels &amp;quot;5&amp;quot;,&amp;quot;12&amp;quot;,&amp;quot;13&amp;quot;: 1 2 3 2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;unclass(xf)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ## [1] 1 2 3 2
    ## attr(,&amp;quot;levels&amp;quot;)
    ## [1] &amp;quot;5&amp;quot;  &amp;quot;12&amp;quot; &amp;quot;13&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;length(xf)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ## [1] 4
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;span-stylecolore74c3cadding-elementspan-3&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Adding Element&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Future new levels can be anticipated as well:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- c(5, 12, 13, 12)
xff &amp;lt;- factor(x, levels = c(5, 12, 13, 88))
xff
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ## [1] 5  12 13 12
    ## Levels: 5 12 13 88
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;xff[2] &amp;lt;- 88
xff
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ## [1] 5  88 13 12
    ## Levels: 5 12 13 88
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Although you cannot add a value that doesn&#39;t have a level associated with it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;xff[2] &amp;lt;- 28
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    ## invalid factor level, NA generated

### &amp;lt;span style=&amp;quot;color:#E74C3C&amp;quot;&amp;gt;Remove Element&amp;lt;/span&amp;gt;

### &amp;lt;span style=&amp;quot;color:#E74C3C&amp;quot;&amp;gt;Indexing&amp;lt;/span&amp;gt;

### &amp;lt;span style=&amp;quot;color:#E74C3C&amp;quot;&amp;gt;Filtering&amp;lt;/span&amp;gt;

### &amp;lt;span style=&amp;quot;color:#E74C3C&amp;quot;&amp;gt;Math&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;a-nametablespan-stylecolor-2980b9tablesspana&#34;&gt;&lt;a name=&#34;table&#34;&gt;&lt;span style=&#34;color: #2980B9&#34;&gt;Tables&lt;/span&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h3 id=&#34;span-stylecolore74c3cintroductionspan-6&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Introduction&lt;/span&gt;&lt;/h3&gt;
&lt;h3 id=&#34;span-stylecolore74c3ccreationspan-5&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Creation&lt;/span&gt;&lt;/h3&gt;
&lt;h3 id=&#34;span-stylecolore74c3cadding-elementspan-4&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Adding Element&lt;/span&gt;&lt;/h3&gt;
&lt;h3 id=&#34;span-stylecolore74c3cremove-elementspan-3&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Remove Element&lt;/span&gt;&lt;/h3&gt;
&lt;h3 id=&#34;span-stylecolore74c3cindexingspan-4&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Indexing&lt;/span&gt;&lt;/h3&gt;
&lt;h3 id=&#34;span-stylecolore74c3cfilteringspan-4&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Filtering&lt;/span&gt;&lt;/h3&gt;
&lt;h3 id=&#34;span-stylecolore74c3cmathspan&#34;&gt;&lt;span style=&#34;color:#E74C3C&#34;&gt;Math&lt;/span&gt;&lt;/h3&gt;
</description>
    </item>
    
  </channel>
</rss>
