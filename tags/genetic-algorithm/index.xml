<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Genetic Algorithm on Eric Peña</title>
    <link>https://ericpena.github.io/tags/genetic-algorithm/</link>
    <description>Recent content in Genetic Algorithm on Eric Peña</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 01 Dec 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ericpena.github.io/tags/genetic-algorithm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Genetic Algorithm — Cellular Automata Optimization</title>
      <link>https://ericpena.github.io/2019/ga-liso/</link>
      <pubDate>Sun, 01 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ericpena.github.io/2019/ga-liso/</guid>
      <description>Abstract The mechanism by which nature exhibits emergent patterns and behaviors has been a mystery throughout history. One application that has been developed which tends to mimic nature is Conway’s Game of Life — an application in the field of cellular automata. The ability to predict a final state of a system, given an initial state in the context of Game of Life, come as an insurmountable task. In this work, genetic algorithms are explored along with how they may be used to search for initial conditions such that their final outcomes are optimal.</description>
    </item>
    
    <item>
      <title>First Genetic Algorithm — Prints: ericpena</title>
      <link>https://ericpena.github.io/2019/ga-intro/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ericpena.github.io/2019/ga-intro/</guid>
      <description>Components of a Genetic Algorithm: The Genetic Algorithm Code Written in Python: from fuzzywuzzy import fuzz import random import string class Agent: def __init__(self, length): # Initialize a new agent self.string = &#39;&#39;.join(random.choice(string.ascii_letters) for _ in range(length)) self.fitness = -1 def __str__(self): return &#39;String: &#39; + str(self.string) + &#39; Fitness: &#39; + str(self.fitness) in_str = None in_str_len = None population = 20 generations = 5000 # All the code to evolve def ga(): agents = init_agents(population, in_str_len) for generation in range(generations): print(&#39;Generation: &#39; + str(generation)) agents = fitness(agents) agents = selection(agents) agents = crossover(agents) agents = mutation(agents) if any(agent.</description>
    </item>
    
  </channel>
</rss>