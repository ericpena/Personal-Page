<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Simulation | ERIC PEÑA</title>
    <link>/tags/simulation/</link>
      <atom:link href="/tags/simulation/index.xml" rel="self" type="application/rss+xml" />
    <description>Simulation</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>©2020 Eric Peña</copyright><lastBuildDate>Mon, 09 Sep 2019 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/img/icon-192.png</url>
      <title>Simulation</title>
      <link>/tags/simulation/</link>
    </image>
    
    <item>
      <title>First Genetic Algorithm</title>
      <link>/post/ga-intro/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      <guid>/post/ga-intro/</guid>
      <description>&lt;h1 id=&#34;components-of-a-genetic-algorithm&#34;&gt;Components of a Genetic Algorithm&lt;/h1&gt;
&lt;h1 id=&#34;genetic-algorithm-written-in-python&#34;&gt;Genetic Algorithm Written in Python&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from fuzzywuzzy import fuzz
import random
import string

class Agent:

	def __init__(self, length):

		# Initialize a new agent
		self.string = &#39;&#39;.join(random.choice(string.ascii_letters) for _ in range(length))
		self.fitness = -1

	def __str__(self):

		return &#39;String: &#39; + str(self.string) + &#39; Fitness: &#39; + str(self.fitness)

in_str = None
in_str_len = None
population = 20
generations = 5000

# All the code to evolve
def ga():
	
	agents = init_agents(population, in_str_len)

	for generation in range(generations):

		print(&#39;Generation: &#39; + str(generation))

		agents = fitness(agents)
		agents = selection(agents)
		agents = crossover(agents)
		agents = mutation(agents)

		if any(agent.fitness &amp;gt;= 90 for agent in agents):

			print(&#39;Threshold met!&#39;)
			exit(0)

def init_agents(population, length):

	return [Agent(length) for _ in range(population)]

def fitness(agents):

	for agent in agents:

		agent.fitness = fuzz.ratio(agent.string, in_str)

	return agents

def selection(agents):

	agents = sorted(agents, key=lambda agent: agent.fitness, reverse=True)
	print(&#39;\n&#39;.join(map(str, agents)))
	agents = agents[:int(0.2 * len(agents))]

	return agents

def crossover(agents):

	offspring = []

	for _ in range(int((population - len(agents)) / 2)):

		parent1 = random.choice(agents)
		parent2 = random.choice(agents)
		child1 = Agent(in_str_len)
		child2 = Agent(in_str_len)
		split = random.randint(0, in_str_len)
		child1.string = parent1.string[0:split] + parent2.string[split:in_str_len]
		child2.string = parent2.string[0:split] + parent1.string[split:in_str_len]

		offspring.append(child1)
		offspring.append(child2)

	agents.extend(offspring)

	return agents

def mutation(agents):

	for agent in agents:

		for idx, param in enumerate(agent.string):

			if random.uniform(0.0, 1.0) &amp;lt;= 0.1:

				agent.string = agent.string[0:idx] + \
					random.choice(string.ascii_letters) + \
					agent.string[idx + 1:in_str_len]

	return agents

if __name__ == &#39;__main__&#39;:
	
	in_str = &#39;ericpena&#39;
	in_str_len = len(in_str)
	ga()
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;results&#34;&gt;Results&lt;/h1&gt;
</description>
    </item>
    
  </channel>
</rss>
